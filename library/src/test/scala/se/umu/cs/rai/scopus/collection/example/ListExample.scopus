package se.umu.cs.rai.scopus.collection.example

* ListExample() {

  A: Seq[Char] = Seq('A', 'B', 'C', 'D', 'E', 'F')
  B: Seq[Int] = Seq(10, 20, 30, 40, 50, 60)

  aExample: (String, Seq[Char]) =
    ("A", A)

  bExample: (String, Seq[Int]) =
    ("B", B)

  takeExample: (String, Seq[Char]) =
    ("A.take(3)", A.take(3))

  takeRightExample: (String, Seq[Char]) =
    ("A.takeRight(3)", A.takeRight(3))

  takeWhileExample: (String, Seq[Char]) =
    ("A.takeWhile(x => x != 'E')", A.takeWhile(x => x != 'E'))

  dropExample: (String, Seq[Char]) =
    ("A.drop(2)", A.drop(2))

  dropRightExample: (String, Seq[Char]) =
    ("A.dropRight(2)", A.dropRight(2))

  dropWhileExample: (String, Seq[Char]) =
    ("A.dropWhile(x => x != 'E')", A.dropWhile(x => x != 'E'))

  splitAtExample: (String, (Seq[Char], Seq[Char])) =
    ("A.splitAt(3)", A.splitAt(3))

  indicesExample: (String, Range) =
    ("A.indices", A.indices)

  zipWithIndexExample: (String, Seq[(Char, Int)]) =
    ("A.zipWithIndex", A.zipWithIndex)

  zipExample: (String, Seq[(Char, Int)]) =
    ("A.zip(B)", A.zip(B))

  reverseExample: (String, Seq[Char]) =
    ("A.reverse", A.reverse)

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  prependExample: (String, Seq[Char]) =
    ("'X' +: A", ('X' +: A))

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  appendExample: (String, Seq[Char]) =
    ("A :+ 'X'", (A :+ 'X'))

  concatExample: (String, Seq[Int]) =
    ("A.map(_.toInt).concat(B)", A.map(_.toInt).concat(B))

  spanExample: (String, (Seq[Char], Seq[Char])) =
    ("A.span(x => x != 'D')", A.span(x => x != 'D'))

  mapExample: (String, Seq[Int]) =
    ("A.map(x => x.toInt)", A.map(x => x.toInt))

  filterExample: (String, Seq[Char]) =
    ("A.filter(x => x.toInt % 2 == 0)", A.filter(x => x.toInt % 2 == 0))

  foldExample: (String, Int) =
    ("B.fold(0)((a, b) => a + b)", B.fold(0)((a, b) => a + b))

  foldLeftExample: (String, Seq[Char]) =
    ("A.foldLeft(Seq('*'))((list, elem) => \"(\" + list + \" :+ \" + elem + \")\")", A.foldLeft(Seq('*'))((list, elem) => "(" + list + " :+ " + elem + ")"))

  foldRightExample: (String, Seq[Char]) =
    ("A.foldRight(Seq('*'))((elem, list) => \"(\" + elem + \" +: \" + list + \")\")", A.foldRight(Seq('*'))((elem, list) => "(" + elem + " +: " + list + ")"))

}

