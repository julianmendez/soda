package soda.collection.example


* ListExampleSpec() extends org.scalatest.funsuite.AnyFunSuite = {

  test("should test a") {
    expected = Pair("a", List('A', 'B', 'C', 'D', 'E', 'F'))
    obtained = ListExampleImpl().a_example

    assert(obtained == expected)
  }

  test("should test b") {
    expected = Pair("b", List(10, 20, 30, 40, 50, 60))
    obtained = ListExampleImpl().b_example

    assert(obtained == expected)
  }

  test("should test a.take") {
    expected = Pair("a.take(3)", List('A', 'B', 'C'))
    obtained = ListExampleImpl().take_example

    assert(obtained == expected)
  }

  test("should test a.takeRight") {
    expected = Pair("a.takeRight(3)", List('D', 'E', 'F'))
    obtained = ListExampleImpl().takeRight_example

    assert(obtained == expected)
  }

  test("should test a.takeWhile") {
    expected = Pair("a.takeWhile(x -> not (x == 'E'))", List('A', 'B', 'C', 'D'))
    obtained = ListExampleImpl().takeWhile_example

    assert(obtained == expected)
  }

  test("should test a.drop") {
    expected = Pair("a.drop(2)", List('C', 'D', 'E', 'F'))
    obtained = ListExampleImpl().drop_example

    assert(obtained == expected)
  }

  test("should test a.dropRight") {
    expected = Pair("a.dropRight(2)", List('A', 'B', 'C', 'D'))
    obtained = ListExampleImpl().dropRight_example

    assert(obtained == expected)
  }

  test("should test a.dropWhile") {
    expected = Pair("a.dropWhile(x -> not (x == 'E'))", List('E', 'F'))
    obtained = ListExampleImpl().dropWhile_example

    assert(obtained == expected)
  }

  test("should test a.splitAt") {
    expected = Pair("a.splitAt(3)", (List('A', 'B', 'C'), List('D', 'E', 'F')))
    obtained = ListExampleImpl().splitAt_example

    assert(obtained == expected)
  }

  test("should test a.indices") {
    expected = Pair("a.indices", Range(0, 6))
    obtained = ListExampleImpl().indices_example

    assert(obtained == expected)
  }

  test("should test a.zipWithIndex") {
    expected = Pair("a.zipWithIndex", List(('A',0), ('B',1), ('C',2), ('D',3), ('E',4), ('F',5)))
    obtained = ListExampleImpl().zipWithIndex_example

    assert(obtained == expected)
  }

  test("should test a.zip") {
    expected = Pair("a.zip(b)", List(('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50), ('F', 60)))
    obtained = ListExampleImpl().zip_example

    assert(obtained == expected)
  }

  test("should test a.reverse") {
    expected = Pair("a.reverse", List('F', 'E', 'D', 'C', 'B', 'A'))
    obtained = ListExampleImpl().reverse_example

    assert(obtained == expected)
  }

  test("should test a.+") {
    expected = Pair("a.+:('X')", List('X', 'A', 'B', 'C', 'D', 'E', 'F'))
    obtained = ListExampleImpl().prepended_example

    assert(obtained == expected)
  }

  test("should test a.:") {
    expected = Pair("a.:+('X')", List('A', 'B', 'C', 'D', 'E', 'F', 'X'))
    obtained = ListExampleImpl().appended_example

    assert(obtained == expected)
  }

  test("should test a.++") {
    expected = Pair("a.map(_.toInt).++(b)", List(65, 66, 67, 68, 69, 70, 10, 20, 30, 40, 50, 60))
    obtained = ListExampleImpl().concat_example

    assert(obtained == expected)
  }

  test("should test a.span") {
    expected = Pair("a.span(x -> not (x == 'D'))", (List('A', 'B', 'C'), List('D', 'E', 'F')))
    obtained = ListExampleImpl().span_example

    assert(obtained == expected)
  }

  test("should test a.map") {
    expected = Pair("a.map(x -> x.toInt)", List(65, 66, 67, 68, 69, 70))
    obtained = ListExampleImpl().map_example

    assert(obtained == expected)
  }

  test("should test a.filter") {
    expected = Pair("a.filter(x -> x.toInt % 2 == 0)", List('B', 'D', 'F'))
    obtained = ListExampleImpl().filter_example

    assert(obtained == expected)
  }

  test("should test b.fold") {
    expected = Pair("b.fold(0)((a, b) -> a + b)", 210)
    obtained = ListExampleImpl().fold_example

    assert(obtained == expected)
  }

  test("should test a.foldLeft") {
    expected = Pair("a.foldLeft(Seq('*'))((list, elem) -> \"(\" + list + \" :+ \" + elem + \")\")", "((((((List(*) :+ A) :+ B) :+ C) :+ D) :+ E) :+ F)".toCharArray.toSeq)
    obtained = ListExampleImpl().foldLeft_example

    assert(obtained == expected)
  }

  test("should test a.foldRight") {
    expected = Pair("a.foldRight(Seq('*'))((elem, list) -> \"(\" + elem + \" +: \" + list + \")\")", "(A +: (B +: (C +: (D +: (E +: (F +: List(*)))))))".toCharArray.toSeq)
    obtained = ListExampleImpl().foldRight_example

    assert(obtained == expected)
  }
}

