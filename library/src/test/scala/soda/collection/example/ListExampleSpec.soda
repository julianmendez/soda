package soda.collection.example

class ListExampleSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  test ("should test a")
    let
      expected = Pair_ ("a", List ('A', 'B', 'C', 'D', 'E', 'F'))
      obtained = ListExample_ ().a_example
    in assert (obtained == expected)

  test ("should test b")
    let
      expected = Pair_ ("b", List (10, 20, 30, 40, 50, 60))
      obtained = ListExample_ ().b_example
    in assert (obtained == expected)

  test ("should test a.take")
    let
      expected = Pair_ ("a.take(3)", List ('A', 'B', 'C'))
      obtained = ListExample_ ().take_example
    in assert (obtained == expected)

  test ("should test a.takeRight")
    let
      expected = Pair_ ("a.takeRight(3)", List ('D', 'E', 'F'))
      obtained = ListExample_ ().takeRight_example
    in assert (obtained == expected)

  test ("should test a.takeWhile")
    let
      expected = Pair_ ("a.takeWhile(x -> not (x == 'E'))", List ('A', 'B', 'C', 'D'))
      obtained = ListExample_ ().takeWhile_example
    in assert (obtained == expected)

  test ("should test a.drop")
    let
      expected = Pair_ ("a.drop(2)", List ('C', 'D', 'E', 'F'))
      obtained = ListExample_ ().drop_example
    in assert (obtained == expected)

  test ("should test a.dropRight")
    let
     expected = Pair_ ("a.dropRight(2)", List ('A', 'B', 'C', 'D'))
      obtained = ListExample_ ().dropRight_example
    in assert (obtained == expected)

  test ("should test a.dropWhile")
    let
      expected = Pair_ ("a.dropWhile(x -> not (x == 'E'))", List ('E', 'F'))
      obtained = ListExample_ ().dropWhile_example
    in assert (obtained == expected)

  test ("should test a.splitAt")
    let
      expected = Pair_ ("a.splitAt(3)", (List ('A', 'B', 'C'), List ('D', 'E', 'F')))
      obtained = ListExample_ ().splitAt_example
    in assert (obtained == expected)

  test ("should test a.indices")
    let
      expected = Pair_ ("a.indices", Range(0, 6))
      obtained = ListExample_ ().indices_example
    in assert (obtained == expected)

  test ("should test a.zipWithIndex")
    let
      expected = Pair_ ("a.zipWithIndex", List (('A',0), ('B',1), ('C',2), ('D',3), ('E',4), ('F',5)))
      obtained = ListExample_ ().zipWithIndex_example
    in assert (obtained == expected)

  test ("should test a.zip")
    let
      expected = Pair_ ("a.zip(b)", List (('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50), ('F', 60)))
      obtained = ListExample_ ().zip_example
    in assert (obtained == expected)

  test ("should test a.reverse")
    let
      expected = Pair_ ("a.reverse", List ('F', 'E', 'D', 'C', 'B', 'A'))
      obtained = ListExample_ ().reverse_example
    in assert (obtained == expected)

  test ("should test a.+")
    let
      expected = Pair_ ("a.+:('X')", List ('X', 'A', 'B', 'C', 'D', 'E', 'F'))
      obtained = ListExample_ ().prepended_example
    in assert (obtained == expected)

  test ("should test a.:")
    let
      expected = Pair_ ("a.:+('X')", List ('A', 'B', 'C', 'D', 'E', 'F', 'X'))
      obtained = ListExample_ ().appended_example
    in assert (obtained == expected)

  test ("should test a.++")
    let
      expected = Pair_ ("a.map(_.toInt).++(b)", List (65, 66, 67, 68, 69, 70, 10, 20, 30, 40, 50, 60))
      obtained = ListExample_ ().concat_example
    in assert (obtained == expected)

  test ("should test a.span")
    let
      expected = Pair_ ("a.span(x -> not (x == 'D'))", (List ('A', 'B', 'C'), List ('D', 'E', 'F')))
      obtained = ListExample_ ().span_example
    in assert (obtained == expected)

  test ("should test a.map")
    let
      expected = Pair_ ("a.map(x -> x.toInt)", List (65, 66, 67, 68, 69, 70))
      obtained = ListExample_ ().map_example
    in assert (obtained == expected)

  test ("should test a.filter")
    let
      expected = Pair_ ("a.filter(x -> x.toInt % 2 == 0)", List ('B', 'D', 'F'))
      obtained = ListExample_ ().filter_example
    in assert (obtained == expected)

  test ("should test b.fold")
    let
      expected = Pair_ ("b.fold(0)((a, b) -> a + b)", 210)
      obtained = ListExample_ ().fold_example
    in assert (obtained == expected)

  test ("should test a.foldLeft")
    let
      expected = Pair_ ("a.foldLeft(Seq('*'))((list, elem) -> \"(\" + list + \" :+ \" + elem + \")\")", "((((((List(*) :+ A) :+ B) :+ C) :+ D) :+ E) :+ F)".toCharArray.toSeq)
      obtained = ListExample_ ().foldLeft_example
    in assert (obtained == expected)

  test ("should test a.foldRight")
    let
      expected = Pair_ ("a.foldRight(Seq('*'))((elem, list) -> \"(\" + elem + \" +: \" + list + \")\")", "(A +: (B +: (C +: (D +: (E +: (F +: List(*)))))))".toCharArray.toSeq)
      obtained = ListExample_ ().foldRight_example
    in assert (obtained == expected)

end

