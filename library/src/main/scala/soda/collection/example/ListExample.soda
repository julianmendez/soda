package soda.collection.example


* Pair[T](name: String, result: T)

* ListExample() {

  A: Seq[Char] = Seq('A', 'B', 'C', 'D', 'E', 'F')
  B: Seq[Int] = Seq(10, 20, 30, 40, 50, 60)

  aExample: Pair[Seq[Char]] =
    Pair("A", A)

  bExample: Pair[Seq[Int]] =
    Pair("B", B)

  takeExample: Pair[Seq[Char]] =
    Pair("A.take(3)", A.take(3))

  takeRightExample: Pair[Seq[Char]] =
    Pair("A.takeRight(3)", A.takeRight(3))

  takeWhileExample: Pair[Seq[Char]] =
    Pair("A.takeWhile(x -> not (x == 'E'))", A.takeWhile(x -> not (x == 'E')))

  dropExample: Pair[Seq[Char]] =
    Pair("A.drop(2)", A.drop(2))

  dropRightExample: Pair[Seq[Char]] =
    Pair("A.dropRight(2)", A.dropRight(2))

  dropWhileExample: Pair[Seq[Char]] =
    Pair("A.dropWhile(x -> not (x == 'E'))", A.dropWhile(x -> not (x == 'E')))

  splitAtExample: Pair[(Seq[Char], Seq[Char])] =
    Pair("A.splitAt(3)", A.splitAt(3))

  indicesExample: Pair[Range] =
    Pair("A.indices", A.indices)

  zipWithIndexExample: Pair[Seq[(Char, Int)]] =
    Pair("A.zipWithIndex", A.zipWithIndex)

  zipExample: Pair[Seq[(Char, Int)]] =
    Pair("A.zip(B)", A.zip(B))

  reverseExample: Pair[Seq[Char]] =
    Pair("A.reverse", A.reverse)

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  prependedExample: Pair[Seq[Char]] =
    Pair("A.+:('X')", (A.+:('X')))

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  appendedExample: Pair[Seq[Char]] =
    Pair("A.:+('X')", (A.:+('X')))

  concatExample: Pair[Seq[Int]] =
    Pair("A.map(_.toInt).++(B)", A.map(_.toInt).++(B))

  spanExample: Pair[(Seq[Char], Seq[Char])] =
    Pair("A.span(x -> not (x == 'D'))", A.span(x -> not (x == 'D')))

  mapExample: Pair[Seq[Int]] =
    Pair("A.map(x -> x.toInt)", A.map(x -> x.toInt))

  filterExample: Pair[Seq[Char]] =
    Pair("A.filter(x -> x.toInt % 2 == 0)", A.filter(x -> x.toInt % 2 == 0))

  foldExample: Pair[Int] =
    Pair("B.fold(0)((a, b) -> a + b)", B.fold(0)((a, b) -> a + b))

  foldLeftExample: Pair[Seq[Char]] =
    Pair("A.foldLeft(Seq('*'))((list, elem) -> \"(\" + list + \" :+ \" + elem + \")\")", A.foldLeft(Seq('*'))((list, elem) -> "(" + list + " :+ " + elem + ")"))

  foldRightExample: Pair[Seq[Char]] =
    Pair("A.foldRight(Seq('*'))((elem, list) -> \"(\" + elem + \" +: \" + list + \")\")", A.foldRight(Seq('*'))((elem, list) -> "(" + elem + " +: " + list + ")"))

}

