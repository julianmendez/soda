package soda.collection.example


* Pair[T](name: String, result: T)

* ListExample = {

  a: Seq[Char] = Seq('A', 'B', 'C', 'D', 'E', 'F')
  b: Seq[Int] = Seq(10, 20, 30, 40, 50, 60)

  aExample: Pair[Seq[Char]] =
    Pair("a", a)

  bExample: Pair[Seq[Int]] =
    Pair("b", b)

  takeExample: Pair[Seq[Char]] =
    Pair("a.take(3)", a.take(3))

  takeRightExample: Pair[Seq[Char]] =
    Pair("a.takeRight(3)", a.takeRight(3))

  takeWhileExample: Pair[Seq[Char]] =
    Pair("a.takeWhile(x -> not (x == 'E'))", a.takeWhile(x -> not (x == 'E')))

  dropExample: Pair[Seq[Char]] =
    Pair("a.drop(2)", a.drop(2))

  dropRightExample: Pair[Seq[Char]] =
    Pair("a.dropRight(2)", a.dropRight(2))

  dropWhileExample: Pair[Seq[Char]] =
    Pair("a.dropWhile(x -> not (x == 'E'))", a.dropWhile(x -> not (x == 'E')))

  splitAtExample: Pair[(Seq[Char], Seq[Char])] =
    Pair("a.splitAt(3)", a.splitAt(3))

  indicesExample: Pair[Range] =
    Pair("a.indices", a.indices)

  zipWithIndexExample: Pair[Seq[(Char, Int)]] =
    Pair("a.zipWithIndex", a.zipWithIndex)

  zipExample: Pair[Seq[(Char, Int)]] =
    Pair("a.zip(b)", a.zip(b))

  reverseExample: Pair[Seq[Char]] =
    Pair("a.reverse", a.reverse)

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  prependedExample: Pair[Seq[Char]] =
    Pair("a.+:('X')", (a.+:('X')))

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  appendedExample: Pair[Seq[Char]] =
    Pair("a.:+('X')", (a.:+('X')))

  concatExample: Pair[Seq[Int]] =
    Pair("a.map(_.toInt).++(b)", a.map(_.toInt).++(b))

  spanExample: Pair[(Seq[Char], Seq[Char])] =
    Pair("a.span(x -> not (x == 'D'))", a.span(x -> not (x == 'D')))

  mapExample: Pair[Seq[Int]] =
    Pair("a.map(x -> x.toInt)", a.map(x -> x.toInt))

  filterExample: Pair[Seq[Char]] =
    Pair("a.filter(x -> x.toInt % 2 == 0)", a.filter(x -> x.toInt % 2 == 0))

  foldExample: Pair[Int] =
    Pair("b.fold(0)((a, b) -> a + b)", b.fold(0)((a, b) -> a + b))

  foldLeftExample: Pair[Seq[Char]] =
    Pair("a.foldLeft(Seq('*'))((list, elem) -> \"(\" + list + \" :+ \" + elem + \")\")", a.foldLeft(Seq('*'))((list, elem) -> "(" + list + " :+ " + elem + ")"))

  foldRightExample: Pair[Seq[Char]] =
    Pair("a.foldRight(Seq('*'))((elem, list) -> \"(\" + elem + \" +: \" + list + \")\")", a.foldRight(Seq('*'))((elem, list) -> "(" + elem + " +: " + list + ")"))
}

* ListExampleImpl() extends ListExample

