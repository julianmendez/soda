package soda.collection.example

class Pair [T]

  abstract
    name: String
    result: T

end

class ListExample

  a: Seq [Char] = Seq ('A', 'B', 'C', 'D', 'E', 'F')

  b: Seq [Int] = Seq (10, 20, 30, 40, 50, 60)

  a_example: Pair [Seq [Char]] =
    Pair_("a", a)

  b_example: Pair [Seq [Int]] =
    Pair_("b", b)

  take_example: Pair [Seq [Char]] =
    Pair_("a.take(3)", a.take(3))

  takeRight_example: Pair [Seq [Char]] =
    Pair_("a.takeRight(3)", a.takeRight(3))

  takeWhile_example: Pair [Seq [Char]] =
    Pair_("a.takeWhile(x -> not (x == 'E'))", a.takeWhile(x -> not (x == 'E')))

  drop_example: Pair [Seq [Char]] =
    Pair_("a.drop(2)", a.drop(2))

  dropRight_example: Pair [Seq [Char]] =
    Pair_("a.dropRight(2)", a.dropRight(2))

  dropWhile_example: Pair [Seq [Char]] =
    Pair_("a.dropWhile(x -> not (x == 'E'))", a.dropWhile(x -> not (x == 'E')))

  splitAt_example: Pair [(Seq [Char], Seq [Char])] =
    Pair_("a.splitAt(3)", a.splitAt(3))

  indices_example: Pair [Range] =
    Pair_("a.indices", a.indices)

  zipWithIndex_example: Pair [Seq [(Char, Int)]] =
    Pair_("a.zipWithIndex", a.zipWithIndex)

  zip_example: Pair [Seq [(Char, Int)]] =
    Pair_("a.zip(b)", a.zip(b))

  reverse_example: Pair [Seq [Char]] =
    Pair_("a.reverse", a.reverse)

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  prepended_example: Pair [Seq [Char]] =
    Pair_("a.+:('X')", (a.+:('X')))

  /**
   * A mnemonic for `+:` vs. `:+` is: the COLon goes on the COLlection side.
   */
  appended_example: Pair [Seq [Char]] =
    Pair_("a.:+('X')", (a.:+('X')))

  concat_example: Pair [Seq [Int]] =
    Pair_("a.map(_.toInt).++(b)", a.map(_.toInt).++(b))

  span_example: Pair [(Seq [Char], Seq [Char])] =
    Pair_("a.span(x -> not (x == 'D'))", a.span(x -> not (x == 'D')))

  map_example: Pair [Seq [Int]] =
    Pair_("a.map(x -> x.toInt)", a.map(x -> x.toInt))

  filter_example: Pair [Seq [Char]] =
    Pair_("a.filter(x -> x.toInt % 2 == 0)", a.filter(x -> x.toInt % 2 == 0))

  fold_example: Pair [Int] =
    Pair_("b.fold(0)((a, b) -> a + b)", b.fold(0)((a, b) -> a + b))

  foldLeft_example: Pair [Seq [Char]] =
    Pair_("a.foldLeft(Seq('*'))((list, elem) -> \"(\" + list + \" :+ \" + elem + \")\")", a.foldLeft(Seq('*'))((list, elem) -> "(" + list + " :+ " + elem + ")"))

  foldRight_example: Pair [Seq [Char]] =
    Pair_("a.foldRight(Seq('*'))((elem, list) -> \"(\" + elem + \" +: \" + list + \")\")", a.foldRight(Seq('*'))((elem, list) -> "(" + elem + " +: " + list + ")"))

end


