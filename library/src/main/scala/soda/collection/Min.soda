package soda.collection


* MSeqTranslator[T]() {

  foldLeftSeq[B](seq: Seq[T], initial_value: B, next_value: (B, T) -> B): B = {
    result = rec(seq, initial_value, next_value)

    @tailrec
    rec[B](seq: Seq[T], acc: B, next_value: (B, T) -> B): B =
      if seq.isEmpty
      then acc
      else rec(seq.tail, next_value(acc, seq.head), next_value)

    result
  }

  asMSeq(seq: Seq[T]): MSeq[T] = {
    result = Min().reverse(
      foldLeftSeq[MSeq[T]](seq, initial_value, next_value) )

    initial_value: MSeq[T] = Min().empty

    next_value(acc: MSeq[T], elem: T): MSeq[T] = Min().prepended(acc, elem)

    result
  }

  asSeq(mseq: MSeq[T]): Seq[T] = {
    result = Min().foldLeft(mseq, initial_value, next_value).reverse

    initial_value: Seq[T] = Seq()

    next_value(acc: Seq[T], elem: T): Seq[T] = acc.+:(elem)

    result
  }

}


* Min[T]() {

  empty: MSeq[T] = ESeq()

  prepended(s: MSeq[T], e: T): NESeq[T] = NESeq(e, s)

  head(s: MSeq[T]): T = s.asNonEmpty.get.head()

  tail(s: MSeq[T]): MSeq[T] = s.asNonEmpty.get.tail()

  nonEmpty(s: MSeq[T]): Boolean = not isEmpty(s)

  isEmpty(s: MSeq[T]): Boolean = s.isEmpty

  /* */

  foldLeftWhile[B](s: MSeq[T], initial_value: B, next_value: (B, T) -> B, condition: (B, T) -> Boolean): B =
    s.foldLeftWhile[B](initial_value, next_value, condition)

  foldLeft[B](s: MSeq[T], initial_value: B, next_value: (B, T) -> B): B = {
    condition(acc: B, elem: T): Boolean = true

    foldLeftWhile[B](s, initial_value, next_value, condition)
  }

  reverse(s: MSeq[T]): MSeq[T] = {
    initial_value: MSeq[T] = empty

    next_value(acc: MSeq[T], elem: T): MSeq[T] = prepended(acc, elem)

    foldLeft(s, initial_value, next_value)
  }

  length(s: MSeq[T]): Int = {
    initial_value: Int = 0

    next_value(acc: Int, elem: T): Int = acc + 1

    foldLeft(s, initial_value, next_value)
  }

  indexOf(s: MSeq[T], e: T): Int = {
    initial_value = FoldTuple(0, -1)

    next_value(tuple: FoldTuple, elem: T): FoldTuple =
      FoldTuple(tuple.index + 1,
        if elem == e then tuple.index else tuple.position)

    condition(tuple: FoldTuple, elem: T): Boolean = tuple.position == -1

    * FoldTuple(index: Int, position: Int)

    foldLeftWhile(s, initial_value, next_value, condition).position
  }

  contains(s: MSeq[T], e: T): Boolean = {
    initial_value: Boolean = false

    next_value(acc: Boolean, elem: T): Boolean = elem == e

    condition(acc: Boolean, elem: T): Boolean = not acc

    foldLeftWhile(s, initial_value, next_value, condition)
  }

  at(s: MSeq[T], n: Int): Option[T] = {
    maybe_neseq = s.asNonEmpty

    result =
      if maybe_neseq.isEmpty or n < 0 or n >= length(s)
      then None
      else Some(atNonEmpty(maybe_neseq.get, n))

    atNonEmpty(xs: NESeq[T], n: Int): T = {
      initial_value = FoldTuple(xs.head(), -1)

      next_value(tuple: FoldTuple, elem: T): FoldTuple = FoldTuple(elem, tuple.index + 1)

      condition(tuple: FoldTuple, elem: T): Boolean = tuple.index < n

      * FoldTuple(elem: T, index: Int)

      foldLeftWhile(xs, initial_value, next_value, condition).elem
    }

    result
  }

  /* */

  take(s: MSeq[T], n: Int): MSeq[T] = {
    result = reverse(
        foldLeftWhile(s, initial_value, next_value, condition).seq )

    initial_value = FoldTuple(empty, 0)

    next_value(tuple: FoldTuple, elem: T): FoldTuple =
      FoldTuple(prepended(tuple.seq, elem), tuple.index + 1)

    condition (tuple: FoldTuple, elem: T): Boolean =
      tuple.index < n

    * FoldTuple(seq: MSeq[T], index: Int)

    result
  }

  drop(s: MSeq[T], n: Int): MSeq[T] = {
    result = foldLeftWhile(s, initial_value, next_value, condition).seq

    initial_value = FoldTuple(s, 0)

    next_value(tuple: FoldTuple, elem: T): FoldTuple =
      FoldTuple(tail(tuple.seq), tuple.index + 1)

    condition (tuple: FoldTuple, elem: T): Boolean =
      tuple.index < n

    * FoldTuple(seq: MSeq[T], index: Int)

    result
  }

  takeWhile(s: MSeq[T], p: (T -> Boolean)): MSeq[T] = reverse(spanRevRec(s, p)._1)

  dropWhile(s: MSeq[T], p: (T -> Boolean)): MSeq[T] = spanRevRec(s, p)._2

  splitAt(s: MSeq[T], n: Int): (MSeq[T], MSeq[T]) = (take(s, n), drop(s, n))

  span(s: MSeq[T], p: (T -> Boolean)): (MSeq[T], MSeq[T]) = {
    pair = spanRevRec(s, p)
    (reverse(pair._1), pair._2)
  }

  /* */

  appended(s: MSeq[T], e: T): MSeq[T] = reverse(prepended(reverse(s), e))

  last(s: MSeq[T]): T = head(reverse(s))

  concat(s0: MSeq[T], s1: MSeq[T]): MSeq[T] = {
    initial_value: MSeq[T] = s1

    next_value(acc: MSeq[T], elem: T): MSeq[T] = prepended(acc, elem)

    s0rev = reverse(s0)

    foldLeft(s0rev, initial_value, next_value)
  }

  slice(s: MSeq[T], from: Int, until: Int): MSeq[T] = take(drop(s, from), until - from)

  /* */

  forall(s: MSeq[T], p: (T -> Boolean)): Boolean = {
    result = foldLeftWhile(s, initial_value, next_value, condition)

    initial_value = true

    next_value(acc: Boolean, elem: T): Boolean = acc and p(elem)

    condition(acc: Boolean, elem: T): Boolean = acc

    result
  }

  exists(s: MSeq[T], p: (T -> Boolean)): Boolean = {
    result = foldLeftWhile(s, initial_value, next_value, condition)

    initial_value = false

    next_value(acc: Boolean, elem: T): Boolean = acc or p(elem)

    condition(acc: Boolean, elem: T): Boolean = not acc

    result
  }

  find(s: MSeq[T], p: (T -> Boolean)): Option[T] = {
      result = foldLeftWhile(s, initial_value, next_value, condition)

      initial_value = None

      next_value(acc: Option[T], elem: T): Option[T] =
        if p(elem) then Some(elem) else None

      condition(acc: Option[T], elem: T): Boolean = acc.isEmpty

      result
    }

  filter(s: MSeq[T], p: (T -> Boolean)): MSeq[T] = {
      result = reverse( foldLeft(s, initial_value, next_value) )

      initial_value = empty

      next_value(acc: MSeq[T], elem: T): MSeq[T] =
        if p(elem)
        then prepended(acc, elem)
        else acc

      result
    }

  map0(s: MSeq[T], f: (T -> T)): MSeq[T] = {
    result = reverse( foldLeft(s, initial_value, next_value) )

    initial_value = empty

    next_value(acc: MSeq[T], elem: T): MSeq[T] =
      prepended(acc, f(elem))

    result
  }

  /**
   * <pre>
   * def foldLeft[B](z: B)(op: (B, A) -> B): B = {
   * . var result = z
   * . it = iterator
   * . while (it.hasNext) {
   * . . result = op(result, it.next())
   * . }
   * . result
   * }
   * </pre>
   */
  foldLeft0(mseq: MSeq[T]): (MSeq[T], ((MSeq[T], T) -> MSeq[T])) -> MSeq[T] =
    (initial_value: MSeq[T], next_value: ((MSeq[T], T) -> MSeq[T])) -> foldLeft(mseq, initial_value, next_value)

  /* */

  spanRevRec(s0: MSeq[T], p: T -> Boolean): (MSeq[T], MSeq[T]) = {
    result = (pair.right, pair.left)
    pair = foldLeftWhile(s0, initial_value, next_value, condition)

    initial_value = FoldTuple(s0, empty, true)

    next_value(tuple: FoldTuple, elem: T): FoldTuple = {
      left = tuple.left
      right = tuple.right
      if isEmpty(left)
      then FoldTuple(left, right, false)
      else {
        e = head(left)
        new_taking = p(e)

        if new_taking
        then FoldTuple(tail(left), prepended(right, e), new_taking)
        else FoldTuple(left, right, new_taking)
      }
    }

    condition(tuple: FoldTuple, elem: T): Boolean = tuple.taking

    * FoldTuple(left: MSeq[T], right: MSeq[T], taking: Boolean)

    result
  }

}

