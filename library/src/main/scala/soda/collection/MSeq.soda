package soda.collection


* MSeq[T] {
  has isEmpty: Boolean

  has asNonEmpty: Option[NESeq[T]]

  foldLeftWhile[B, C extends B](initial_value: C, next_value: (B, T) -> C, condition: (B, T) -> Boolean): C = {
    result = rec(this, initial_value, next_value, condition)

    @tailrec
    rec(seq: MSeq[T], acc: C, next_value: (B, T) -> C, condition: (B, T) -> Boolean): C = {
      maybe_neseq = seq.asNonEmpty

      if maybe_neseq.isEmpty
      then acc
      else {
        neseq = maybe_neseq.get
        (elem, rest) = (neseq.head(), neseq.tail())
        if not condition(acc, elem)
        then acc
        else rec(rest, next_value(acc, elem), next_value, condition)
      }
    }

    result
  }

}


* ESeq[T] () extends MSeq[T] {

  isEmpty = true

  asNonEmpty: Option[NESeq[T]] = None

}


* NESeq[T] (head0: T, tail0: MSeq[T]) extends MSeq[T] {

  isEmpty = false

  asNonEmpty: Option[NESeq[T]] = Some(this)

  head(): T = head0

  tail(): MSeq[T] = tail0

}

