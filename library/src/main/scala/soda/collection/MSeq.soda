package soda.collection


* MSeq[T] {
  has isEmpty: Boolean
  has _head(): Option[T]
  has _tail(): Option[MSeq[T]]

  head() = _head().get

  tail() = _tail().get

  foldLeftWhile[B](initial_value: B, next_value: (B, T) -> B, condition: (B, T) -> Boolean): B = {
    result = rec(this, initial_value, next_value, condition)

    @tailrec
    rec[B](seq: MSeq[T], acc: B, next_value: (B, T) -> B, condition: (B, T) -> Boolean): B =
      if seq.isEmpty
      then acc
      else {
        (elem, rest) = (seq.head(), seq.tail())
        if not condition(acc, elem)
        then acc
        else rec(rest, next_value(acc, elem), next_value, condition)
      }

    result
  }

}


* ESeq[T] ()
  extends MSeq[T] {

  isEmpty = true

  _head() = Option.empty

  _tail() = Option.empty

}


* NESeq[T] (head0: T, tail0: MSeq[T])
  extends MSeq[T] {

  isEmpty = false

  _head() = Some(head0)

  _tail() = Some(tail0)

}

