package scopus.collection


* MSeq[T] {
  has isEmpty: Boolean
  has _head(): Option[T]
  has _tail(): Option[MSeq[T]]

  head() = _head().get

  tail() = _tail().get

  foldLeftWhile[B](initval: B, op: (B, T) -> B, cond: (B, T) -> Boolean): B = {
    result = rec(this, initval, op, cond)

    @tailrec
    rec[B](seq: MSeq[T], acc: B, op: (B, T) -> B, cond: (B, T) -> Boolean): B =
      if seq.isEmpty
      then acc
      else {
        (elem, rest) = (seq.head(), seq.tail())
        if not cond(acc, elem)
        then acc
        else rec(rest, op(acc, elem), op, cond)
      }

    result
  }

}


* ESeq[T] ()
  extends MSeq[T] {

  isEmpty = true

  _head() = Option.empty

  _tail() = Option.empty

}


* NESeq[T] (head0: T, tail0: MSeq[T])
  extends MSeq[T] {

  isEmpty = false

  _head() = Some(head0)

  _tail() = Some(tail0)

}

