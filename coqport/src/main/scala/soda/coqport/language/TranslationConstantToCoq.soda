package soda.coqport.language


/**
 * This class contains constants that are specific for the Soda translator, like reserved words for Soda and Scala.
 */
* TranslationConstantToCoq = {

  soda_definition: String = "="

  soda_colon: String = ":"

  soda_opening_parenthesis: String = "("

  soda_opening_brace: String = "{"

  scala_3_class_definition: String = ":"

  soda_in_reserved_word: String = "in"

  soda_in_pattern: String = soda_in_reserved_word + " "

  soda_let_reserved_word: String = "let"

  soda_let_pattern: String = soda_let_reserved_word + " "

  scala_in_translation: String = " }"

  soda_in_let_pattern: String = soda_in_reserved_word + " " + soda_let_reserved_word + " "

  scala_in_let_translation: String = " "

  soda_match_reserved_word: String = "match"

  soda_match_pattern: String = soda_match_reserved_word + " "

  scala_match_translation: String = " match "

  soda_class_reserved_word: String = "class"

  scala_definition: String = "Definition"

  scala_value: String = "Definition"

  scala_entry_point: String = "object EntryPoint {\n  def main(args: Array[String]): Unit = Main().main(args)\n}\n"

  soda_reserved_words = Seq(
    "=",
    ":",
    "->",
    ":=",
    "if",
    "then",
    "else",
    "let",
    "in",
    "class",
    "has",
    "extends",
    "with",
    "this",
    "subtype",
    "supertype",
    "false",
    "true",
    "not",
    "and",
    "or",
    "package",
    "import",
    "is",
    "<:",
    ">:",
    "+",
    "-",
    "*",
    "/"
  )

  /**
   * Scala 3 keywords:
   *   https://dotty.epfl.ch/docs/internals/syntax.html
   * Scala 2 keywords:
   *   https://www.scala-lang.org/files/archive/spec/2.13/01-lexical-syntax.html
   */
  scala_reserved_words =
    scala_3_regular_keywords ++ scala_3_soft_keywords ++ scala_2_extra_keywords

  scala_3_regular_keywords = Seq(
    "abstract",
    "case",
    "catch",
    "class",
    "def",
    "do",
    "else",
    "enum",
    "export",
    "extends",
    "false",
    "final",
    "finally",
    "for",
    "given",
    "if",
    "implicit",
    "import",
    "lazy",
    "match",
    "new",
    "null",
    "object",
    "override",
    "package",
    "private",
    "protected",
    "return",
    "sealed",
    "super",
    "then",
    "throw",
    "trait",
    "true",
    "try",
    "type",
    "val",
    "var",
    "while",
    "with",
    "yield",
    ":",
    "=",
    "<-",
    "=>",
    "<:",
    ">:",
    "#",
    "@",
    "=>>",
    "?=>"
  )

  scala_3_soft_keywords = Seq(
    "as",
    "derives",
    "end",
    "extension",
    "infix",
    "inline",
    "opaque",
    "open",
    "transparent",
    "using",
    "|",
    "*",
    "+",
    "-"
  )

  scala_2_extra_keywords = Seq(
    "forSome",
    "macro",
    "this",
    "_",
    "<%",
    "\u21D2",
    "\u2190"
  )

  synonym_at_beginning: Seq[(String, String)] = Seq(
    ("*", "class"),
    ("+", "import")
  )

  translation_at_beginning_with_paren: Seq[(String, String)] = Seq(
    ("class", "case class"),
    ("has", "def")
  )

  translation_at_beginning_without_paren_for_type_alias: Seq[(String, String)] = Seq(
    ("class", "type")
  )

  translation_at_beginning_without_paren: Seq[(String, String)] = Seq(
    ("class", "trait"),
    ("has", "def"),
    ("package", "package"),
    ("import", "import"),

    /** Annotations */
    ("@override", "override"),
    ("@tailrec", "import scala.annotation.tailrec\n        @tailrec  final"),
    ("@main", scala_entry_point)
  )

  synonym: Seq[(String, String)] = Seq(
    ("is", ":=")
  )

  main_translation: Seq[(String, String)] = Seq(
    (";", "."),
    (":", ":"),
    ("->", "=>"),
    ("=", ":="),
    ("if", "if"),
    ("then", "then"),
    ("else", "else"),
    ("let", "let"),
    ("in", "in"),
    ("false", "false"),
    ("true", "true"),
    ("not", "!"),
    ("and", "/\\"),
    ("or", "\\/")
  )

  prefix_scala_non_soda = "__soda__"

  scala_non_soda: Seq[(String, String)] =
    scala_reserved_words
      .filter(x -> not soda_reserved_words.contains(x))
      .map(x -> (x, prefix_scala_non_soda + x) )

  soda_brackets_and_comma = Seq( '(', ')', '[', ']', '{', '}', ',' )

  beautifier: Seq[(String, String)] = Seq(
    ("\\.\\s+", "."),
    ("=\\s+", "= "),
    ("\\s+=", " ="),
    ("\\(\\s+", "("),
    ("\\[\\s+", "["),
    ("\\s+\\]", "]"),
    ("\\s+,", ","),
    (",\\s+", ", "),
    ("\\s+:", " :"),
    (":\\s+", ": ")
  )

  reserved_word_joiner: Seq[String] = Seq(
    "extends", "with"
  )

  symbol_forward_joiner: Seq[String] = Seq(
    ",", "(", "["
  )

  symbol_backward_joiner: Seq[String] = Seq(
    ")", "]"
  )

  is_scala_word(word: String): Boolean =
    scala_reserved_words.contains(word)

  is_soda_word(word: String): Boolean =
    soda_reserved_words.contains(word)
}

* TranslationConstantToCoq_()
  extends TranslationConstantToCoq

