
class Nat

  abstract
    add : Nat -> Nat
    mul : Nat -> Nat

end

class O
  extends
    Nat

  add : Nat -> Nat =
    lambda a --> add_for (a)

  add_for (a : Nat) : Nat =
    a

  mul : Nat ->  Nat =
    lambda a --> mul_for (a)

  mul_for (a : Nat) : Nat =
    this

end

class S
  extends
    Nat

  abstract
    k : Nat

  t = IntNat_ ()

  add : Nat -> Nat =
    lambda a --> add_for (a)

  add_for (a : Nat) : Nat =
    t .from_non_negative ( (t .to_Int (k) + 1) + t .to_Int (a) )

  mul : Nat ->  Nat =
    lambda a --> mul_for (a)

  mul_for (a : Nat) : Nat =
    t .from_non_negative ( (t .to_Int (k) + 1) * t .to_Int (a) )

end

class IntNat

  import
    soda.lib.NoneSD_
    soda.lib.OptionSD
    soda.lib.SomeSD_

  from_Int (a : Int) : OptionSD [Nat] =
    if a < 0
    then NoneSD_ [Nat] ()
    else SomeSD_ [Nat] (from_non_negative (a) )

  @tailrec
  _tailrec_from_non_negative (a : Int) (b : Nat) : Nat =
    if a <= 0
    then b
    else _tailrec_from_non_negative (a - 1) (S_ (b) )

  from_non_negative (a : Int) : Nat =
    _tailrec_from_non_negative (a) (O_ () )

  to_Int (a : Nat) : Int =
    match a
      case S_ (k) ==> 1 + to_Int (k)
      case otherwise ==> 0

end
