package soda.example.inanutshell

class InANutshell

  f (x: Int): Int = x + 16

  b = f (a)

  a = 1 + 2 + 4 + 8

  h0 (x: Int) (y: Int): Int =
    let
      a = x + y
      b = x - y
    in a * b

  h1 (x: Int) (y: Int): Int =
    let
      a = x + y
      b = x - y
    in a * b

  h2 (x: Int) (y: Int): Int =
    let
      result = a * b
      a = x + y
      b = x - y
    in result

  is_greater_than (a: Int) (b: Int): Boolean =
    a > b

  max (a: Int) (b: Int): Int =
    if a > b
    then a
    else b

end

class MaxAndMin

  max (a: Int) (b: Int): Int =
    if a > b
    then a
    else b

  min (a: Int) (b: Int): Int =
    if a < b
    then a
    else b

end

class MaxAndMin_ ()
  extends
    MaxAndMin

end

class MinMaxPair

  abstract
    min: Int
    max: Int

end

class MinMaxPair_ (min: Int, max: Int)
  extends MinMaxPair

end

class Indexable

  abstract
    index: Int

end

class Example
  extends Indexable

  abstract
    index: Int

  min_max (a: Int) (b: Int): MinMaxPair =
    MinMaxPair_ (
      min := MaxAndMin_ ().min (a) (b),
      max := MaxAndMin_ ().max (a) (b)
    )

end

class Example_ (index: Int)
  extends
    Example

end

class Comparable

  abstract
    is_greater_than: Comparable -> Boolean

end

class ComparableMax [T subtype Comparable]

  max (a: T) (b: T): T =
    if a.is_greater_than (b)
    then a
    else b

end

class WithInstance

  abstract
    instance_parameter: Int

end

class MyClass
  extends
    WithInstance

  class_constant: Int = 1

  another_function (x: Int): Int = 2 * x

end

class TimeOfToday

  import
    java.util.Date

  get_time: Date = @new Date ()

end

class MainClass

  main (arguments: Array [String]): Unit =
    println ("Hello world!")

end

class Main ()
  extends
    MainClass

end

class PersonName

  abstract
    name: String

  @override
  toString = name

end

