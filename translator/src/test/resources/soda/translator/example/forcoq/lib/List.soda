package soda.example.forcoq.lib

* list [A]

* nil [A] ()
  extends list [A]

* cons [A] (e: A, s: list [A])
  extends list [A]

* SeqList = {

  + soda.lib.OptionSD
  + soda.lib.NoneSD_
  + soda.lib.SomeSD_
  + soda.lib.Recursion_

  @tailrec
  _tailrec_reverse [A] (a: list [A]) (b: list [A]): list [A] =
    match a
      | nil () => b
      | cons (e, s) => _tailrec_reverse (s) ( cons (e, b) )
    end

  reverse [A] (s: list [A]): list [A] =
    _tailrec_reverse [A] (s) (nil[A]())

  @tailrec
  _tailrec_from_Seq [A] (a: Seq [A]) (b: list [A]): list [A] =
    match a
      | Nil => b
      | (e) :: (s) => _tailrec_from_Seq (s) (cons (e, b))
    end

  from_Seq [A] (a: Seq [A]): list [A] =
    reverse (_tailrec_from_Seq (a) ( nil[A]() ) )

  @tailrec
  _tailrec_to_Seq [A] (a: list [A]) (b: Seq [A]): Seq [A] =
    match a
      | nil () => b
      | cons (e, s) => _tailrec_to_Seq (s) ( b .+: (e) )
    end

  to_Seq [A] (a: list [A]): Seq [A] =
    (_tailrec_to_Seq (a) ( Seq[A]() )) .reverse

}

* SeqList_()
  extends SeqList

