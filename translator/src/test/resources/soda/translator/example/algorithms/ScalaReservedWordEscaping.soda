package soda.example.algorithms

class ScalaReservedWordEscaping

  var = "var"

  val = 1

  def [A, B] (key : A) (value : B) : MyPair [A, B] = MyPair_ (key, value)

  while [A, B] (seq : Seq [A] ) (cond : A -> Boolean) (do : A -> B) : Seq [B] =
    seq.takeWhile (cond).map (lambda do)

  protected = "protected"

  private = "private"

  f (x : Int) (y : Int) : Int = x + y

  cons : Int -> Int -> Int = lambda x -> lambda y -> f (x) (y)

end

class MyPair [A, B]

  abstract
    key : A
    value : B

end

