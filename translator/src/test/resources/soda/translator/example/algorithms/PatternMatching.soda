
class Singleton
  extends
    Parameter

  abstract
    x : Int

  name = "singleton"

end Singleton

class Pair
  extends
    Parameter

  abstract
    x : Int
    y : Int

  name = "pair"

end Pair

class Triplet
  extends
    Parameter

  abstract
    x : Int
    y : Int
    z : Int

  name = "triplet"

end Triplet

class Parameter

  abstract
    name : String

end Parameter

class PatternMatching

  get_value (p : Parameter) : Int =
    match p
      case Singleton_ (x) ==> x
      case Pair_ (x , y) ==> (x + y) / 2
      case Triplet_ (x , y , z) ==> (x + y + z) / 3
      case otherwise ==> 0

  get_type_name (p : Parameter) : String =
    match p
      case Singleton_ (x) ==> (Singleton_ (x) ) .name + " (x)"
      case Pair_ (x , y) ==> (Pair_ (x , y) ) .name + " (x , y)"
      case Triplet_ (x , y , z) ==> (Triplet_ (x , y , z) ) .name + " (x , y , z)"
      case otherwise ==> ""

end PatternMatching

