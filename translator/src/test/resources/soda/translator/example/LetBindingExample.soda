package soda.example.algorithms

class LetBindingExample

  three_parts_like_where =
    let
      result = Seq (first_part, second_part, third_part)
      /* where */
      part = " part"
      first_part = "first" + part
      second_part = "second" + part
      third_part = "third" + part
    in result

  three_parts_like_let_in =
    let
      part = " part"
      first_part = "first" + part
      second_part = "second" + part
      third_part = "third" + part
    in Seq (first_part, second_part, third_part)

  three_parts_like_coq_let_in =
    let part = " part"
    in let first_part = "first" + part
    in let
      second_part = "second" + part
    in let third_part = "third" + part
    in Seq [String] ().+: (third_part).+: (second_part).+: (first_part)

  three_parts_without_let_in =
    Seq [String] ().+: (_third_part).+: (_second_part).+: (_first_part)

  _part = " part"

  _first_part = "first" + _part

  _second_part = "second" + _part

  _third_part = "third" + _part

end

class LetBindingExample_ ()
  extends
    LetBindingExample

end


