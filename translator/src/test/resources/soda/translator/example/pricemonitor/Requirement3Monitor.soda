package soda.example.pricemonitor

class Report3 (compliant: Boolean, price_of_flight: Int, price_of_flight_by_segments: Int)

class Requirement3Monitor
  extends RequirementMonitor =

  get_report (customer: Customer, flight: Flight, date_in_days: Int): Report3 =
    let
      price_of_flight = get_price (customer, flight, date_in_days)
      price_of_flight_by_segments = get_price_of_flight_by_segments (customer, flight, date_in_days)
    in Report3 (price_of_flight <= price_of_flight_by_segments, price_of_flight, price_of_flight_by_segments)

  get_price_of_flight_by_segments (customer: Customer, flight: Flight, date_in_days: Int): Int =
    sum_prices (get_prices_of_segments (customer, SegmentsForFlight_ (flight).segments, date_in_days))

  get_prices_of_segments (customer: Customer, segments: Seq[Segment], date_in_days: Int): Seq[Int] =
    segments.map (segment -> get_price (customer, segment, date_in_days) )

  sum_prices (prices: Seq[Int]): Int =
    prices.sum

end

class Requirement3Monitor_(pricing_agent: PricingAgent)
  extends Requirement3Monitor

class Segment
  extends Flight =

  intermediate_airports = Seq[String]()

end

class Segment_ (start_airport: String, end_airport: String)
  extends Segment

class SegmentsForFlight =

  abstract
    flight: Flight

  segments: Seq[Segment] =
    rec_segments_multi (flight.start_airport, flight.intermediate_airports, flight.end_airport)

  rec_segments_multi (first_airport: String, intermediate_stops: Seq[String], last_airport: String): Seq[Segment] =
    match intermediate_stops
      case Nil => Nil.+:(Segment_ (first_airport, last_airport))
      case x :: xs => rec_segments_multi(x, xs, last_airport).+:(Segment_ (first_airport, x))
    end

end

class SegmentsForFlight_ (flight: Flight)
  extends SegmentsForFlight

