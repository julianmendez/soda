
class Report3

  abstract
    compliant : Boolean
    price_of_flight : Int
    price_of_flight_by_segments : Int

end

class Segment
  extends
    Flight

  abstract
    start_airport : String
    end_airport : String

  intermediate_airports = Seq [String] ()

end

class SegmentsForFlight

  abstract
    flight : Flight

  rec_segments_multi (first_airport : String) (intermediate_stops : Seq [String] )
      (last_airport : String) : Seq [Segment] =
    match intermediate_stops
      case Nil ==> Nil .+: (Segment .mk (first_airport , last_airport) )
      case head +: tail ==> (rec_segments_multi (head) (tail) (last_airport) ) .+: (
        Segment .mk (first_airport , head) )

  segments : Seq [Segment] =
    rec_segments_multi (flight .start_airport) (flight .intermediate_airports) (
      flight .end_airport)

end

class Requirement3Monitor
  extends
    RequirementMonitor

  abstract
    pricing_agent : PricingAgent

  get_report_with (price : Int) (price_by_segments : Int) : Report3 =
    Report3 .mk (price <= price_by_segments) (price) (price_by_segments)

  sum_prices (prices : Seq [Int] ) : Int =
    prices .sum

  get_prices_of_segments (customer : Customer) (segments : Seq [Segment] ) (date_in_days : Int)
      : Seq [Int] =
    segments .map (lambda segment --> get_price (customer) (segment) (date_in_days) )

  get_price_of_flight_by_segments (customer : Customer) (flight : Flight) (date_in_days : Int)
      : Int =
    sum_prices (
      get_prices_of_segments (customer) (SegmentsForFlight .mk (flight) .segments) (date_in_days) )

  get_report (customer : Customer) (flight : Flight) (date_in_days : Int) : Report3 =
    get_report_with (
      get_price (customer) (flight) (date_in_days) ) (
      get_price_of_flight_by_segments (customer) (flight) (date_in_days)
    )

end

