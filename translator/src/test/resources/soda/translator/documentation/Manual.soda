package soda.translator.documentation

/*
 * This is a Soda tutorial written in Soda.
 * Copyright 2021 Julian Mendez
 * Version: 2021-11-19
 */

/*
 * Source code written in Soda is intended to be descriptive.
 * It is usually written in different files, and each file has `blocks`.
 * These blocks are pieces of code that have some meaning.
 * A block should be short, maybe less than 10 lines.
 * However, it is more important to make things clear than concise.
 * These are examples of blocks:
 * 1. a constant or function definition
 * 2. the beginning of a class definition
 * 3. the end of a class definition
 * 4. a class declaration
 * 5. a block declaration of abstract constants and functions
 * 6. a block of imports
 * 7. a package declaration
 * 8. a comment
 */

/* To declare a class, just add `class` before a class name.
 * It is recommended to use camel case style starting with a capital letter.
 * The name could be a noun or an adjective, but it should not be a verb. */
class Shape

/* There is an abbreviation for class declaration.
 * For this, just start a line with an asterisk (`*`). */
* Movable

/* A class can be parameterized.
 * The parameter type can be constrained using `subtype` and `supertype`.
 * For example, `A subtype B` means that `A` is a subtype of `B`. */
class ShapePainter [A subtype Shape]

/* It is possible to constrain a class parameter with more than one type.
 * Connect them using `with`. */
class ShapeMover [A subtype Shape with Movable]

/* The body of a class is declared between braces (`{` and `}`) after the equals sign (`=`).
 * It is recommended to indent the constants and functions declared inside. */
class EqualsExample =

  /* A constant does not have parameters and it is declared with the equals sign (`=`).
   * It is recommended to use snake case and start in lowercase.
   * The constant name should be a noun.
   * In a function call the parameters can be specified with the colon-equals sign (`:=`).
   * This is especially recommended when the parameters are of the same type.
   * Constants are only evaluated once, which is the first time they are needed. */
  answer: Int = f (x := 20, y := 2)

  /* A function has parameters.
   * If the parameters are empty, it is implied that the function produces some side effect.
   * Functions, even with empty parameters, are evaluated every time they are invoked. */
  f (x: Int, y: Int): Int = 2 * x + y

end

/* A class can extend another one by using `extends`.
 * Abstract classes cannot be instantiated but can be extended.
 * Conversely, concrete classes cannot be extended but can be instantiated.
 * Concrete classes are declared with parentheses `(` and `)`.
 * It is recommended that concrete classes do not have a body, because this cannot be reused.
 * Concrete classes extending only one class could be named as its superclass, but ending with an underscore (`_`). */
class EqualsExample_ ()
  extends EqualsExample

/* A class does not need to define all its constants and functions. */
class RegisteredPerson =

  /* A block starting with `abstract` denotes a constant or function that needs to be defined in extending classes.
   Only one `abstract` block should be defined per class, without leaving lines between the declared attributes. */
  abstract
    first_name: String
    last_name: String

  /* If a constant or function is not meant to be exported, its name should start with an underscore (`_`). */
  _separator = " "

  /* Strings can be concatenated by using the plus sign (`+`). */
  full_name = first_name + _separator + last_name

end

/* A concrete class can be declared with parameters. */
class Person (name: String)

class Agent =

  abstract
    identifier: String

end

/* A concrete class needs as parameters all the constants and functions that have not been defined in its super classes.
 * Please note that an abstract class might have constants and functions that are not defined in its ancestor classes. */
class Agent_ (identifier: String)
  extends Agent

class RankedIndividual =

  abstract
    rank: Int

end

class RankedAgentPerson (identifier: String, rank: Int)
  extends Agent with RankedIndividual

class Element =

  abstract
    accept (v: Visitor): Boolean

end

class Visitor =

  abstract
    visit (x: Element): Boolean

end

class Item (identifier: Int)
  extends Element =

  /* It is possible to refer to an object instance by using `this`. */
  accept (v: Visitor) = v.visit (this)

end

class PersonName =

  abstract
    name: String

  /* It is possible to override a function by using the `@override` annotation.
   * This is intended only for exceptional cases, like the `toString` function, or a diamond-shaped class hierarchy. */
  @override
  toString = name

end

/**
  * This contains the examples shown in the manual.
  */
class Manual =

  import
    java.util.Date

  a = 1

  b: Int = 2

  /* An instance of a JVM class can be created with the `@new` annotation.
   * If the code is translated to Scala 3, this annotation is not required. */
  now = @new Date ()

  plus_one (x: Int): Int = x + 1

  /* A piecewise function can be defined using an `if`-`then`-`else` structure.
   * The condition in the `if` is evaluated, and then only the corresponding branch is evaluated. */
  max (x: Int, y: Int): Int =
    if x > y
    then x
    else y

  /* Scala sequences (`Seq`) can be used, as well as other basic Scala classes.
   * Lambda functions are declared using a right arrow (`->`). */
  plus_one (sequence: Seq [Int]): Seq [Int] =
    sequence.map (element -> element + 1)

  /* Boolean values `false` and `true` are available. */
  my_not (x: Boolean): Boolean =
    if x
    then false
    else true

  my_and (x: Boolean, y: Boolean): Boolean =
    if x
    then y
    else false

  my_or (x: Boolean, y: Boolean): Boolean =
    if x
    then true
    else y

  /* Boolean values have the standard `not`-`and`-`or` functions. */
  my_xor (x: Boolean, y: Boolean): Boolean =
    (x or y) and not (x and y)

  /* It is possible to use pattern matching with `match` and `case`.
   * Please observe the double arrow `=>`. */
  if_then_else [A] (condition: Boolean, if_true: A, if_false: A): A =
    match condition
      case true => if_true
      case false => if_false
    end

  /* A vertical bar `|` can be used as an abbreviation for `case`. */
  another_if_then_else [A] (condition: Boolean, if_true: A, if_false: A): A =
    match condition
      | true => if_true
      | false => if_false
    end

  /* To evaluate a constant or a function, it is possible to declare intermediate functions.
   * This is done in a `let`-`in` block.
   * The block starts with a `let` containing the intermediate functions in no particular order.
   * This block is evaluated in an expression after the `in`. */
  sum (n: Int) =
    _tailrec_ (n, 0)

  /* A tail recursive function cannot be declared inside another function, and its name could start with underscore '_'.
   * Annotation `@tailrec` helps ensuring that the tail recursion is detected and optimized. */
  @tailrec
  _tailrec_ (n: Int, accum: Int): Int =
    if n < 0
    then accum
    else _tailrec_ (n - 1, n + accum)

  f0 (x: Int): Int =
    let
      a = g (x)
      b = g (a)
    in a + b

  /* Since the order in a `let`-`in` block is not important, a constant `result` at the beginning could easily indicate
   * what is the main result to be evaluated. */
  f1 (x: Int): Int =
    let
      result = a + b
      a = g (x)
      b = g (a)
    in result

  g (x: Int): Int = x + 1

end

* AbstractFactorialConcise =

  abstract
    factorial (n: Int): Int

end

* FactorialConcise
  extends AbstractFactorialConcise =

  @tailrec
  _tailrec_ (n: Int, product: Int): Int =
    /* The function to compare equality is a long equals (`==`). */
    if n == 0
    then product
    else _tailrec_ (n - 1, n * product)

  factorial (n: Int): Int =
    _tailrec_ (n, 1)

end

/* The word `is` is a synonym for the equals sign (`=`) and they are interchangeable. */
class AbstractFactorialVerbose is {

  abstract
    factorial (n: Int): Int

end

class FactorialVerbose
  extends AbstractFactorialVerbose is {

  @tailrec
  _tailrec_ (n: Int, product: Int): Int is
    if n == 0
    then product
    else _tailrec_ (n - 1, n * product)

  factorial (n: Int): Int is
    _tailrec_ (n, 1)

end

class Recursion =

  @tailrec
  _tailrec_fold4 [A, B, C subtype B] (sequence: Seq [A], current_value: C, next_value_function: (B, A) -> C, condition: (B, A) -> Boolean): C =
    if sequence.isEmpty
    then current_value
    else
      if not condition (current_value, sequence.head)
      then current_value
      else _tailrec_fold4 (sequence.tail, next_value_function (current_value, sequence.head), next_value_function, condition)

  fold [A, B, C subtype B] (sequence: Seq [A], initial_value: C, next_value_function: (B, A) -> C, condition: (B, A) -> Boolean): C =
    _tailrec_fold4 (sequence, initial_value, next_value_function, condition)

  @tailrec
  _tailrec_range (n: Int, sequence: Seq [Int]): Seq [Int] =
    if n <= 0
    then sequence
    else _tailrec_range (n - 1, sequence.+: (n - 1))

  range (length: Int): Seq [Int] =
    _tailrec_range (length, Seq [Int] ())

end

class Recursion_ ()
  extends Recursion

/* The main class is concrete and it is called `Main ()`. */
class Main ()
  extends MainClass

/* The main class requires a `main` function that receives an `Array [String]` and returns a `Unit`. */
class MainClass =

  main (arguments: Array [String]): Unit =
    /* An output to the standard output can be sent with a `println` command.
     * This is a shorter form of JVM's `System.out.println`. */
    println ("Hello world!")

end

/* The main class needs to be indicated with the `@main` annotation.
 * Only one main class per package is allowed. */
@main

