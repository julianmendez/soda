package scopus.translator.documentation

import java.util.Date


class EqualsExample () {
  f (x: Int,
    y: Int) = 2 * x + y

  answer = f (x=20, y=2)
}

/** Class for a registered person, in snake case */
class Registered_person (first_name: String, last_name: String) {
  _separator = " "

  full_name = first_name + _separator + last_name
}

/** Class for a registered person, in camel case */
class RegisteredPerson (firstName: String, lastName: String) {
  _separator = " "

  fullName = firstName + _separator + lastName
}

class Agent {
  has identifier: String
}

class Person (name: String)

class AgentPerson (name: String) extends Agent {
  identifier = name
}

class RankedIndividual {
  has rank: Int
}

class RankedAgentPerson (name: String, person_rank: Int) extends Agent with RankedIndividual {
  identifier = name

  rank = person_rank
}

class Element {
  has accept (v: Visitor): Boolean
}

class Visitor {
  has visit (x: Element): Boolean
}

class Item (identifier: Int) extends Element {
  accept (v: Visitor) = v.visit (this)
}

class PersonName (name: String) {
  @override
  toString = name
}

/**
  * This contains the examples shown in the manual.
  */
class Manual() {

  a = 1

  b: Int = 2

  plus_one (x: Int): Int = x + 1

  max (x: Int, y: Int) =
    if x > y
    then x
    else y

  plus_one (sequence: Seq[Int]) =
    sequence.map(element -> element + 1)

  my_not (x: Boolean) =
    if x
    then false
    else true

  my_and (x: Boolean, y: Boolean) =
    if x
    then
      if y
      then true
      else false
    else false

  my_or (x: Boolean, y: Boolean) =
    if x
    then true
    else
      if y
      then true
      else false

  my_xor (x: Boolean, y: Boolean) = (x or y) and not (x and y)

  now = new Date()

  sum (n: Int) = {
    result = rec (n, 0)

    @tailrec
    rec (n: Int, accum: Int): Int =
      if n < 0
      then accum
      else rec (n - 1, n + accum)

    result
  }

  g (x: Int) = x + 1

  f (x: Int) = {
    a = g(x)
    b = g(a)
    a + b
  }

}

* AbstractFactorialConcise {
  has factorial (n: Int): Int
}

* FactorialConcise () extends AbstractFactorialConcise {

  factorial (n: Int) = {
    result = rec (n, 1)

    @tailrec
    rec (n: Int, product: Int): Int =
      if n == 0
      then product
      else rec (n - 1, n * product)

    result
  }
}

class AbstractFactorialVerbose {
  has factorial (n in Int) in Int
}

class FactorialVerbose () extends AbstractFactorialVerbose {

  factorial (n in Int) is {
    result is rec (n, 1)

    @tailrec
    rec (n in Int, product in Int) in Int is
      if n == 0
      then product
      else rec (n - 1, n * product)

    result
  }
}

class Main () {
  main (args: Array[String]) =
    println ("Hello world!")
}

@main

