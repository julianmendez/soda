package se.umu.cs.rai.scopus.translator.example.equity

/**
  * This class models a box.
  */
* Box {
  has height: Double
}

/**
  * This class models a participant.
  */
* Participant {
  has height: Double
}


* Box_assignment (participant: Participant, box: Box)

/**
  * This models the problem of assigning boxes in a fair way.
  * It is assumed that the boxes suffice for every one.
  */
* FairBox (
  distribute: (Seq[Box], Seq[Participant]) -> Seq[Box_assignment],
  fence_height: Double,
) {

  /** Tells if the distribution is fair or not. */
  is_fair (resources: Seq[Box], participants: Seq[Participant]) = {
    assignments = distribute (resources, participants)
    satisfied_participants = count_satisfied (participants, assignments)
    number_of_participants = participants.length
    if satisfied_participants == number_of_participants
    then true
    else false
  }


  assignments_for_participant (assignments: Seq[Box_assignment], participant: Participant) =
    assignments
      .filter (assignment -> participant == assignment.participant)


  height_enhancement (assignments: Seq[Box_assignment], participant: Participant) =
    assignments_for_participant (assignments, participant)
      .map (assignment -> assignment.box.height)
      .sum


  count_satisfied (participants: Seq[Participant], assignments: Seq[Box_assignment]) =
    participants
      .filter (participant -> participant.height + height_enhancement (assignments, participant) > fence_height)
      .length

}

