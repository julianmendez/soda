package scopus.se.umu.cs.rai.scopus.translator

+ org.scalatest.funsuite.AnyFunSuite

+ scala.language.implicitConversions


* ExampleWithWrongOrder() {

  this_is_null = constant_defined_later

  constant_defined_later = "Success!"

}

* ExampleWithRightOrder() {

  constant_defined_before = "Success!"

  this_is_not_null = constant_defined_before

}

* ExampleWithOneWorkAround() {

  this_is_not_null () = constant_defined_later

  constant_defined_later = "Success!"

}

* ExampleWithAnotherWorkAround() {

  this_is_not_null = constant_function_defined_later ()

  constant_function_defined_later () = "Success!"

}


/**
 * In Scopus constants cannot be defined as 'lazy val'.
 * These tests detect and test this problem, and test work-arounds.
 */
* LazySyntaxSpec() extends AnyFunSuite {

  test("should show what happens when constants are defined in the wrong order") {
    obtained = ExampleWithWrongOrder().this_is_null
    assert(Option(obtained).isEmpty)
  }

  test("should show what happens when constants are defined in the right order") {
    obtained = ExampleWithRightOrder().this_is_not_null
    expected = "Success!"
    assert(obtained == expected)
  }

  test("should show what happens when one work-around is used") {
    obtained = ExampleWithOneWorkAround().this_is_not_null ()
    expected = "Success!"
    assert(obtained == expected)
  }

  test("should show what happens when another work-around is used") {
    obtained = ExampleWithAnotherWorkAround().this_is_not_null
    expected = "Success!"
    assert(obtained == expected)
  }

}

