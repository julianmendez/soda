package soda.lib

+ org.scalatest.funsuite.AnyFunSuite

* OptionSDSpec() extends AnyFunSuite {

  test("should test an empty option") {
    empty = NoneSD()
    assert(empty.isEmpty)
  }

  test("should test a non empty option") {
    element = SomeSD(1)
    assert(not element.isEmpty)
  }

  test("should open an empty option") {
    result_if_empty: String = "It is empty."
    result_if_non_empty(value: String): String = "Its value is " + value + "."

    empty = NoneSD[String]()

    expected = "It is empty."
    obtained = empty.open(
      ifEmpty := result_if_empty,
      ifNonEmpty := result_if_non_empty)

    assert(obtained == expected)
  }

  test("should open an non empty option") {
    result_if_empty: String = "It is empty."
    result_if_non_empty(value: String): String = "Its value is " + value + "."

    some_element = SomeSD[String]("0")

    expected = "Its value is 0."
    obtained = some_element.open(
      ifEmpty := result_if_empty,
      ifNonEmpty := result_if_non_empty)

    assert(obtained == expected)
  }

  test("should map empty to empty") {
    to_string(n: Int): String = "" + n

    empty = NoneSD[Int]()

    expected = NoneSD[String]()
    obtained = empty.map(to_string)

    assert(obtained == expected)
  }

  test("should map a non-empty to another non-empty") {
    to_string(n: Int): String = "" + n

    some_element = SomeSD[Int](2)

    expected = SomeSD[String]("2")
    obtained = some_element.map(to_string)

    assert(obtained == expected)
  }

}

