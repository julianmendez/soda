package soda.lib

class RecursionSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  exampleSeq : Seq [Int] = Seq (0, 1, 1, 2, 3, 5, 8)

  test ("fold left while with Seq")
    let
      initial_value = Seq [String] ()
      next_value_function : Seq [String] -> Int -> Seq [String] =
        lambda (s : Seq [String]) -> lambda (e : Int) -> (s.+: ("" + (e + 100) ) )
      condition : Seq [String] -> Int -> Boolean =
        lambda (s : Seq [String] ) -> lambda (e : Int) -> (e < 5)
      expected = Seq ("103", "102", "101", "101", "100")
      obtained = Recursion_ ().fold_while (exampleSeq) (initial_value) (next_value_function) (condition)
    in assert (obtained == expected)

  test ("fold left with Seq")
    let
      initial_value = Seq [String] ()
      next_value_function : Seq [String] -> Int -> Seq [String] =
        lambda (s : Seq [String] ) -> lambda (e : Int) -> (s.+: ("" + (e + 100) ) )
      expected = Seq ("108", "105", "103", "102", "101", "101", "100")
      obtained = Recursion_ ().fold (exampleSeq) (initial_value) (next_value_function)
    in assert (obtained == expected)

  test ("range with positive number")
    let
      expected = Seq (0, 1, 2, 3, 4, 5, 6, 7)
      obtained = Recursion_ ().range (8)
    in assert (obtained == expected)

  test ("range with zero size")
    let
      expected = Seq ()
      obtained = Recursion_ ().range (-1)
    in assert (obtained == expected)

  test ("range with negative number")
    let
      expected = Seq ()
      obtained = Recursion_ ().range (-1)
    in assert (obtained == expected)

end

