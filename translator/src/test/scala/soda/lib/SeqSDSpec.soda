
class SeqSDSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  int_seq : Seq [Int] = Seq (2 , 7 , 1 , 8 , 2 , 8 , 1 , 8 , 2 , 8 , 4 , 5 , 9)

  rev_int_seq : Seq [Int] = Seq (9 , 5 , 4 , 8 , 2 , 8 , 1 , 8 , 2 , 8 , 1 , 7 , 2)

  test ("should detect an empty sequence") (
    check (
      obtained := SeqSDBuilder .mk .build (Seq [Int] () ) .opt (ifEmpty := true) (
        ifNonEmpty := lambda nonEmpty --> false)
    ) (
      expected := true
    )
  )

  test ("should detect an non empty sequence") (
    check (
      obtained := SeqSDBuilder .mk .build (Seq [Int] (1) ) .opt (ifEmpty := false) (
        ifNonEmpty := lambda nonEmpty --> true)
    ) (
      expected := true
    )
  )

  empty_opt : OptionSD [Int] = NoneSD .mk

  non_empty_opt : NonEmptySeqSD [Int] -> SomeSD [Int] =
    lambda sequence --> SomeSD .mk (max (sequence) )

  test ("should get the maximum") (
    check (
      obtained := SeqSDBuilder .mk .build (int_seq) .opt (ifEmpty := empty_opt) (
        ifNonEmpty := non_empty_opt)
    ) (
      expected := SomeSD_ [Int] (9)
    )
  )

  _fold = Fold .mk

  max_of_2 (a : Int) (b : Int) : Int =
    if a > b then a else b

  max (s : NonEmptySeqSD [Int] ) : Int =
    _fold .apply [Int] [Int] (s .tail .toSeq) (s .head) (max_of_2)

  test ("should reverse a sequence") (
    check (
      obtained := SeqSDBuilder .mk .build (int_seq) .reverse
    ) (
      expected := SeqSDBuilder .mk .build (rev_int_seq)
    )
  )

  empty_seq : SeqSD [Int] = EmptySeqSD .mk

  non_empty_seq : NonEmptySeqSD [Int] -> NonEmptySeqSD [Int] =
    lambda sequence --> sequence .reverse

  test ("should reverse another sequence") (
    check (
      obtained := SeqSDBuilder .mk .build (int_seq) .opt (ifEmpty := empty_seq) (
        ifNonEmpty := non_empty_seq)
    ) (
      expected := SeqSDBuilder .mk .build (rev_int_seq)
    )
  )

end

