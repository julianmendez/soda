package soda.lib


* SeqSDSpec()
  extends org.scalatest.funsuite.AnyFunSuite = {

  test("should detect an empty sequence") {
    input = Seq()
    seqsd = SeqSDBuilder_().build(input)
    obtained = seqsd.opt(
      ifEmpty := true,
      ifNonEmpty := nonEmpty -> false
    )

    assert(obtained)
  }

  test("should detect an non empty sequence") {
    input = Seq(1)
    seqsd = SeqSDBuilder_().build(input)
    obtained = seqsd.opt(
      ifEmpty := false,
      ifNonEmpty := nonEmpty -> true
    )

    assert(obtained)
  }

  test("should get the maximum") {
    max_of_2(a: Int, b: Int): Int = if a > b then a else b
    max(s: NonEmptySeqSD[Int]): Int =
      Recursion_().fold(s.tail.toSeq, s.head, max_of_2)
    input = Seq(2, 7, 1, 8, 2, 8, 1, 8, 2, 8, 4, 5, 9)
    expected = SomeSD_[Int](9)
    obtained =
      SeqSDBuilder_().build(input).opt(
        ifEmpty := NoneSD_(),
        ifNonEmpty := sequence -> SomeSD_(max(sequence))
      )

    assert(obtained == expected)
  }

  test("should reverse a sequence") {
    input = SeqSDBuilder_().build( Seq(2, 7, 1, 8, 2, 8, 1, 8, 2, 8, 4, 5, 9) )
    expected = SeqSDBuilder_().build( Seq(9, 5 ,4, 8, 2, 8, 1, 8, 2, 8, 1, 7, 2) )
    obtained = input.reverse

    assert(obtained == expected)
  }

  test("should reverse another sequence") {
    input = SeqSDBuilder_().build( Seq(2, 7, 1, 8, 2, 8, 1, 8, 2, 8, 4, 5, 9) )
    expected = SeqSDBuilder_().build( Seq(9, 5 ,4, 8, 2, 8, 1, 8, 2, 8, 1, 7, 2) )
    obtained = input.opt(
      ifEmpty := EmptySeqSD_(),
      ifNonEmpty := sequence -> sequence.reverse
    )

    assert(obtained == expected)
  }
}

