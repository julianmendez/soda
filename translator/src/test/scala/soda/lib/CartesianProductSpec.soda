package soda.lib


* CartesianProductSpec()
  extends org.scalatest.funsuite.AnyFunSuite = {

  test("Cartesian product of two sequences")
    let
      expected = Seq(
        Seq(10, 100), Seq(10, 200), Seq(10, 300),
        Seq(20, 100), Seq(20, 200), Seq(20, 300)
      )
      seq_a = Seq(10, 20)
      seq_b = Seq(100, 200, 300)
      obtained = CartesianProduct_().get_cartesian_product(Seq(seq_a, seq_b))
    in assert(obtained == expected)

  test("Cartesian product of an empty sequence")
    let
      expected = Seq()
      obtained = CartesianProduct_().get_cartesian_product(Seq())
    in assert(obtained == expected)

  test("Cartesian product of only empty sequences")
    let
      expected = Seq()
      obtained = CartesianProduct_().get_cartesian_product(Seq(Seq(), Seq(), Seq()))
    in assert(obtained == expected)

  test("Cartesian product with at least one empty sequence")
    let
      expected = Seq()
      obtained = CartesianProduct_().get_cartesian_product(Seq(Seq("A"), Seq()))
    in assert(obtained == expected)

  test("Cartesian product of three sequences")
    let
      expected = Seq(
        Seq("A", "0", "a"), Seq("A", "0", "b"), Seq("A", "0", "c"), Seq("A", "0", "d"),
        Seq("A", "1", "a"), Seq("A", "1", "b"), Seq("A", "1", "c"), Seq("A", "1", "d"),
        Seq("A", "2", "a"), Seq("A", "2", "b"), Seq("A", "2", "c"), Seq("A", "2", "d"),
        Seq("B", "0", "a"), Seq("B", "0", "b"), Seq("B", "0", "c"), Seq("B", "0", "d"),
        Seq("B", "1", "a"), Seq("B", "1", "b"), Seq("B", "1", "c"), Seq("B", "1", "d"),
        Seq("B", "2", "a"), Seq("B", "2", "b"), Seq("B", "2", "c"), Seq("B", "2", "d")
      )
      seq_a = Seq("A", "B")
      seq_b = Seq("0", "1", "2")
      seq_c = Seq("a", "b", "c", "d")
      obtained = CartesianProduct_().get_cartesian_product(Seq(seq_a, seq_b, seq_c))
    in assert(obtained == expected)

}

