
class BlockAnnotationSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.Block
    soda.translator.block.DefaultBlockTranslator
    soda.translator.block.DefaultBlockSequenceTranslator
    soda.translator.parser.BlockProcessor

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  example_blocks =
    ExampleProgram .mk .example_blocks

  detectors (block : Block) : Seq [BlockAnnotationParser] =
    Seq (
      FunctionDefinitionAnnotation .mk (block) ,
      ClassBeginningAnnotation .mk (block) ,
      ClassEndAnnotation .mk (block) (Seq [BlockAnnotationParser] () ) ,
      AbstractDeclarationAnnotation .mk (block) (Seq [BlockAnnotationParser] () ) ,
      InductiveDeclarationAnnotation .mk (block) ,
      ImportDeclarationAnnotation .mk (block) ,
      PackageDeclarationAnnotation .mk (block) ,
      ClassAliasAnnotation .mk (block) ,
      TheoremBlockAnnotation .mk (block) ,
      DirectiveBlockAnnotation .mk (block) ,
      CommentAnnotation .mk (block) ,
      TestDeclarationAnnotation .mk (block)
    )

  apply_detectors (block : Block) : Seq [Boolean] =
    detectors (block) .map (lambda detector --> detector .applies)

  test ("should detect a package declaration") (
    check (
      obtained := apply_detectors (example_blocks (0) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , true , false , false , false , false ,
        false)
    )
  )

  test ("should detect a comment") (
    check (
      obtained := apply_detectors (example_blocks (1) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , false , false , false , false , true ,
        false)
    )
  )

  test ("should detect an inductive block declaration") (
    check (
      obtained := apply_detectors (example_blocks (2) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , true , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect a class beginning") (
    check (
      obtained := apply_detectors (example_blocks (3) )
    ) (
      expected := Seq [Boolean] (
        false , true , false , false , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect an abstract block declaration") (
    check (
      obtained := apply_detectors (example_blocks (4) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , true , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect an import declaration") (
    check (
      obtained := apply_detectors (example_blocks (5) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , true , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect a constant declaration") (
    check (
      obtained := apply_detectors (example_blocks (6) )
    ) (
      expected := Seq [Boolean] (
        true , false , false , false , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect a function declaration") (
    check (
      obtained := apply_detectors (example_blocks (7) )
    ) (
      expected := Seq [Boolean] (
        true , false , false , false , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect another function declaration") (
    check (
      obtained := apply_detectors (example_blocks (8) )
    ) (
      expected := Seq [Boolean] (
        true , false , false , false , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect a test declaration") (
    check (
      obtained := apply_detectors (example_blocks (9) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , false , false , false , false , false ,
        true)
    )
  )

  test ("should detect a theorem block") (
    check (
      obtained := apply_detectors (example_blocks (10) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , false , false , true , false , false ,
        false)
    )
  )

  test ("should detect a directive block") (
    check (
      obtained := apply_detectors (example_blocks (11) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , false , false , false , true , false ,
        false)
    )
  )

  test ("should detect a class end") (
    check (
      obtained := apply_detectors (example_blocks (12) )
    ) (
      expected := Seq [Boolean] (
        false , false , true , false , false , false , false , false , false , false , false ,
        false)
    )
  )

  test ("should detect a class alias") (
    check (
      obtained := apply_detectors (example_blocks (13) )
    ) (
      expected := Seq [Boolean] (
        false , false , false , false , false , false , false , true , false , false , false ,
        false)
    )
  )

  test ("should find only 14 blocks") (
    check (
      obtained := example_blocks .length
    ) (
      expected := 14
    )
  )

  test ("should be ordered by the identifier ordinal") (
    check (
      obtained := detectors (example_blocks (0) ) .map (lambda detector -->
        detector .identifier .ordinal)
    ) (
      expected := Seq [Int] (1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11, 12)
    )
  )

end

