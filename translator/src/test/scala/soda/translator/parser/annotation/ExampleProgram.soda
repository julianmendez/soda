
class ExampleProgram

  import
    soda.translator.block.Block
    soda.translator.block.DefaultBlockTranslator_
    soda.translator.block.DefaultBlockSequenceTranslator_
    soda.translator.parser.BlockProcessor
    soda.translator.parser.BlockProcessor_

  example_program =
    ("package soda.example.mytest" +
    "\n" +
    "\n/**" +
    "\n * Example class for testing." +
    "\n */" +
    "\n" +
    "\nclass Example" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n" +
    "\n  abstract" +
    "\n    value : Int" +
    "\n" +
    "\n  import" +
    "\n    soda.lib.Fold_" +
    "\n    soda.lib.Enum" +
    "\n" +
    "\n  my_constant : Int = 0" +
    "\n" +
    "\n  my_function (x : Int) (y : Int) : Int =" +
    "\n    x + y" +
    "\n" +
    "\n  another_function" +
    "\n    (x : Int)" +
    "\n    (y : Int)" +
    "\n      : Int =" +
    "\n    x + y" +
    "\n" +
    "\n  test (\"should test the example\")" +
    "\n    check (" +
    "\n      obtained := ClassBeginningAnnotation_ (example_4).type_parameters" +
    "\n    ) (" +
    "\n      expected := Seq (\"A\", \"B\")" +
    "\n    )" +
    "\n" +
    "\n  theorem" +
    "\n    True = True" +
    "\n  ." +
    "\n  Proof." +
    "\n    auto." +
    "\n  Qed" +
    "\n" +
    "\n  directive" +
    "\n    theorem" +
    "\n      value = value" +
    "\n      := by auto" +
    "\n" +
    "\nend" +
    "\n" +
    "\nclass AnotherExample = Example" +
    "\n" +
    "\n")

  default_block_processor : BlockProcessor =
    BlockProcessor_ (
      DefaultBlockSequenceTranslator_ (
        DefaultBlockTranslator_ ()
      )
    )

  example_blocks : Seq [Block] =
    default_block_processor .make_blocks (
      default_block_processor .split_blocks (example_program)
    )

end

