package soda.translator.parser.annotation

class ExampleProgram

  import
    soda.translator.block.Block
    soda.translator.block.DefaultBlockTranslator_
    soda.translator.block.DefaultBlockSequenceTranslator_
    soda.translator.parser.BlockProcessor
    soda.translator.parser.BlockProcessor_

  example_program =
    ("package soda.example.mytest" +
    "\n" +
    "\n/**" +
    "\n * Example class for testing." +
    "\n */" +
    "\n" +
    "\nclass Example" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n" +
    "\n  abstract" +
    "\n    value: Int" +
    "\n" +
    "\n  import" +
    "\n    soda.lib.Recursion_" +
    "\n    soda.lib.Enum" +
    "\n" +
    "\n  my_constant: Int = 0" +
    "\n" +
    "\n  my_function (x: Int, y: Int): Int =" +
    "\n    x + y" +
    "\n" +
    "\n  test (\"should test the example\")" +
    "\n    let" +
    "\n      result = true" +
    "\n    in assert (result)" +
    "\n" +
    "\n  theorem" +
    "\n    True" +
    "\n" +
    "\n  proof" +
    "\n    auto." +
    "\n" +
    "\nend" +
    "\n" +
    "\nclass AnotherExample = Example" +
    "\n" +
    "\n")

  default_block_processor: BlockProcessor =
    BlockProcessor_(
      DefaultBlockSequenceTranslator_ (
        DefaultBlockTranslator_ ()
      )
    )

  example_blocks: Seq [Block] =
    default_block_processor.split_blocks (example_program)

end

class ExampleProgram_ ()
  extends
    ExampleProgram

end

