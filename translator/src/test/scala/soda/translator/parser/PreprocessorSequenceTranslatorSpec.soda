
class PreprocessorSequenceTranslatorSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.DefaultBlockSequenceTranslator_
    soda.translator.block.DefaultBlockTranslator_

  check [A] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  example_program =
    ("package soda.example.mytest" +
    "\n" +
    "\n/**" +
    "\n * Example class for testing." +
    "\n * '\u03BB' in a comment is not replaced." +
    "\n */" +
    "\n" +
    "\n\u23BE Example" +
    "\n" +
    "\n  import" +
    "\n    soda.lib.Fold_" +
    "\n    soda.lib.Enum" +
    "\n" +
    "\n  abstract" +
    "\n    number : Int" +
    "\n    name : String" +
    "\n" +
    "\n  my_constant : Int = 0" +
    "\n" +
    "\n  my_function (x : Int) (y : Int) : Int =" +
    "\n    x + y" +
    "\n" +
    "\n  another_function (f : Int \u2192 Int) (x : Int) : Int =" +
    "\n    f (x)" +
    "\n" +
    "\n  process (sequence : Seq [Int]) : Seq [Int] =" +
    "\n    sequence" +
    "\n      .map ( \u03BB elem \u27F6 my_function (x \u2254 elem) (y \u2254 my_constant) )" +
    "\n" +
    "\n  my_xor (x : Boolean) (y : Boolean) : Boolean =" +
    "\n    (x \u2228 y) \u2227 \u00AC (x \u2227 y)"  +
    "\n" +
    "\n  if_true_else (b : Boolean) (x : Int) (y : Int) : Int =" +
    "\n    match b" +
    "\n      case \u22A4 \u27F9 x"  +
    "\n      case \u22A5 \u27F9 y"  +
    "\n" +
    "\n\u23BF" +
    "\n" +
    "\n")

  expected_output =
    ("package soda.example.mytest" +
    "\n" +
    "\n/**" +
    "\n * Example class for testing." +
    "\n * '\u03BB' in a comment is not replaced." +
    "\n */" +
    "\n" +
    "\nclass Example" +
    "\n" +
    "\n  import" +
    "\n    soda.lib.Fold_" +
    "\n    soda.lib.Enum" +
    "\n" +
    "\n  abstract" +
    "\n    number : Int" +
    "\n    name : String" +
    "\n" +
    "\n  my_constant : Int = 0" +
    "\n" +
    "\n  my_function (x : Int) (y : Int) : Int =" +
    "\n    x + y" +
    "\n" +
    "\n  another_function (f : Int -> Int) (x : Int) : Int =" +
    "\n    f (x)" +
    "\n" +
    "\n  process (sequence : Seq [Int]) : Seq [Int] =" +
    "\n    sequence" +
    "\n      .map ( lambda elem --> my_function (x := elem) (y := my_constant) )" +
    "\n" +
    "\n  my_xor (x : Boolean) (y : Boolean) : Boolean =" +
    "\n    (x or y) and not (x and y)"  +
    "\n" +
    "\n  if_true_else (b : Boolean) (x : Int) (y : Int) : Int =" +
    "\n    match b" +
    "\n      case true ==> x"  +
    "\n      case false ==> y"  +
    "\n" +
    "\nend" +
    "\n")

  block_processor =
    BlockProcessor_ (
      DefaultBlockSequenceTranslator_ (
        DefaultBlockTranslator_ ()
      )
    )

  test ("should test the preprocessor") (
    check (
      obtained := block_processor.translate (example_program)
    ) (
      expected := expected_output
    )
  )

end

