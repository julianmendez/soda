
class BlockTranslator00
  extends
    BlockTranslator

  abstract

  import
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.AnnotationFactory

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      AnnotationFactory .mk .annotate (
        BlockBuilder .mk .build (
          if block .lines .isEmpty
          then Seq ("")
          else block .lines .++ (Seq ("tr00") )
        )
      )

end

class BlockTranslator01
  extends
    BlockTranslator

  abstract

  import
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.AnnotationFactory

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      AnnotationFactory .mk .annotate (
        BlockBuilder .mk .build (
          if block .lines .isEmpty
          then Seq ("")
          else block .lines .++ (Seq ("tr01") )
        )
      )

end

class BlockTranslator02
  extends
    BlockTranslator

  abstract

  import
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.AnnotationFactory

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      AnnotationFactory .mk .annotate (
        BlockBuilder .mk .build (
          if block .lines .isEmpty
          then Seq ("")
          else block .lines .++ (Seq ("tr02") )
        )
      )

end

class BlockTranslatorPipelineSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.AnnotationFactory

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  instance =
    BlockTranslatorPipeline .mk (
      Seq (
        BlockTranslator00 .mk ,
        BlockTranslator01 .mk ,
        BlockTranslator02 .mk
      )
    )

  original =
    AnnotationFactory .mk .annotate (
      BlockBuilder .mk .build (
        Seq ("first line" )
      )
    )

  test ("block translator pipeline") (
    check (
      obtained := instance .translate (original)
    ) (
      expected :=
        AnnotationFactory .mk .annotate (
          BlockBuilder .mk .build (
            Seq (
              "first line" ,
              "tr00" ,
              "tr01" ,
              "tr02"
            )
          )
        )
    )
  )

end

