package soda.translator.block

class BlockTranslator00
  extends
    BlockTranslator

  import
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.AnnotationFactory_

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      AnnotationFactory_ ().annotate (
        BlockBuilder_ ().build (
          if block.lines.isEmpty
          then Seq ("")
          else block.lines.++ ( Seq ("tr00") )
        )
      )

end

class BlockTranslator01
  extends
    BlockTranslator

  import
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.AnnotationFactory_

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      AnnotationFactory_ ().annotate (
        BlockBuilder_ ().build (
          if block.lines.isEmpty
          then Seq ("")
          else block.lines.++ ( Seq ("tr01") )
        )
      )

end

class BlockTranslator02
  extends
    BlockTranslator

  import
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.AnnotationFactory_

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      AnnotationFactory_ ().annotate (
        BlockBuilder_ ().build (
          if block.lines.isEmpty
          then Seq ("")
          else block.lines.++ ( Seq ("tr02") )
        )
      )

end

class BlockTranslatorPipelineSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.AnnotationFactory_

  instance =
    BlockTranslatorPipeline_ (
      Seq (
        BlockTranslator00_ (),
        BlockTranslator01_ (),
        BlockTranslator02_ ()
      )
    )

  test ("block translator pipeline")
    let
      original =
        AnnotationFactory_ ().annotate (
          BlockBuilder_ ().build (
            Seq ( "first line" )
          )
        )
      expected =
        AnnotationFactory_ ().annotate (
          BlockBuilder_ ().build (
            Seq (
              "first line",
              "tr00",
              "tr01",
              "tr02"
            )
          )
        )
      obtained = instance.translate (original)
    in assert (obtained == expected)

end

