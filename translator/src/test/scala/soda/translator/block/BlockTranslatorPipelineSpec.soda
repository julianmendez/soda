package soda.translator.block

class BlockTranslator00
  extends
    BlockTranslator

  import
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      BlockBuilder_ ().build (
        if block.lines.isEmpty
        then Seq ("")
        else block.lines.++ ( Seq ("tr00") ),
        BlockAnnotationEnum_ ().undefined
      )

end

class BlockTranslator00_ ()
  extends
    BlockTranslator00

end

class BlockTranslator01
  extends
    BlockTranslator

  import
    soda.translator.parser.BlockBuilder_

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      BlockBuilder_ ().build (
        if block.lines.isEmpty
        then Seq ("")
        else block.lines.++ ( Seq ("tr01") ),
        BlockAnnotationEnum_ ().undefined
      )

end

class BlockTranslator01_ ()
  extends
    BlockTranslator01

end

class BlockTranslator02
  extends
    BlockTranslator

  import
    soda.translator.parser.BlockBuilder_

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      BlockBuilder_ ().build (
        if block.lines.isEmpty
        then Seq ("")
        else block.lines.++ ( Seq ("tr02") ),
        BlockAnnotationEnum_ ().undefined
      )

end

class BlockTranslator02_ ()
  extends
    BlockTranslator02

end

class BlockTranslatorPipelineSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.parser.BlockBuilder_

  instance =
    BlockTranslatorPipeline_ (
      Seq (
        BlockTranslator00_ (),
        BlockTranslator01_ (),
        BlockTranslator02_ ()
      )
    )

  test ("block translator pipeline")
    let
      original = BlockBuilder_ ().build (
        Seq ( "first line" ),
        BlockAnnotationEnum_ ().undefined
      )
      expected =
        BlockBuilder_ ().build (
          Seq (
            "first line",
            "tr00",
            "tr01",
            "tr02"
          ),
          BlockAnnotationEnum_ ().undefined
        )
      obtained = instance.translate (original)
    in assert (obtained == expected)

end

