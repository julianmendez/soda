
class MultiLineSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.DefaultBlockSequenceTranslator
    soda.translator.parser.annotation.AnnotationFactory
    soda.translator.parser.BlockBuilder
    soda.translator.parser.BlockProcessor

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  bp : BlockProcessor =
    BlockProcessor .mk (
      DefaultBlockSequenceTranslator .mk (
        MicroTranslatorToScala .mk
      )
    )

  mt : MicroTranslatorToScala = MicroTranslatorToScala .mk

  original_input =
    "  value = 1\n" +
    "  sequence = Seq(1 ,\n" +
    "    2,  \n" +
    "    3)\n" +
    "  f( x: Int,\t\n" +
    "     y: Int,\n" +
    "     z: Int) =\n" +
    "       x * x + y * y + z * z\n"

  original_input_lines = Seq (
    "  value = 1" ,
    "  sequence = Seq(1 ," ,
    "    2,  " ,
    "    3)" ,
    "  f( x: Int,\t" ,
    "     y: Int," ,
    "     z: Int) =" ,
    "       x * x + y * y + z * z")

  joined_comma_lines = Seq (
    "  value = 1" ,
    "  sequence = Seq(1 ,    2,      3)" ,
    "  f( x: Int,\t     y: Int,     z: Int) =" ,
    "       x * x + y * y + z * z")

  joined_output =
    "  value = 1\n" +
    "  sequence = Seq(1 ," +
    "    2,  " +
    "    3)\n" +
    "  f( x: Int,\t" +
    "     y: Int," +
    "     z: Int) =\n" +
    "       x * x + y * y + z * z"

  build_block (lines : Seq [String] ) : AnnotatedBlock =
    AnnotationFactory .mk .annotate (BlockBuilder .mk .build (lines) )

  test ("should split a program in multiple lines") (
    check (
      obtained := bp .make_block (original_input)
    ) (
      expected := build_block (original_input_lines )
    )
  )

  test ("should join the translated lines of a program") (
    check (
      obtained := build_block (joined_comma_lines)
    ) (
      expected := bp .make_block (joined_output)
    )
  )

end

