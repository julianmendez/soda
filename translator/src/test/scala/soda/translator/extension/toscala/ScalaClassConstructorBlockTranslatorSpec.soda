
class ScalaClassConstructorBlockTranslatorSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.BlockTranslatorPipeline
    soda.translator.block.DefaultBlockSequenceTranslator
    soda.translator.parser.BlockProcessor

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  example_program_0 =
    "package soda.example.mytest" +
    "\n" +
    "\nclass Example0" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n" +
    "\n  abstract" +
    "\n    /** this value is an example */" +
    "\n    map : Map [Int] [Int]" +
    "\n    /** this function is also an example */" +
    "\n    a_function : Int -> Double -> String" +
    "\n" +
    "\nend" +
    "\n" +
    "\nclass Example0Spec ()" +
    "\n  extends" +
    "\n    org.scalatest.funsuite.AnyFunSuite" +
    "\n" +
    "\nend" +
    "\n" +
    "\n"

  expected_program_0 =
    "package soda.example.mytest" +
    "\n" +
    "\nclass Example0" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n" +
    "\n  abstract" +
    "\n    /** this value is an example */" +
    "\n    map : Map [Int] [Int]" +
    "\n    /** this function is also an example */" +
    "\n    a_function : Int -> Double -> String" +
    "\n" +
    "\nend" +
    "\n" +
    "\ncase class Example0_ (map : Map [Int, Int], a_function : Int => Double => String)" +
    " extends Example0" +
    "\n" +
    "\nobject Example0 {" +
    "\n  def mk (map : Map [Int, Int]) (a_function : Int => Double => " +
    "String) : Example0 =" +
    "\n    Example0_ (map, a_function)" +
    "\n}" +
    "\n" +
    "\nclass Example0Spec ()" +
    "\n  extends" +
    "\n    org.scalatest.funsuite.AnyFunSuite" +
    "\n" +
    "\nend" +
    "\n"

  example_program_1 =
    "package soda.example.mytest" +
    "\n" +
    "\nclass Example [A : Type] [B subtype SuperType]" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n    AnotherSuperClassExample [A]" +
    "\n" +
    "\n  abstract" +
    "\n    value : Int" +
    "\n    a_function : Int -> Double -> String" +
    "\n" +
    "\nend" +
    "\n" +
    "\nclass ExampleSpec ()" +
    "\n  extends" +
    "\n    org.scalatest.funsuite.AnyFunSuite" +
    "\n" +
    "\nend" +
    "\n" +
    "\n"

  expected_program_1 =
    "package soda.example.mytest" +
    "\n" +
    "\nclass Example [A : Type] [B subtype SuperType]" +
    "\n  extends" +
    "\n    SuperClassExample" +
    "\n    AnotherSuperClassExample [A]" +
    "\n" +
    "\n  abstract" +
    "\n    value : Int" +
    "\n    a_function : Int -> Double -> String" +
    "\n" +
    "\nend" +
    "\n" +
    "\ncase class Example_ [A, B <: SuperType] (value : Int," +
    " a_function : Int => Double => String) extends Example [A, B]" +
    "\n" +
    "\nobject Example {" +
    "\n  def mk [A, B <: SuperType] (value : Int) (a_function : Int => " +
    "Double => String) : Example [A, B] =" +
    "\n    Example_ [A, B] (value, a_function)" +
    "\n}" +
    "\n" +
    "\nclass ExampleSpec ()" +
    "\n  extends" +
    "\n    org.scalatest.funsuite.AnyFunSuite" +
    "\n" +
    "\nend" +
    "\n"

  _translation_pipeline =
    BlockTranslatorPipeline .mk (
      Seq (
        ScalaClassConstructorBlockTranslator .mk
      )
    )

  translator =
    BlockProcessor .mk (
      DefaultBlockSequenceTranslator .mk (
        _translation_pipeline
      )
    )

  test ("should produce the constructors for a simple class") (
    check (
      obtained := translator .translate (example_program_0)
    ) (
      expected := expected_program_0
    )
  )

  test ("should produce the constructors for a class with type parameters") (
    check (
      obtained := translator .translate (example_program_1)
    ) (
      expected := expected_program_1
    )
  )

end

