
class FullTranslationSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    org.scalatest.Assertion
    soda.translator.block.DefaultBlockSequenceTranslator_
    soda.translator.parser.BlockProcessor_
    java.nio.file.Files
    java.nio.file.Paths

  check [A] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  Base = "/soda/translator/example/"

  SodaSuffix = ".soda"

  ScalaSuffix = ".scala"

  SwapExample = "algorithms/SwapExample"

  FiboExample = "mathematics/FiboExample"

  FactorialConcise = "mathematics/FactorialConcise"

  FactorialVerbose = "mathematics/FactorialVerbose"

  Fairness = "ethicalissues/fairness/Fairness"

  PiIterator = "mathematics/PiIterator"

  SaladMaker = "algorithms/SaladMaker"

  FizzBuzzUnicode = "algorithms/FizzBuzzUnicode"

  ScalaReservedWordEscaping = "algorithms/ScalaReservedWordEscaping"

  InANutshell = "inanutshell/InANutshell"

  ManualInput = "/soda/translator/documentation/Manual.soda"

  ManualExpected = "/soda/translator/documentation/Manual.scala"

  test_translation (file_name : String) : Assertion =
    test_translation_with (input_file_name := Base + file_name + SodaSuffix) (expected_file_name := Base + file_name + ScalaSuffix)

  test_translation_with (input_file_name : String) (expected_file_name : String) : Assertion =
    check (
      obtained :=
        BlockProcessor_(
          DefaultBlockSequenceTranslator_ (
            MicroTranslatorToScala_()
          )
        ).translate (read_file (input_file_name) )
    ) (
      expected := read_file (expected_file_name)
    )

  read_file (file_name : String) : String =
    @new String (
      Files.readAllBytes (
        Paths.get (getClass.getResource (file_name).toURI)
      )
    )

  test ("should translate the swap example") (
    test_translation (SwapExample)
  )

  test ("should translate the Fibonacci example") (
    test_translation (FiboExample)
  )

  test ("should translate the Factorial Concise example") (
    test_translation (FactorialConcise)
  )

  test ("should translate the Factorial Verbose example") (
    test_translation (FactorialVerbose)
  )

  test ("should translate the Fairness example") (
    test_translation (Fairness)
  )

  test ("should translate the example that calculates pi") (
    test_translation (PiIterator)
  )

  test ("should translate the Salad Maker example") (
    test_translation (SaladMaker)
  )

  test ("should translate the FizzBuzz Unicode example") (
    test_translation (FizzBuzzUnicode)
  )


  test ("should translated Soda code that uses Scala reserved words as variables and functions") (
    test_translation (ScalaReservedWordEscaping)
  )

  test ("should translate the manual In A Nutshell") (
    test_translation (InANutshell)
  )

  test ("should translate the manual") (
    test_translation_with (ManualInput) (ManualExpected)
  )

end

