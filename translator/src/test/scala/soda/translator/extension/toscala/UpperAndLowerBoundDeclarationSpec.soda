
class UpperAndLowerBoundDeclarationSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.DefaultBlockSequenceTranslator_
    soda.translator.parser.BlockProcessor_

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  instance =
    BlockProcessor_(
      DefaultBlockSequenceTranslator_ (
        MicroTranslatorToScala_ ()
      )
    )

  test ("should translate a single upper bound") (
    check (
      obtained := instance .translate ("class BlackBox()" +
        "\n  extends " +
        "\n    AbstractBlackBox[A subtype AbstractInput]" +
        "\n" +
        "\nend" +
        "\n"
      )
    ) (
      expected :=
        "case class BlackBox()" +
        "\n  extends" +
        "\n    AbstractBlackBox[A <: AbstractInput]" +
        "\n{" +
        "\n" +
        "\n}" +
        "\n"
    )
  )

  test ("should translate multiple upper bounds") (
    check (
      obtained := instance .translate ("  class BlackBox()" +
        "\n    extends " +
        "\n      AbstractBlackBox[A subtype AbstractInput]" +
        "\n      AbstractDevice[B subtype AbstractDeviceInput]" +
        "\n" +
        "\n  end" +
        "\n"
      )
    ) (
      expected := "  case class BlackBox()" +
        "\n    extends" +
        "\n      AbstractBlackBox[A <: AbstractInput]" +
        "\n      with AbstractDevice[B <: AbstractDeviceInput]" +
        "\n  {" +
        "\n" +
        "\n  }" +
        "\n"
    )
  )

  test ("should translate a single lower bound") (
    check (
      obtained := instance .translate (" class BlackBox()" +
        "\n   extends " +
        "\n     AbstractBlackBox[A supertype (AbstractInput)]" +
        "\n" +
        "\n end" +
        "\n"
      )
    ) (
      expected := " case class BlackBox()" +
        "\n   extends" +
        "\n     AbstractBlackBox[A >: (AbstractInput)]" +
        "\n {" +
        "\n" +
        "\n }" +
        "\n"
    )
  )

  test ("should translate multiple lower bounds") (
    check (
      obtained := instance .translate ("  class BlackBox()" +
        "\n  extends " +
        "\n    AbstractBlackBox[A supertype (AbstractInput)]" +
        "\n    AbstractDevice[B supertype (AbstractDeviceInput)]" +
        "\n" +
        "\nend" +
        "\n"
      )
    ) (
      expected := "  case class BlackBox()" +
        "\n  extends" +
        "\n    AbstractBlackBox[A >: (AbstractInput)]" +
        "\n    with AbstractDevice[B >: (AbstractDeviceInput)]" +
        "\n  {" +
        "\n" +
        "\n}" +
        "\n"
    )
  )

  test ("should translate mixed upper and lower bounds") (
    check (
      obtained := instance .translate (
        "  class BlackBox [A subtype AbstractModel] [B subtype AbstractParameter]" +
        "\n  extends " +
        "\n    AbstractBlackBox[A][B]" +
        "\n    AbstractDevice [A]   [B] " +
        "\n" +
        "\nend" +
        "\n"
      )
    ) (
      expected := "  trait BlackBox [A <: AbstractModel, B <: AbstractParameter]" +
        "\n  extends" +
        "\n    AbstractBlackBox[A, B]" +
        "\n    with AbstractDevice [A, B]" +
        "\n  {" +
        "\n" +
        "\n}" +
        "\n" +
        "\n  case class BlackBox_ [A <: AbstractModel, B <: AbstractParameter] ()" +
        " extends BlackBox [A, B]" +
        "\n" +
        "\n  object BlackBox {" +
        "\n    def mk [A <: AbstractModel, B <: AbstractParameter] : " +
        "BlackBox [A, B] =" +
        "\n      BlackBox_ [A, B] ()" +
        "\n  }" +
        "\n"
    )
  )

end

