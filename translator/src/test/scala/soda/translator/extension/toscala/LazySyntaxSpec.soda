
class ExampleWithWrongOrder

  this_is_null_but = constant_defined_later

  constant_defined_later = "Success!"

end

class ExampleWithRightOrder

  constant_defined_before = "Success!"

  this_is_not_null = constant_defined_before

end

class ExampleWithEmptyParentheses

  this_is_not_null  () = constant_defined_later

  constant_defined_later = "Success!"

end

class AnotherExampleWithEmptyParentheses

  this_is_not_null = constant_function_defined_later  ()

  constant_function_defined_later  () = "Success!"

end

/**
 * In Soda constants cannot be defined as 'lazy val'.
 * These tests detect and test this problem, and test workarounds.
 */

class LazySyntaxSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  test ("should show what happens when constants are defined in the wrong order") (
    check (
      obtained := ExampleWithWrongOrder_ () .this_is_null_but
    ) (
      expected := "Success!"
    )
  )

  test ("should show what happens when constants are defined in the right order") (
    check (
      obtained := ExampleWithRightOrder_ () .this_is_not_null
    ) (
      expected := "Success!"
    )
  )

  test ("should show what happens when one work-around is used") (
    check (
      obtained := ExampleWithEmptyParentheses_ () .this_is_not_null  ()
    ) (
      expected := "Success!"
    )
  )

  test ("should show what happens when another work-around is used") (
    check (
      obtained := AnotherExampleWithEmptyParentheses_ () .this_is_not_null
    ) (
      expected := "Success!"
    )
  )

end

