
class MicroTranslatorToDocSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.translator.block.DefaultBlockSequenceTranslator
    soda.translator.parser.BlockProcessor

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  instance =
    BlockProcessor .mk (
      DefaultBlockSequenceTranslator .mk (
        MicroTranslatorToDoc .mk
      )
    )

  original_snippet_1 = "" +
    "/*" +
    "\n * This is an example" +
    "\n*/" +
    "\n"

  translated_snippet_1 = "" +
    "\n\\end{lstlisting}" +
    "\n" +
    "\n" +
    "\n This is an example" +
    "\n" +
    "\n" +
    "\n" +
    "\n\\begin{lstlisting}" +
    "\n" +
    "\n"

  test ("Document generation of a snippet 1") (
    check (
      obtained := instance .translate (original_snippet_1)
    ) (
      expected := translated_snippet_1
    )
  )

  original_snippet_2 = "" +
    "\n/** These are the Soda docs. */\n"

  translated_snippet_2 = "" +
    "\n\\end{lstlisting}" +
    "\n" +
    "\nThese are the Soda docs." +
    "\n" +
    "\n" +
    "\n\\begin{lstlisting}" +
    "\n" +
    "\n"

  test ("Document generation of a snippet 2") (
    check (
      obtained := instance .translate (original_snippet_2)
    ) (
      expected := translated_snippet_2
    )
  )

  original_snippet_3 = "" +
    "\n/* This is a multiline comment." +
    "\n * Each line starts with an asterisk '*'." +
    "\n * *Only* the first asterisk '*' is removed." +
    "\n But it is not mandatory." +
    "\n It is only for clarity. */\n"

  translated_snippet_3 = "" +
    "\n\\end{lstlisting}" +
    "\n" +
    "\nThis is a multiline comment." +
    "\n Each line starts with an asterisk '*'." +
    "\n *Only* the first asterisk '*' is removed." +
    "\n But it is not mandatory." +
    "\n It is only for clarity." +
    "\n" +
    "\n" +
    "\n\\begin{lstlisting}" +
    "\n" +
    "\n"

  test ("Document generation of a snippet 3") (
    check (
      obtained := instance .translate (original_snippet_3)
    ) (
      expected := translated_snippet_3
    )
  )


end

