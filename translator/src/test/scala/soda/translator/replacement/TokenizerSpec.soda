package soda.translator.replacement

class TokenizerSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  test ("should tokenize a small example") (
    check (
      obtained := Tokenizer_ ("    val Constant = \"my text\"").tokens
    ) (
      expected := Seq (
        Token_ ("    val Constant = ", ParserStateEnum_ ().plain, 0),
        Token_ ("\"my text\"", ParserStateEnum_ ().quotes_state, 19),
        Token_ ("", ParserStateEnum_ ().plain, 28)
      )
    )
  )

  test ("should tokenize a common tab in a string") (
    check (
      obtained := Tokenizer_ ("  x = \"abc\tde\"").tokens
    ) (
      expected := Seq (
        Token_ ("  x = ", ParserStateEnum_ ().plain, 0),
        Token_ ("\"abc\tde\"", ParserStateEnum_ ().quotes_state, 6),
        Token_ ("", ParserStateEnum_ ().plain, 14)
      )
    )
  )

  test ("should tokenize an escaped tab in a string") (
    check (
      obtained := Tokenizer_ ("  x = \"abc\\tde\"").tokens
    ) (
      expected := Seq (
        Token_ ("  x = ", ParserStateEnum_ ().plain, 0),
        Token_ ("\"abc\\tde\"", ParserStateEnum_ ().quotes_state, 6),
        Token_ ("", ParserStateEnum_ ().plain, 15)
      )
    )
  )

  test ("should tokenize a single function definition") (
    check (
      obtained := Tokenizer_ ("def f (x: Int): Int = x").tokens
    ) (
      expected := Seq (
        Token_ ("def f (x: Int): Int = x", ParserStateEnum_ ().plain, 0)
      )
    )
  )

  test ("should tokenize a function call") (
    check (
      obtained := Tokenizer_ ("\tas_digits (5 * number)").tokens
    ) (
      expected := Seq (
        Token_ ("\tas_digits (5 * number)", ParserStateEnum_ ().plain, 0)
      )
    )
  )

end

