package soda.translator.language


* FullTranslationSpec() extends org.scalatest.funsuite.AnyFunSuite = {
  + org.scalatest.Assertion
  + java.nio.file.{Files, Paths}

  Base = "/soda/translator/example/"

  SodaSuffix = ".soda"
  ScalaSuffix = ".scala"

  SwapExample = "SwapExample"
  FiboExample = "FiboExample"
  FactorialConcise = "FactorialConcise"
  FactorialVerbose = "FactorialVerbose"
  Fairness = "Fairness"
  PiIterator = "PiIterator"
  ScalaReservedWordEscaping = "ScalaReservedWordEscaping"
  InANutshell = "inanutshell/InANutshell"

  ManualInput = "/soda/translator/documentation/Manual.soda"
  ManualExpected = "/soda/translator/documentation/Manual.scala"

  test_translation(file_name: String): Assertion =
    let
      input_file_name = Base + file_name + SodaSuffix
      expected_file_name = Base + file_name + ScalaSuffix
    in test_translation(input_file_name, expected_file_name)

  test_translation(input_file_name: String, expected_file_name: String): Assertion =
    let
      input_file = read_file(input_file_name)
      expected = read_file(expected_file_name)
      obtained = MicroTranslator().translate_program(input_file)
    in assert(obtained == expected)

  read_file(file_name: String): String =
    let
      document_resource = getClass.getResource(file_name)
      document_URI = document_resource.toURI
      document_path = Paths.get(document_URI)
    in @new String(Files.readAllBytes(document_path))

  test("should translate the swap example") {
    test_translation(SwapExample)
  }

  test("should translate the Fibonacci example") {
    test_translation(FiboExample)
  }

  test("should translate the Factorial Concise example") {
    test_translation(FactorialConcise)
  }

  test("should translate the Factorial Verbose example") {
    test_translation(FactorialVerbose)
  }

  test("should translate the Fairness example") {
    test_translation(Fairness)
  }

  test("should translate the example that calculates pi") {
    test_translation(PiIterator)
  }

  test("should translated Soda code that uses Scala reserved words as variables and functions") {
    test_translation(ScalaReservedWordEscaping)
  }

  test("should translate the manual In A Nutshell") {
    test_translation(InANutshell)
  }

  test("should translate the manual") {
    test_translation(ManualInput, ManualExpected)
  }
}

