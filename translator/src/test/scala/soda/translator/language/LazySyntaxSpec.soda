package soda.translator.language

+ org.scalatest.funsuite.AnyFunSuite


* ExampleWithWrongOrder() = {

  this_is_null_but = constant_defined_later

  constant_defined_later = "Success!"

}

* ExampleWithRightOrder() = {

  constant_defined_before = "Success!"

  this_is_not_null = constant_defined_before

}

* ExampleWithEmptyParentheses() = {

  this_is_not_null () = constant_defined_later

  constant_defined_later = "Success!"

}

* AnotherExampleWithEmptyParentheses() = {

  this_is_not_null = constant_function_defined_later ()

  constant_function_defined_later () = "Success!"

}


/**
 * In Soda constants cannot be defined as 'lazy val'.
 * These tests detect and test this problem, and test work-arounds.
 */
* LazySyntaxSpec() extends AnyFunSuite = {

  test("should show what happens when constants are defined in the wrong order") {
    obtained = ExampleWithWrongOrder().this_is_null_but
    expected = "Success!"
    assert(obtained == expected)
  }

  test("should show what happens when constants are defined in the right order") {
    obtained = ExampleWithRightOrder().this_is_not_null
    expected = "Success!"
    assert(obtained == expected)
  }

  test("should show what happens when one work-around is used") {
    obtained = ExampleWithEmptyParentheses().this_is_not_null ()
    expected = "Success!"
    assert(obtained == expected)
  }

  test("should show what happens when another work-around is used") {
    obtained = AnotherExampleWithEmptyParentheses().this_is_not_null
    expected = "Success!"
    assert(obtained == expected)
  }

}

