package soda.translator.language


* LineJoinerSpec() extends org.scalatest.funsuite.AnyFunSuite = {

  mt = MicroTranslator()

  Original_parenthesis_example =
    Seq(
      "a[ ",
      "T",
      " ]( ",
      "x: Int,",
      " y: Int",
      " ) = f[T](",
      "x + y",
      ")"
    )

  Result_with_only_opening_brackets_example =
    Seq(
      "a[ T",
      " ]( x: Int, y: Int",
      " ) = f[T](x + y",
      ")"
    )

  Result_with_only_closing_brackets_example =
    Seq(
      "a[ ",
      "T ]( ",
      "x: Int,",
      " y: Int ) = f[T](",
      "x + y)"
    )

  Result_with_opening_closing_brackets_example =
    Seq(
      "a[ T ]( x: Int, y: Int ) = f[T](x + y)"
    )

  test("should join lines ending in comma") {
    input = Seq("this ", "should join,", "all the lines , ", "  that end with", "comma.")
    expected = Seq("this ", "should join,all the lines ,   that end with", "comma.")
    obtained = mt.join_lines_with_opening_brackets(input)

    assert(obtained == expected)
  }

  test("should join lines ending in opening parenthesis and brackets") {
    input = Original_parenthesis_example
    expected = Result_with_only_opening_brackets_example
    obtained = mt.join_lines_with_opening_brackets(input)

    assert(obtained == expected)
  }

  test("should join lines starting in closing parenthesis and brackets") {
    input = Original_parenthesis_example
    expected = Result_with_only_closing_brackets_example
    obtained = mt.join_lines_with_closing_brackets(input)

    assert(obtained == expected)
  }

  test("should join lines ending with opening parenthesis and brackets or starting in closing parenthesis and brackets") {
    input = Original_parenthesis_example
    expected = Result_with_opening_closing_brackets_example
    obtained =
      Some(input)
        .map(x -> mt.join_lines_with_opening_brackets(x))
        .map(x -> mt.join_lines_with_closing_brackets(x))
        .get

    assert(obtained == expected)
  }
}

