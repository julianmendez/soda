package soda.translator.language

+ org.scalatest.funsuite.AnyFunSuite


* SpecificTranslationSpec() extends AnyFunSuite {


  test("should translate a small snippet") {
    original = "  input_lines = Seq(" +
      "\n    \"  f( x: Int,\\t\", " +
      "\n    \"     y: Int) =\"," +
      "\n    \"       x + y\")" +
      "\n"

    expected = "  lazy val input_lines = Seq (" +
      "\n    \"  f( x: Int,\\t\", " +
      "    \"     y: Int) =\"," +
      "    \"       x + y\")" +
      "\n"

    obtained = MicroTranslator().translate_program(original)
    assert(obtained == expected)
  }

  test("should leave content of apostrophes unchanged") {
    input = " a = Seq('\\'', \'', '\\\"', ' or ', \'or\', '0x00', '->', '/*', '*/')\n"
    expected = " lazy val a = Seq ('\\'', '', '\\\"', ' or ', 'or', '0x00', '->', '/*', '*/')\n"
    obtained = MicroTranslator().translate_program(input)
    assert(obtained == expected)
  }

  test("should leave content of quotation marks unchanged") {
    input = " a = Seq(\"\\\"\", \"\", \"\\\'\", \" or \", \"or\", \"0x00\", \"->\", \"/*\", \"*/\")\n"
    expected = " lazy val a = Seq (\"\\\"\", \"\", \"\\'\", \" or \", \"or\", \"0x00\", \"->\", \"/*\", \"*/\")\n"
    obtained = MicroTranslator().translate_program(input)
    assert(obtained == expected)

  }

}

