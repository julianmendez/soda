package soda.translator.blocktr

* LineJoinerSpec ()
  extends org.scalatest.funsuite.AnyFunSuite = {

  + soda.translator.parser.BlockBuilder_
  + soda.translator.block.DefaultBlockTranslator_
  + soda.translator.parser.BlockProcessor_

  bp = BlockProcessor_  (DefaultBlockTranslator_ ())

  Original_parenthesis_example =
    Seq (
      "a [ ",
      "T",
      " ] ( ",
      "x: Int,",
      " y: Int",
      " ) = f [T] (",
      "x + y",
      ")"
    )

  Result_with_only_opening_brackets_example =
    Seq (
      "a [ T",
      " ] ( x: Int, y: Int",
      " ) = f [T] (x + y",
      ")"
    )

  Result_with_only_closing_brackets_example =
    Seq (
      "a [ ",
      "T ] ( ",
      "x: Int,",
      " y: Int ) = f [T] (",
      "x + y)"
    )

  Result_with_opening_closing_brackets_example =
    Seq (
      "a [ T ] ( x: Int, y: Int ) = f [T] (x + y)"
    )

  Example_using_extends_and_with =
    Seq (
      "it should join lines ending with the extends",
      "keyword",
      "it should join lines ending with the with",
      "keyword",
      "it should join lines starting with the",
      "extends keyword",
      "it should join lines starting with the",
      "with keyword",
      "it should not join lines ending with suffixextends",
      "it should not join lines ending with suffixwith",
      "extendsprefix should not join lines",
      "withprefix should not join lines",
      "trailing spaces using extends  ",
      "and using with ",
      "should be respected",
      "leading spaces using",
      " extends and using ",
      "  with should be respected"
    )

  test ("should join lines ending in comma")
    let
      input = BlockBuilder_ ().build  ( Seq ("this ", "should join,", "all the lines , ", "  that end with a", "comma.") )
      expected = BlockBuilder_ ().build  ( Seq ("this ", "should join,all the lines ,   that end with a", "comma.") )
      obtained = LineForwardJoinerBlockTranslator_ ().translate (input)
    in assert (obtained == expected)

  test ("should join lines ending in opening parenthesis and brackets")
    let
      input = BlockBuilder_ ().build  ( Original_parenthesis_example )
      expected = BlockBuilder_ ().build  ( Result_with_only_opening_brackets_example )
      obtained = LineForwardJoinerBlockTranslator_ ().translate  (input)
    in  assert (obtained == expected)

  test ("should join lines starting in closing parenthesis and brackets")
    let
      input = BlockBuilder_ ().build  ( Original_parenthesis_example )
      expected = BlockBuilder_ ().build  ( Result_with_only_closing_brackets_example )
      obtained = LineBackwardJoinerBlockTranslator_ ().translate  (input)
    in assert (obtained == expected)

  test ("should join lines ending with opening parenthesis and brackets or starting in closing parenthesis and brackets")
    let
      input = BlockBuilder_ ().build  ( Original_parenthesis_example )
      expected = BlockBuilder_ ().build  ( Result_with_opening_closing_brackets_example )
      obtained =
        Some  (input)
          .map (x -> LineForwardJoinerBlockTranslator_ ().translate (x))
          .map (x -> LineBackwardJoinerBlockTranslator_ ().translate (x))
          .get
    in assert (obtained == expected)

  test ("should join lines starting or ending with keyword 'extends' and 'with' with forward join")
    let
      input = BlockBuilder_ ().build  ( Example_using_extends_and_with )
      expected = BlockBuilder_ ().build  (
        Seq (
          "it should join lines ending with the extendskeyword",
          "it should join lines ending with the withkeyword",
          "it should join lines starting with the",
          "extends keyword",
          "it should join lines starting with the",
          "with keyword",
          "it should not join lines ending with suffixextends",
          "it should not join lines ending with suffixwith",
          "extendsprefix should not join lines",
          "withprefix should not join lines",
          "trailing spaces using extends  and using with should be respected",
          "leading spaces using",
          " extends and using ",
          "  with should be respected"
        )
      )
      obtained = LineForwardJoinerBlockTranslator_ ().translate  (input)
    in assert (obtained == expected)

  test ("should join lines starting or ending with keyword 'extends' and 'with' with backward join")
    let
      input = BlockBuilder_ ().build  ( Example_using_extends_and_with )
      expected = BlockBuilder_ ().build  (
        Seq (
          "it should join lines ending with the extends",
          "keyword",
          "it should join lines ending with the with",
          "keyword",
          "it should join lines starting with theextends keyword",
          "it should join lines starting with thewith keyword",
          "it should not join lines ending with suffixextends",
          "it should not join lines ending with suffixwith",
          "extendsprefix should not join lines",
          "withprefix should not join lines",
          "trailing spaces using extends  ",
          "and using with ",
          "should be respected",
          "leading spaces using extends and using   with should be respected"
        )
      )
      obtained = LineBackwardJoinerBlockTranslator_ ().translate  (input)
    in assert (obtained == expected)

}

