package scopus.lib

/**
 * This class contains tail recursive auxiliary functions.
 */
* Rec() {

  foldLeftWhile[A, B](s: Seq[A], initval: B, op: (B, A) -> B, cond: (B, A) -> Boolean): B = {
    result = rec(s, initval, op, cond)

    @tailrec
    rec[A, B](seq: Seq[A], acc: B, op: (B, A) -> B, cond: (B, A) -> Boolean): B =
      if seq.isEmpty
      then acc
      else {
        (elem, rest) = (seq.head, seq.tail)
        if not cond(acc, elem)
        then acc
        else rec(rest, op(acc, elem), op, cond)
      }

    result
  }


  foldLeft[A, B](seq: Seq[A], initval: B, op: (B, A) -> B): B = {
    result = rec(seq, initval, op)

    @tailrec
    rec[A, B](seq: Seq[A], acc: B, op: (B, A) -> B): B =
      if seq.isEmpty
      then acc
      else rec(seq.tail, op(acc, seq.head), op)

    result
  }

}

