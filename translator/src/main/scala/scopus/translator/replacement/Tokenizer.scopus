package scopus.translator.replacement

+ scopus.lib.Rec


/**
 * A token is a piece of code, that can contain one or more words combined with symbols.
 */
* Token(text: String, parser_state: ParserState, index: Int) {

  @override
  toString: String =
    "(\"" + text + "\"," + parser_state + ", " + index + ")"
}

/**
 * This class processes a line to divide it into tokens.
 */
* Tokenizer() {

  tokenize(line: String): Seq[Token] = {
    result = postproc(Rec().foldLeft( Range(0, line.length), initval, op ))

    * RecTuple(last_index: Int, parser_state: ParserState, rev_tokens: Seq[Token])

    initval = RecTuple(0, ParserStateEnum().Plain, Seq())

    postproc(tuple: RecTuple): Seq[Token] =
      (tuple.rev_tokens.+:(Token(line.substring(tuple.last_index), tuple.parser_state, tuple.last_index)))
        .reverse

    op(tuple: RecTuple, current_index: Int): RecTuple = {
      ch = line.charAt(current_index)
      char_type = CharTypeEnum().get_char_type(ch)
      new_parser_state = ParserTransition().next_parser_state(tuple.parser_state, char_type)

      if ParserStateEnum().is_same_class(new_parser_state, tuple.parser_state)
      then RecTuple(tuple.last_index, new_parser_state, tuple.rev_tokens)
      else {
        index =
          if tuple.parser_state == ParserStateEnum().QuotesState or
             tuple.parser_state == ParserStateEnum().ApostropheState
          then current_index + 1
          else current_index

        text = line.substring(tuple.last_index, index)
        RecTuple(index, new_parser_state,
          tuple.rev_tokens.+:(Token(text, tuple.parser_state, tuple.last_index)))
      }
    }

    result
  }

}

