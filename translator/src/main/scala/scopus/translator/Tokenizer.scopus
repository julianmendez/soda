package scopus.translator


* Token(text: String, parser_state: ParserState, index: Int) {

  @override
  toString: String =
    "(\"" + text + "\"," + parser_state + ", " + index + ")"
}

* Tokenizer() {

  tokenize(line: String): Seq[Token] = {
    result = rec(line, 0, 0, ParserStateEnum().Plain, Seq()).reverse

    @tailrec
    rec(line: String, last_index: Int, current_index: Int,
          parser_state: ParserState, rev_tokens: Seq[Token]): Seq[Token] =
      if current_index >= line.length
      then rev_tokens.+:(Token(line.substring(last_index), parser_state, last_index))
      else {
        ch = line.charAt(current_index)
        char_type = CharTypeEnum().get_char_type(ch)
        new_parser_state = ParserTransition().next_parser_state(parser_state, char_type)
        (new_last_index, new_current_index, new_rev_tokens) =
            _next_values (new_parser_state, line, last_index, current_index, parser_state, rev_tokens)
        rec(line, new_last_index, new_current_index, new_parser_state, new_rev_tokens)
      }

    result
  }

  _next_values (new_parser_state: ParserState, line: String,
        last_index: Int, current_index: Int,
        parser_state: ParserState, rev_tokens: Seq[Token]) =
    if ParserStateEnum().is_same_class(new_parser_state, parser_state)
    then (last_index, current_index + 1, rev_tokens)
    else {
      index =
        if parser_state == ParserStateEnum().QuotesState or
           parser_state == ParserStateEnum().ApostropheState
        then current_index + 1
        else current_index

      text = line.substring(last_index, index)
      (index, index + 1, rev_tokens.+:(Token(text, parser_state, last_index)))
    }

}

