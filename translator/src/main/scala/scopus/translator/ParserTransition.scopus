package scopus.translator


* ParserState(index: Int)


* ParserStateCons() {

  UndefinedState = ParserState(0)
  QuotesState = ParserState(1)
  ApostropheState = ParserState(2)
  QuotesBackslashState = ParserState(3)
  ApostropheBackslashState = ParserState(4)
  Plain = ParserState(5)


  is_same_class(x: ParserState, y: ParserState): Boolean =
    (x == y) or
    _is_same_class_with_order(x, y) or
    _is_same_class_with_order(y, x)

  _is_same_class_with_order(x: ParserState, y: ParserState): Boolean =
    (x == QuotesState and y == QuotesBackslashState) or
    (x == ApostropheState and y == ApostropheBackslashState)

}

* ParserTransition() {

  ps = ParserStateCons()
  ch = CharTypeCons()

  next_parser_state(parser_state: ParserState, char_type: CharType): ParserState =
    TransitionsThatChangeStates.getOrElse((parser_state, char_type), parser_state)

  TransitionsThatChangeStates: Map[(ParserState, CharType), ParserState] =
    Map(
      /* */
      ((ps.QuotesState, ch.UndefinedType), ps.UndefinedState),
      ((ps.QuotesState, ch.QuotesType), ps.Plain),
      ((ps.QuotesState, ch.BackslashType), ps.QuotesBackslashState),
      /* */
      ((ps.ApostropheState, ch.UndefinedType), ps.UndefinedState),
      ((ps.ApostropheState, ch.ApostropheType), ps.Plain),
      ((ps.ApostropheState, ch.BackslashType), ps.ApostropheBackslashState),
      /* */
      ((ps.QuotesBackslashState, ch.UndefinedType), ps.UndefinedState),
      ((ps.QuotesBackslashState, ch.QuotesType), ps.QuotesState),
      ((ps.QuotesBackslashState, ch.ApostropheType), ps.QuotesState),
      ((ps.QuotesBackslashState, ch.BackslashType), ps.QuotesState),
      ((ps.QuotesBackslashState, ch.PlainType), ps.QuotesState),
      /* */
      ((ps.ApostropheBackslashState, ch.UndefinedType), ps.UndefinedState),
      ((ps.ApostropheBackslashState, ch.QuotesType), ps.ApostropheState),
      ((ps.ApostropheBackslashState, ch.ApostropheType), ps.ApostropheState),
      ((ps.ApostropheBackslashState, ch.BackslashType), ps.ApostropheState),
      ((ps.ApostropheBackslashState, ch.PlainType), ps.ApostropheState),
      /* */
      ((ps.Plain, ch.UndefinedType), ps.UndefinedState),
      ((ps.Plain, ch.QuotesType), ps.QuotesState),
      ((ps.Plain, ch.ApostropheType), ps.ApostropheState),
      ((ps.Plain, ch.BackslashType), ps.Plain),
      ((ps.Plain, ch.PlainType), ps.Plain)
    )

}
