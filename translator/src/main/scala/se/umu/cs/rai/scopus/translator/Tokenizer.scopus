package se.umu.cs.rai.scopus.translator

+ scala.annotation.tailrec

* Token(text: String, parserState: Int, index: Int) {

  @override
  toString: String =
    "(\"" + text + "\"," + parserState + ", " + index + ")"
}

* Tokenizer() {

  tokenize(line: String): Seq[Token] =
    tokenizeRec(line, 0, 0, ParserState().Plain, Seq())
      .reverse

  _nextValues (newParserState: Int, line: String, lastIndex: Int, currentIndex: Int, parserState: Int, revTokens: Seq[Token]) =
    if newParserState == parserState
    then (lastIndex, currentIndex + 1, revTokens)
    else {
      index =
        if parserState == ParserState().QuotesState or parserState == ParserState().ApostropheState
        then currentIndex + 1
        else currentIndex

      text = line.substring(lastIndex, index)
      (index, index + 1, revTokens.+:(Token(text, parserState, lastIndex)))
    }

  @tailrec
  tokenizeRec(line: String, lastIndex: Int, currentIndex: Int, parserState: Int, revTokens: Seq[Token]): Seq[Token] =
    if currentIndex >= line.length
    then revTokens.+:(Token(line.substring(lastIndex), parserState, lastIndex))
    else {
      ch = line.charAt(currentIndex)
      charType = CharType().charType(ch)
      newParserState = ParserTransition().nextParserState(parserState, charType)
      (newLastIndex, newCurrentIndex, newRevTokens) = _nextValues (newParserState, line, lastIndex, currentIndex, parserState, revTokens)
      tokenizeRec(line, newLastIndex, newCurrentIndex, newParserState, newRevTokens)
    }

}
