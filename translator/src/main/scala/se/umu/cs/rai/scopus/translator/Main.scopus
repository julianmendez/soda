package se.umu.cs.rai.scopus.translator

+ java.io.File
+ java.io.FileWriter
+ java.nio.file.Files
+ java.nio.file.Paths

@main
/**
 * This is the main entry point.
 */
* Main() {

  ScopusExtension: String = ".scopus"
  ScalaExtension: String = ".scala"

  Help: String = "\n" +
    "\nUsage:" +
    "\n  scopus SCOPUS_SCALA_INPUT" +
    "\nor" +
    "\n  scopus SCOPUS_INPUT SCALA_OUTPUT" +
    "\n" +
    "\nwhere" +
    "\n" +
    "\n  SCOPUS_SCALA_INPUT is used to create the Scopus input file and Scala output file. " +
    "\nIf it is a directory, it scans recursively the directory to translate Scopus files." +
    "\nIf the extension is " + ScopusExtension + ", the output file has extension " + ScalaExtension + "." +
    "\nOtherwise, the extension " + ScopusExtension + " and " + ScalaExtension + " are appended to create the input and output files respectively." +
    "\n" +
    "\n" +
    "\n  SCOPUS_INPUT is the Scopus input file, regardless of the extension" +
    "\n" +
    "\n  SCALA_OUTPUT is the Scala output file, regardless of the extension" +
    "\n" +
    "\n"


  getTitleAndVersion: String = {
    packg = this.getClass.getPackage
    name = Option(packg.getImplementationTitle).getOrElse("")
    version = Option(packg.getImplementationVersion).getOrElse("")
    (name + " " + version).trim
  }

  main(args: Array[String]): Unit =
    if args.length == 1 then process_directory(args(0))
    else if args.length == 2 then translate(args(0), args(1))
    else println(getTitleAndVersion + Help)

  process_directory(start: String) =
    DirectoryScanner()
      .get_scopus_files(new File(start))
      .map(file -> {
        file_name = file.getAbsolutePath
        (inputFileName, outputFileName) = getInputOutputFileNames(file_name)
        translate(inputFileName, outputFileName)
      })

  getInputOutputFileNames(inputName: String): (String, String) =
    if inputName.endsWith(ScopusExtension)
    then (inputName, inputName.substring(0, inputName.length - ScopusExtension.length) + ScalaExtension)
    else (inputName + ScopusExtension, inputName + ScalaExtension)

  translate(inputFileName: String, outputFileName: String): Unit = {
    input = readFile(inputFileName)
    output = MicroTranslator().translateProgram(input)
    writer = new FileWriter(outputFileName)
    writer.write(output)
    writer.flush()
  }

  readFile(fileName: String): String =
    new String(Files.readAllBytes(Paths.get(fileName)))

}
