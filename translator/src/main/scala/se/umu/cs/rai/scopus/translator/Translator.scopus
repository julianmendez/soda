package se.umu.cs.rai.scopus.translator


* Translator {
  has translate (word: String): String
  has keys: Seq[String]

  _get(table: Seq[(String, String)], word: String) =
    table.toMap.get(word).getOrElse(word)

  _keys(table: Seq[(String, String)]) =
    table.map(pair => pair._1)
}

* SynonymAtBeginning () extends Translator {
  _table = Translation().SynonymAtBeginning

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}

* TranslationAtBeginningWithParen() extends Translator {
  _table = Translation().TranslationAtBeginningWithParen

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}

* TranslationAtBeginningWithoutParen() extends Translator {
  _table = Translation().TranslationAtBeginningWithoutParen

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* Synonym() extends Translator {
  _table = Translation().Synonym

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* MainTranslation() extends Translator {
  _table = Translation().MainTranslation

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* ScalaNonScopus() extends Translator {
  translate (word: String) = {
    if not Translation().ScopusReservedWords.contains(word) and
      Translation().ScalaReservedWords.contains(word)
    then Translation().PrefixScalaNonScopus + word
    else word
  }

  keys = Translation().ScalaNonScopusKeys

}

