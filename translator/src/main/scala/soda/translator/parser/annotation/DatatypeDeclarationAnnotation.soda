
class ConstructorTuple

  abstract
    name : String
    parameters : Seq [String]

  parameters_without_last : Seq [String] =
    parameters .dropRight (1)

end

class DatatypeDeclarationAnnotation
  extends
    BlockAnnotationParser

  abstract
    block : soda.translator.block.Block

  import
    soda.translator.block.AnnotatedLine
    soda.translator.block.BlockAnnotationEnum
    soda.translator.block.BlockAnnotationId
    soda.translator.parser.SodaConstant

  identifier : BlockAnnotationId = BlockAnnotationEnum .mk .datatype_declaration

  _sc = SodaConstant .mk

  first_line : String =
    if block .readable_lines .nonEmpty
    then block .readable_lines .head .line .trim + _sc .space
    else ""

  applies : Boolean =
    first_line .startsWith (_sc .datatype_reserved_word + _sc .space) or
    first_line .startsWith (_sc .data_reserved_word + _sc .space) or
    first_line .startsWith (_sc .inductive_reserved_word + _sc .space)

  _class_name_for (line : String) (word : String) : String =
    if first_line .startsWith (word + _sc .space)
    then line .substring (line .indexOf (word) + word .length) .trim
    else ""

  class_name_and_parameters : String =
    _class_name_for (first_readable_line .line) (_sc .datatype_reserved_word) +
    _class_name_for (first_readable_line .line) (_sc .data_reserved_word) +
    _class_name_for (first_readable_line .line) (_sc .inductive_reserved_word)

  class_name_and_parameters_no_type_membership_symbol : String =
    class_name_and_parameters
      .replaceAll (_sc .parameter_type_declaration_colon_regex, _sc .closing_bracket_symbol)

  class_name : String =
    class_name_and_parameters
      .split (_sc .opening_bracket_regex)
      .headOption
      .getOrElse (_sc .empty_string)
      .trim

  type_parameters : Seq [String] =
    class_name_and_parameters
      .split (_sc .opening_bracket_regex)
      .flatMap (lambda piece --> piece .split (_sc .comma_symbol) )
      .map (lambda piece -->
        piece .replaceAll (_sc .type_declaration_colon_regex , _sc .empty_string) .trim )
      .drop (1)
      .toIndexedSeq

  _get_parameters_with_arrows (line : String) : Seq [String] =
    _sc .constructor_parameter_separation_regex
      .r
      .replaceAllIn (line ,
        lambda m --> m .matched .replaceAll (_sc .function_arrow_symbol , _sc .placeholder_symbol) )
      .split (_sc .function_arrow_symbol)
      .map (lambda piece -->
        piece
          .replaceAll (_sc .placeholder_symbol , _sc .function_arrow_symbol)
          .trim
      )
      .toList

  _get_parameters_without_arrows (line : String) : Seq [String] =
    line
      .replaceAll (_sc .comma_separation_regex ,
         _sc .class_parameter_separation_with_placeholder)
      .replaceAll (_sc .class_parameter_separation_regex ,
         _sc .class_parameter_separation_with_placeholder)
      .split (_sc .placeholder_symbol)
      .map (lambda piece --> piece .trim)
      .filter (lambda piece --> piece .nonEmpty)
      .toList
      .++ (Seq [String] () .+: (class_name_and_parameters_no_type_membership_symbol) )

  _parse_constructor_with_arrows (line : String) (index_colon : Int) : ConstructorTuple =
    if index_colon >= 0
    then ConstructorTuple .mk (
      line .substring (0 , index_colon) .trim) (
      _get_parameters_with_arrows (
        line .substring (index_colon + _sc .type_membership_symbol .length) )
    )
    else ConstructorTuple .mk (line .trim) (Seq [String] () )

  _parse_constructor_without_arrows (line : String) (index_paren : Int) : ConstructorTuple =
    if index_paren >= 0
    then ConstructorTuple .mk (
      line .substring (0 , index_paren) .trim) (
      _get_parameters_without_arrows (line .substring (index_paren) )
    )
    else ConstructorTuple .mk (line .trim) (Seq [String] () )

  _parse_constructor_for_enum (line : String) : ConstructorTuple =
    ConstructorTuple .mk (line .trim) (
      _get_parameters_without_arrows (_sc .empty_string)
    )

  _make_constructor_not_enum (line : String)  (index_colon : Int) (index_paren : Int)
      : ConstructorTuple =
    if (index_colon >= 0) and (index_paren >=0) and (index_paren < index_colon)
    then _parse_constructor_without_arrows (line) (index_paren)
    else _parse_constructor_with_arrows (line) (index_colon)

  _make_constructor_from_line_with (line : String) (index_colon : Int) (index_paren : Int)
      : ConstructorTuple =
    if (index_colon < 0)
    then _parse_constructor_for_enum (line)
    else _make_constructor_not_enum (line) (index_colon) (index_paren)

  make_constructor_from_line (line : String) : ConstructorTuple =
    _make_constructor_from_line_with (line) (
      line .indexOf (_sc .type_membership_symbol) ) (
      line .indexOf (_sc .opening_parenthesis_symbol) )

  constructors_with_comments : Seq [AnnotatedLine] =
    content_lines

  constructors : Seq [ConstructorTuple] =
    constructors_with_comments
      .filter (lambda line --> not line .is_comment)
      .map (lambda annotated_line --> annotated_line .line)
      .map (lambda line --> make_constructor_from_line (line) )

end

