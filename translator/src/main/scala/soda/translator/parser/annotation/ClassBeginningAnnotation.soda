
class ClassBeginningAnnotation
  extends
    BlockAnnotationParser

  abstract
    block : soda.translator.block.Block

  import
    soda.translator.block.BlockAnnotationEnum
    soda.translator.parser.SodaConstant

  identifier = BlockAnnotationEnum. mk .class_beginning

  sc = SodaConstant .mk

  _contains_the_equals_symbol : Boolean =
    FunctionDefinitionAnnotation .mk (block) .contains_the_equals_symbol

  _contains_an_opening_parenthesis : Boolean =
    first_readable_line .line .contains (sc .opening_parenthesis_symbol)

  _remove_type_annotation_in_line (line : String) : String =
    line .replaceAll (sc .main_type_membership_regex , "")

  _class_name_and_type_parameters : String =
    skip_first_word (_remove_type_annotation_in_line (first_readable_line .line) )

  class_name : String =
    get_first_word (_class_name_and_type_parameters)

  remove_brackets_with (trimmed_text : String) : String =
    if trimmed_text .startsWith (sc .opening_bracket_symbol) and
      trimmed_text .endsWith (sc .closing_bracket_symbol)
    then trimmed_text .substring (sc .opening_bracket_symbol .length,
      trimmed_text .length - sc .closing_bracket_symbol .length)
    else trimmed_text

  remove_brackets (text : String) : String =
    remove_brackets_with (text .trim)

  type_parameters_and_bounds : Seq [String] =
    remove_brackets (skip_first_word (_class_name_and_type_parameters) )
      .split (sc .type_parameter_separation_regex)
      .toIndexedSeq
      .map (lambda parameter --> parameter .trim)
      .filter (lambda parameter --> not parameter .isEmpty)

  applies : Boolean =
    starts_with_prefix_and_space (sc .class_reserved_word) and
    not _contains_the_equals_symbol

  is_concrete : Boolean = applies and _contains_an_opening_parenthesis

  type_parameters : Seq [String] =
    type_parameters_and_bounds
       .map (lambda parameter --> get_first_word (parameter) )


end

