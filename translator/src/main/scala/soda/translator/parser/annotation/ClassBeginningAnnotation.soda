package soda.translator.parser.annotation

class ClassBeginningAnnotation
  extends
    BlockAnnotationParser

  abstract
    block : soda.translator.block.Block

  import
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.SodaConstant_

  identifier = BlockAnnotationEnum_ ().class_beginning

  sc = SodaConstant_ ()

  applies : Boolean =
    starts_with_prefix_and_space (sc.class_reserved_word) and
    not _contains_the_equals_symbol

  _contains_the_equals_symbol : Boolean =
    FunctionDefinitionAnnotation_ (block).contains_the_equals_symbol

  _contains_an_opening_parenthesis : Boolean =
    first_readable_line.line.contains (sc.opening_parenthesis_symbol)

  _class_name_and_type_parameters : String =
    skip_first_word (first_readable_line.line)

  class_name : String =
    get_first_word (_class_name_and_type_parameters)

  type_parameters_and_bounds : Seq [String] =
    remove_brackets (skip_first_word (_class_name_and_type_parameters) )
      .split (sc.parameter_separator_symbol)
      .toIndexedSeq
      .map ( lambda parameter --> parameter.trim)
      .filter ( lambda parameter --> not parameter.isEmpty)

  type_parameters : Seq [String] =
    type_parameters_and_bounds
      .map ( lambda parameter --> get_first_word (parameter) )

  remove_brackets (text : String) : String =
    remove_brackets_with (text.trim)

  remove_brackets_with (trimmed_text : String) : String =
    if trimmed_text.startsWith (sc.opening_bracket_symbol) and
      trimmed_text.endsWith (sc.closing_bracket_symbol)
    then trimmed_text.substring (sc.opening_bracket_symbol.length, trimmed_text.length - sc.closing_bracket_symbol.length)
    else trimmed_text

  is_concrete : Boolean = applies and _contains_an_opening_parenthesis

end

