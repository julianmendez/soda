package soda.translator.parser.annotation

class AnnotationFactory
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedBlock_
    soda.translator.block.Block
    soda.translator.block.BlockAnnotationEnum_

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      if block.block_annotation == BlockAnnotationEnum_ ().undefined
      then annotate (block)
      else block

  annotate (block : Block) : AnnotatedBlock =
    match block
      case b : AnnotatedBlock => b
      case x => _get_first_or_undefined (_find_candidates (x) ) (x)
    end

  update_block (original_content : AnnotatedBlock) (new_content : Block) : AnnotatedBlock =
    match original_content
      case b : FunctionDefinitionAnnotation => FunctionDefinitionAnnotation_ (new_content)
      case b : ClassBeginningAnnotation => ClassBeginningAnnotation_ (new_content)
      case b : ClassEndAnnotation => ClassEndAnnotation_ (new_content, b.references)
      case b : AbstractDeclarationAnnotation => AbstractDeclarationAnnotation_ (new_content)
      case b : ImportDeclarationAnnotation => ImportDeclarationAnnotation_ (new_content)
      case b : PackageDeclarationAnnotation => PackageDeclarationAnnotation_ (new_content)
      case b : ClassAliasAnnotation => ClassAliasAnnotation_ (new_content)
      case b : TheoremBlockAnnotation => TheoremBlockAnnotation_ (new_content)
      case b : ProofBlockAnnotation => ProofBlockAnnotation_ (new_content)
      case b : CommentAnnotation => CommentAnnotation_ (new_content)
      case b : TestDeclarationAnnotation => TestDeclarationAnnotation_ (new_content)
      case x => AnnotatedBlock_ (new_content.annotated_lines, x.block_annotation)
    end

  _detectors (block : Block) : Seq [BlockAnnotationParser] =
    Seq (
      FunctionDefinitionAnnotation_ (block),
      ClassBeginningAnnotation_ (block),
      ClassEndAnnotation_ (block, Seq [BlockAnnotationParser] () ),
      AbstractDeclarationAnnotation_ (block),
      ImportDeclarationAnnotation_ (block),
      PackageDeclarationAnnotation_ (block),
      ClassAliasAnnotation_ (block),
      TheoremBlockAnnotation_ (block),
      ProofBlockAnnotation_ (block),
      CommentAnnotation_ (block),
      TestDeclarationAnnotation_ (block)
    )

  _find_candidates (block : Block) : Seq [BlockAnnotationParser] =
    _detectors (block)
      .filter (lambda detector --> detector.applies)

  _get_first_or_undefined (candidates : Seq [BlockAnnotationParser] ) (block : Block) : AnnotatedBlock =
    if candidates.length == 1
    then candidates.head
    else AnnotatedBlock_ (block.annotated_lines, BlockAnnotationEnum_ ().undefined )

end

