package soda.translator.parser.annotation

class AnnotationFactory
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedBlock_
    soda.translator.block.Block
    soda.translator.block.BlockAnnotation
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.BlockAnnotationId

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      if block.block_annotation == BlockAnnotationEnum_ ().undefined
      then AnnotatedBlock_ (block.annotated_lines, get_annotation (block) )
      else block

  detectors (block: Block): Seq [BlockAnnotation] =
    Seq (
      FunctionDefinitionAnnotation_ (block),
      ClassBeginningAnnotation_ (block),
      ClassEndAnnotation_ (block),
      AbstractDeclarationAnnotation_ (block),
      ImportDeclarationAnnotation_ (block),
      PackageDeclarationAnnotation_ (block),
      ClassAliasAnnotation_ (block),
      TheoremBlockAnnotation_ (block),
      ProofBlockAnnotation_ (block),
      CommentAnnotation_ (block),
      TestDeclarationAnnotation_ (block)
    )

  find_candidates (block: Block): Seq [BlockAnnotationId] =
    detectors (block)
      .filter (detector -> detector.applies)
      .map (detector -> detector.identifier)

  get_annotation (block: Block): BlockAnnotationId =
    _get_first_or_undefined (find_candidates (block))

  _get_first_or_undefined (candidates: Seq [BlockAnnotationId]): BlockAnnotationId =
    if candidates.length == 1
    then candidates.head
    else BlockAnnotationEnum_ ().undefined

end

class AnnotationFactory_ ()
  extends
    AnnotationFactory

end

