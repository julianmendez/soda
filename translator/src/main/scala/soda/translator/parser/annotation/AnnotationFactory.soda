
class AnnotationFactory
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedBlock_
    soda.translator.block.Block
    soda.translator.block.BlockAnnotationEnum

  update_block (original_content : AnnotatedBlock) (new_content : Block) : AnnotatedBlock =
    match original_content
      case FunctionDefinitionAnnotation_ (b) ==> FunctionDefinitionAnnotation .mk (new_content)
      case ClassBeginningAnnotation_ (b) ==> ClassBeginningAnnotation .mk (new_content)
      case ClassEndAnnotation_ (b) (references) ==>
        ClassEndAnnotation .mk (new_content) (references)
      case AbstractDeclarationAnnotation_ (b) (references) ==>
        AbstractDeclarationAnnotation .mk (new_content) (references)
      case InductiveDeclarationAnnotation_ (b) ==>
        InductiveDeclarationAnnotation .mk (new_content)
      case ImportDeclarationAnnotation_ (b) ==> ImportDeclarationAnnotation .mk (new_content)
      case PackageDeclarationAnnotation_ (b) ==> PackageDeclarationAnnotation .mk (new_content)
      case ClassAliasAnnotation_ (b) ==> ClassAliasAnnotation .mk (new_content)
      case TheoremBlockAnnotation_ (b) ==> TheoremBlockAnnotation .mk (new_content)
      case DirectiveBlockAnnotation_ (b) ==> DirectiveBlockAnnotation .mk (new_content)
      case CommentAnnotation_ (b) ==> CommentAnnotation .mk (new_content)
      case TestDeclarationAnnotation_ (b) ==> TestDeclarationAnnotation .mk (new_content)
      case _otherwise ==>
        AnnotatedBlock .mk (new_content .annotated_lines) (original_content .block_annotation)

  _detectors (block : Block) : Seq [BlockAnnotationParser] =
    Seq (
      FunctionDefinitionAnnotation .mk (block) ,
      ClassBeginningAnnotation .mk (block) ,
      ClassEndAnnotation .mk (block) (Seq [BlockAnnotationParser] () ) ,
      AbstractDeclarationAnnotation .mk (block) (Seq [BlockAnnotationParser] () ) ,
      InductiveDeclarationAnnotation .mk (block) ,
      ImportDeclarationAnnotation .mk (block) ,
      PackageDeclarationAnnotation .mk (block) ,
      ClassAliasAnnotation .mk (block) ,
      TheoremBlockAnnotation .mk (block) ,
      DirectiveBlockAnnotation .mk (block) ,
      CommentAnnotation .mk (block) ,
      TestDeclarationAnnotation .mk (block)
    )

  _find_candidates (block : Block) : Seq [BlockAnnotationParser] =
    _detectors (block)
      .filter (lambda detector --> detector .applies)

  _get_first_or_undefined (candidates : Seq [BlockAnnotationParser] ) (block : Block)
      : AnnotatedBlock =
    if candidates .length == 1
    then candidates .head
    else AnnotatedBlock .mk (block .annotated_lines) (BlockAnnotationEnum .mk .undefined )

  annotate (block : Block) : AnnotatedBlock =
    match block
      case AnnotatedBlock_ (annotated_lines) (block_annotation) ==>
        AnnotatedBlock .mk (annotated_lines) (block_annotation)
      case _otherwise ==> _get_first_or_undefined (_find_candidates (block) ) (block)

  translate_for (block : AnnotatedBlock) : AnnotatedBlock =
    if block .block_annotation == BlockAnnotationEnum .mk .undefined
    then annotate (block)
    else block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

