package soda.translator.parser.annotation

class AnnotationFactory
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedBlock_
    soda.translator.block.Block
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.BlockAnnotationId

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      if block.block_annotation == BlockAnnotationEnum_ ().undefined
      then annotate (block)
      else block

  annotate (block: Block): AnnotatedBlock =
    _get_first_or_undefined (_find_candidates (block), block )

  _detectors (block: Block): Seq [BlockAnnotationParser] =
    Seq (
      FunctionDefinitionAnnotation_ (block),
      ClassBeginningAnnotation_ (block),
      ClassEndAnnotation_ (block),
      AbstractDeclarationAnnotation_ (block),
      ImportDeclarationAnnotation_ (block),
      PackageDeclarationAnnotation_ (block),
      ClassAliasAnnotation_ (block),
      TheoremBlockAnnotation_ (block),
      ProofBlockAnnotation_ (block),
      CommentAnnotation_ (block),
      TestDeclarationAnnotation_ (block)
    )

  _find_candidates (block: Block): Seq [BlockAnnotationParser] =
    _detectors (block)
      .filter (detector -> detector.applies)

  _get_first_or_undefined (candidates: Seq [BlockAnnotationParser], block: Block): AnnotatedBlock =
    if candidates.length == 1
    then candidates.head
    else AnnotatedBlock_ (block.annotated_lines, BlockAnnotationEnum_ ().undefined )

end

class AnnotationFactory_ ()
  extends
    AnnotationFactory

end

