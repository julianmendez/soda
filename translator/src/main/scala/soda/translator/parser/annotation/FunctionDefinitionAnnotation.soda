package soda.translator.parser.annotation

* FunctionDefinitionAnnotation
  extends BlockAnnotation = {

  + soda.translator.block.Block
  + soda.translator.block.Block_
  + soda.translator.block.BlockAnnotationEnum_
  + soda.translator.parser.SodaConstant_

  identifier = BlockAnnotationEnum_ ().function_definition

  symbol_at_the_end: String =
    SodaConstant_ ().space +
    SodaConstant_ ().function_definition_symbol

  synonym_at_the_end: String =
    SodaConstant_ ().space +
    SodaConstant_ ().function_definition_synonym

  symbol_in_the_middle: String =
    SodaConstant_ ().space +
    SodaConstant_ ().function_definition_symbol +
    SodaConstant_ ().space

  synonym_in_the_middle: String =
    SodaConstant_ ().space +
    SodaConstant_ ().function_definition_synonym +
    SodaConstant_ ().space

  tail_recursion_annotation: String =
    SodaConstant_ ().tail_recursion_annotation

  applies: Boolean =
    contains_the_equals_symbol and not is_a_class_declaration

  contains_the_equals_symbol: Boolean =
    block.readable_lines.nonEmpty and
    (
      (contains_one_line and block.readable_lines.head.line.trim.contains (symbol_in_the_middle) ) or
      (contains_one_line and block.readable_lines.head.line.trim.contains (synonym_in_the_middle) ) or
      (block.readable_lines.head.line.trim.endsWith (symbol_at_the_end) ) or
      (block.readable_lines.head.line.trim.endsWith (synonym_at_the_end) ) or
      (block.readable_lines.head.line.trim == tail_recursion_annotation)
    ) and
    not ( starts_with_prefix_and_space (SodaConstant_ ().class_reserved_word) or
          starts_with_prefix_and_space (SodaConstant_ ().class_abbreviation)
    )

  is_a_class_declaration: Boolean =
    (starts_with_prefix_and_space (SodaConstant_ ().class_reserved_word) or
      starts_with_prefix_and_space (SodaConstant_ ().class_abbreviation) ) and
    ends_with_space_and_suffix (SodaConstant_ ().class_open_symbol)

}

* FunctionDefinitionAnnotation_ (block: soda.translator.block.Block)
  extends FunctionDefinitionAnnotation

