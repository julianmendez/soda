
class FunctionDefinitionAnnotation
  extends
    BlockAnnotationParser

  abstract
    block : soda.translator.block.Block

  import
    soda.translator.block.BlockAnnotationEnum
    soda.translator.parser.SodaConstant
    soda.translator.replacement.ParserStateEnum
    soda.translator.replacement.Tokenizer

  identifier = BlockAnnotationEnum .mk .function_definition

  sc = SodaConstant .mk

  _symbol_at_the_end : String =
    sc .space +
    sc .function_definition_symbol

  _symbol_in_the_middle : String =
    sc .space +
    sc .function_definition_symbol +
    sc .space

  _plain_state = ParserStateEnum .mk .plain

  _contains_the_equals_symbol_in_token (token_text : String) : Boolean =
    (
      (token_text .contains (_symbol_in_the_middle) ) or
      (token_text .endsWith (_symbol_at_the_end) )
    )

  _contains_the_equals_symbol_in_line (line : String) : Boolean =
    Tokenizer .mk (line)
      .tokens
      .exists (lambda token -->
        token .parser_state == _plain_state and
        _contains_the_equals_symbol_in_token (token .text)
      )

  contains_the_equals_symbol : Boolean =
    block .readable_lines .nonEmpty and
    block .readable_lines
      .filter (lambda annotated_line --> not annotated_line .is_comment)
      .exists (lambda annotated_line -->
        _contains_the_equals_symbol_in_line (annotated_line .line) )

  _starts_with_valid_annotation_with (first_line_trimmed : String) : Boolean =
    (first_line_trimmed == sc .tail_recursion_annotation or
    first_line_trimmed == sc .override_annotation )

  starts_with_valid_annotation : Boolean =
    block .readable_lines .nonEmpty and
    _starts_with_valid_annotation_with (block .readable_lines .head .line .trim)

  _starts_with_def_reserved_word_with (first_line_trimmed : String) : Boolean =
    first_line_trimmed .startsWith (sc .def_reserved_word + sc .space)

  starts_with_def_reserved_word : Boolean =
    block .readable_lines .nonEmpty and
    _starts_with_def_reserved_word_with (block .readable_lines .head .line .trim)

  is_a_class_declaration : Boolean =
    starts_with_prefix_and_space (sc .class_reserved_word)

  is_a_theorem : Boolean =
    TheoremBlockAnnotation .mk (block) .applies

  is_a_directive : Boolean =
    DirectiveBlockAnnotation .mk (block) .applies

  applies : Boolean =
    not is_a_theorem and
    not is_a_directive and
    not is_a_class_declaration and
    (contains_the_equals_symbol or starts_with_valid_annotation or
      starts_with_def_reserved_word)

end

