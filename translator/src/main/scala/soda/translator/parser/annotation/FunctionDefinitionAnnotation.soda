package soda.translator.parser.annotation

class FunctionDefinitionAnnotation
  extends
    BlockAnnotationParser

  abstract
    block : soda.translator.block.Block

  import
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.SodaConstant_
    soda.translator.replacement.ParserStateEnum_
    soda.translator.replacement.Tokenizer_

  identifier = BlockAnnotationEnum_ ().function_definition

  sc = SodaConstant_ ()

  _symbol_at_the_end : String =
    sc.space +
    sc.function_definition_symbol

  _synonym_at_the_end : String =
    sc.space +
    sc.function_definition_synonym

  _symbol_in_the_middle : String =
    sc.space +
    sc.function_definition_symbol +
    sc.space

  _synonym_in_the_middle : String =
    sc.space +
    sc.function_definition_synonym +
    sc.space

  _plain_state = ParserStateEnum_ ().plain

  applies : Boolean =
    (contains_the_equals_symbol or _starts_with_valid_annotation) and not _is_a_class_declaration

  contains_the_equals_symbol : Boolean =
    block.readable_lines.nonEmpty and
    _contains_the_equals_symbol_with (block.readable_lines.head.line)

  _contains_the_equals_symbol_with (first_line : String) : Boolean =
    Tokenizer_ (first_line)
      .tokens
      .exists ( lambda token -->
        token.parser_state == _plain_state and
        _contains_the_equals_symbol_in_token (token.text)
      )

  _contains_the_equals_symbol_in_token (token_text : String) : Boolean =
    (
      (token_text.contains (_symbol_in_the_middle) ) or
      (token_text.contains (_synonym_in_the_middle) ) or
      (token_text.endsWith (_symbol_at_the_end) ) or
      (token_text.endsWith (_synonym_at_the_end) )
    )

  _starts_with_valid_annotation : Boolean =
    block.readable_lines.nonEmpty and
    _starts_with_valid_annotation_with (block.readable_lines.head.line.trim)

  _starts_with_valid_annotation_with (first_line_trimmed : String) : Boolean =
    ( first_line_trimmed == sc.tail_recursion_annotation or
      first_line_trimmed == sc.override_annotation )

  _is_a_class_declaration : Boolean =
    starts_with_prefix_and_space (sc.class_reserved_word)

end

