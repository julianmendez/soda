package soda.translator.parser.annotation

* FunctionDefinitionAnnotation
  extends BlockAnnotation = {

  + soda.translator.block.Block
  + soda.translator.block.Block_
  + soda.translator.block.BlockAnnotationEnum_
  + soda.translator.parser.SodaConstant_

  identifier = BlockAnnotationEnum_ ().function_definition

  sc = SodaConstant_ ()

  symbol_at_the_end: String =
    sc.space +
    sc.function_definition_symbol

  synonym_at_the_end: String =
    sc.space +
    sc.function_definition_synonym

  symbol_in_the_middle: String =
    sc.space +
    sc.function_definition_symbol +
    sc.space

  synonym_in_the_middle: String =
    sc.space +
    sc.function_definition_synonym +
    sc.space

  applies: Boolean =
    (contains_the_equals_symbol or starts_with_valid_annotation) and not is_a_class_declaration

  contains_the_equals_symbol: Boolean =
    block.readable_lines.nonEmpty and
    _contains_the_equals_symbol_with (block.readable_lines.head.line.trim)

  _contains_the_equals_symbol_with (first_line_trimmed: String): Boolean =
    (
      (contains_one_line and first_line_trimmed.contains (symbol_in_the_middle) ) or
      (contains_one_line and first_line_trimmed.contains (synonym_in_the_middle) ) or
      (first_line_trimmed.endsWith (symbol_at_the_end) ) or
      (first_line_trimmed.endsWith (synonym_at_the_end) )
    )

  starts_with_valid_annotation: Boolean =
    block.readable_lines.nonEmpty and
    _starts_with_valid_annotation_with (block.readable_lines.head.line.trim)

  _starts_with_valid_annotation_with (first_line_trimmed: String): Boolean =
    ( first_line_trimmed == sc.tail_recursion_annotation or
      first_line_trimmed == sc.override_annotation )

  is_a_class_declaration: Boolean =
    (starts_with_prefix_and_space (sc.class_reserved_word) or
      starts_with_prefix_and_space (sc.class_abbreviation) )

}

* FunctionDefinitionAnnotation_ (block: soda.translator.block.Block)
  extends FunctionDefinitionAnnotation

