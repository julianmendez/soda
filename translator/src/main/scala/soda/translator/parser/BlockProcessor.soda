package soda.translator.parser

/**
 * An instance of this class splits a String in blocks, applies a translator to them, and joins them again in a String.
 */

class BlockProcessor

  abstract
    translator: soda.translator.block.BlockSequenceTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.BlockSequenceTranslator
    soda.translator.parser.annotation.AnnotationFactory_

  new_line = "\n"

  double_new_line = new_line + new_line

  translator_with_preprocessor = PreprocessorSequenceTranslator_ (translator)

  translate (program: String): String =
    join_translated_blocks (
      translator_with_preprocessor.translate (
        split_blocks (program)
      )
    )

  split_blocks (program: String): Seq [AnnotatedBlock] =
    program
      .split (double_new_line)
      .toIndexedSeq
      .map (paragraph -> make_block (paragraph) )

  make_block (paragraph: String): AnnotatedBlock =
    AnnotationFactory_ ().annotate (
      BlockBuilder_ ().build (
        remove_empty_lines (paragraph.split (new_line).toIndexedSeq)
      )
    )

  translate_blocks (blocks: Seq [AnnotatedBlock] ): Seq [AnnotatedBlock] =
    translator.translate (blocks)

  join_translated_blocks (blocks: Seq [AnnotatedBlock] ): String =
    blocks
      .map (x -> x.contents)
      .mkString (double_new_line) + new_line

  remove_empty_lines (lines: Seq [String] ): Seq [String] =
    lines
      .filter (line -> line.trim.nonEmpty)

end

class BlockProcessor_ (translator: soda.translator.block.BlockSequenceTranslator)
  extends
    BlockProcessor

end

