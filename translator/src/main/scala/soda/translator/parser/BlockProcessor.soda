package soda.translator.parser

/**
 * An instance of this class splits a String in blocks, applies a translator to them, and joins them again in a String.
 */
* BlockProcessor = {

  + soda.lib.SomeSD_
  + soda.translator.block.AnnotatedBlock
  + soda.translator.block.AnnotatedBlock_
  + soda.translator.block.BlockTranslator
  + soda.translator.block.Block
  + soda.translator.block.BlockAnnotationEnum_
  + soda.translator.parser.BlockBuilder_

  has translator: BlockTranslator

  new_line = "\n"

  double_new_line = new_line + new_line

  translate (program: String): String =
    SomeSD_ (program)
      .map (split_blocks)
      .map (translate_blocks)
      .map (join_translated_blocks)
      .value

  split_blocks (program: String): Seq [AnnotatedBlock] =
    program
      .split (double_new_line)
      .toIndexedSeq
      .map (paragraph -> make_block (paragraph) )

  make_block (paragraph: String): AnnotatedBlock =
    BlockBuilder_ ().build (
      remove_empty_lines (paragraph.split (new_line).toIndexedSeq), BlockAnnotationEnum_ ().undefined
    )

  translate_blocks (blocks: Seq [AnnotatedBlock]): Seq [AnnotatedBlock] =
    blocks.map (block -> translator.translate (block) )

  join_translated_blocks (blocks: Seq [AnnotatedBlock]): String =
    blocks
      .map (x -> x.contents)
      .mkString (double_new_line) + new_line

  remove_empty_lines (lines: Seq [String]): Seq [String] =
    lines
      .filter (line -> line.trim.nonEmpty)

}

* BlockProcessor_ (translator: soda.translator.block.BlockTranslator)
  extends BlockProcessor

