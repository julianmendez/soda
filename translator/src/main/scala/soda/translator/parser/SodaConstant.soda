
class SodaConstant

  space = " "

  new_line = "\n"

  function_definition_symbol = "="

  type_membership_symbol = ":"

  function_arrow_symbol = "->"

  function_arrow_unicode_symbol = "\u2192"

  lambda_arrow_symbol = "-->"

  lambda_arrow_unicode_symbol = "\u27F6"

  case_arrow_symbol = "==>"

  case_arrow_unicode_symbol = "\u27F9"

  parameter_definition_symbol = ":="

  parameter_definition_unicode_symbol = "\u2254"

  any_reserved_word = "any"

  lambda_reserved_word = "lambda"

  lambda_unicode_symbol = "\u03BB"

  if_reserved_word = "if"

  then_reserved_word = "then"

  else_reserved_word = "else"

  match_reserved_word = "match"

  case_reserved_word = "case"

  class_reserved_word = "class"

  class_proposed_unicode_symbol = "\u23BE"

  extends_reserved_word = "extends"

  abstract_reserved_word = "abstract"

  class_end_reserved_word = "end"

  class_end_proposed_unicode_symbol = "\u23BF"

  this_reserved_word = "this"

  subtype_reserved_word = "subtype"

  supertype_reserved_word = "supertype"

  false_reserved_word = "false"

  false_unicode_symbol = "\u22A5"

  true_reserved_word = "true"

  true_unicode_symbol = "\u22A4"

  not_reserved_word = "not"

  not_unicode_symbol = "\u00AC"

  and_reserved_word = "and"

  and_unicode_symbol = "\u2227"

  or_reserved_word = "or"

  or_unicode_symbol = "\u2228"

  package_reserved_word = "package"

  import_reserved_word = "import"

  theorem_reserved_word = "theorem"

  proof_reserved_word = "proof"

  constructor_suffix = "_"

  test_special_function = "test"

  subtype_abbreviation = "<:"

  supertype_abbreviation = ">:"

  opening_parenthesis_symbol = "("

  closing_parenthesis_symbol = ")"

  opening_bracket_symbol = "["

  closing_bracket_symbol = "]"

  parameter_separator_symbol = ","

  addition_symbol = "+"

  subtraction_symbol = "-"

  multiplication_symbol = "*"

  division_symbol = "/"

  modulo_symbol = "%"

  equals_symbol = "=="

  less_than_symbol = "<"

  less_than_or_equal_to_symbol = "<="

  less_than_or_equal_to_unicode_symbol = "\u2264"

  greater_than_symbol = ">"

  greater_than_or_equal_to_symbol = ">="

  greater_than_or_equal_to_unicode_symbol = "\u2265"

  documentation_comment_opening_symbol = "/**"

  comment_opening_symbol = "/*"

  comment_closing_symbol = "*/"

  comment_line_symbol = "*"

  tail_recursion_annotation = "@tailrec"

  override_annotation = "@override"

  new_annotation = "@new"

  private_function_prefix = "_"

  soda_reserved_words_words_only : Seq [String] =
    Seq (
      lambda_reserved_word,
      any_reserved_word,
      if_reserved_word,
      then_reserved_word,
      else_reserved_word,
      match_reserved_word,
      case_reserved_word,
      class_reserved_word,
      extends_reserved_word,
      abstract_reserved_word,
      class_end_reserved_word,
      this_reserved_word,
      subtype_reserved_word,
      supertype_reserved_word,
      false_reserved_word,
      true_reserved_word,
      not_reserved_word,
      and_reserved_word,
      or_reserved_word,
      package_reserved_word,
      import_reserved_word,
      theorem_reserved_word,
      proof_reserved_word
    )

  soda_reserved_words_symbols_only : Seq [String] =
    Seq (
      function_definition_symbol,
      type_membership_symbol,
      function_arrow_symbol,
      case_arrow_symbol,
      parameter_definition_symbol,
      addition_symbol,
      subtraction_symbol,
      multiplication_symbol,
      division_symbol,
      modulo_symbol,
      equals_symbol,
      less_than_symbol,
      less_than_or_equal_to_symbol,
      greater_than_symbol,
      greater_than_or_equal_to_symbol,
      subtype_abbreviation,
      supertype_abbreviation
    )

  soda_reserved_words_annotations_only : Seq [String] =
    Seq (
      tail_recursion_annotation,
      override_annotation,
      new_annotation
    )

  soda_reserved_words : Seq [String] =
    soda_reserved_words_words_only.++ (soda_reserved_words_symbols_only.++ (soda_reserved_words_annotations_only) )

  soda_unicode_symbols : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 (lambda_unicode_symbol , lambda_reserved_word),
      Tuple2 (lambda_arrow_unicode_symbol , lambda_arrow_symbol),
      Tuple2 (function_arrow_unicode_symbol , function_arrow_symbol),
      Tuple2 (case_arrow_unicode_symbol , case_arrow_symbol),
      Tuple2 (false_unicode_symbol , false_reserved_word),
      Tuple2 (true_unicode_symbol , true_reserved_word),
      Tuple2 (not_unicode_symbol , not_reserved_word),
      Tuple2 (and_unicode_symbol , and_reserved_word),
      Tuple2 (or_unicode_symbol , or_reserved_word),
      Tuple2 (less_than_or_equal_to_unicode_symbol , less_than_or_equal_to_symbol),
      Tuple2 (greater_than_or_equal_to_unicode_symbol , greater_than_or_equal_to_symbol),
      Tuple2 (parameter_definition_unicode_symbol , parameter_definition_symbol),
      Tuple2 (class_proposed_unicode_symbol , class_reserved_word),
      Tuple2 (class_end_proposed_unicode_symbol , class_end_reserved_word)
    )

end

