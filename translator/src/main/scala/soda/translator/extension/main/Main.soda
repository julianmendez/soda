
/**
 * This is the main entry point.
 */

class Main
  extends
    soda.translator.extension.common.Extension

  import
    soda.translator.extension.common.Extension

  abstract

  help = soda.translator.extension.help.Help .mk

  extensions : Map [String] [Extension] =
    Seq (
      ("." , soda.translator.extension.toscala.TranslatorToScala .mk ),
      ("scala" , soda.translator.extension.toscala.TranslatorToScala .mk ),
      ("lean" , soda.translator.extension.tolean.TranslatorToLean .mk ),
      ("coq" , soda.translator.extension.tocoq.TranslatorToCoq .mk ),
      ("doc" , soda.translator.extension.todoc.TranslatorToDoc .mk ),
      ("manual" , soda.translator.extension.help.Manual .mk ),
      ("license" , soda.translator.extension.help.License .mk ),
      ("help" , help ),
      ("-h" , help ),
      ("--help" , help ),
      ("main" , this )
    ) .toMap

  execute_for (arguments : Seq [String] ) : Boolean =
    if arguments .isEmpty
    then help .execute (arguments)
    else
      extensions
        .getOrElse (arguments .head , help)
        .execute (arguments .tail)

  execute : Seq [String] -> Boolean =
    lambda arguments -->
      execute_for (arguments)

  main (arguments : Array [String] ) : Unit =
    execute (arguments .toSeq)

end

