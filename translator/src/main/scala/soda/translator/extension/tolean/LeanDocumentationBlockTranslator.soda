
class LeanDocumentationBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder
    soda.translator.parser.SodaConstant
    soda.translator.parser.annotation.CommentAnnotation
    soda.translator.parser.annotation.CommentAnnotation_
    soda.translator.parser.tool.CommentDelimiterRemover

  _sc = SodaConstant .mk

  _tc = TranslationConstantToLean .mk

  _comment_line_prefix = _sc .comment_line_symbol + _sc .space

  _prepend (prefix : String) (content : Seq [String] ) : Seq [String] =
    if content .isEmpty
    then Seq [String] (prefix)
    else Seq [String] (prefix + content .head) .++ (content .tail)

  _append (suffix : String) (content : Seq [String] ) : Seq [String] =
    content .:+ (suffix)

  _translate_with_symbol (opening_symbol : String) (lines : Seq [String] ) : Seq [String] =
    _append (
      _tc .lean_comment_closing_symbol) (
      _prepend (opening_symbol) (
        CommentDelimiterRemover .mk
          .remove_comment_delimiters (lines)
      )
    )

  _get_opening_symbol (line : String) : String =
    if (line .trim .startsWith (_sc .documentation_comment_opening_symbol) )
    then _tc .lean_opening_documentation
    else _tc .lean_comment_opening_symbol

  _translate_lines (lines : Seq [String] ) : Seq [String] =
    if (lines .isEmpty)
    then lines
    else _translate_with_symbol (_get_opening_symbol (lines .head) ) (lines)

  _translate_comment (block : CommentAnnotation) : CommentAnnotation =
    CommentAnnotation_ (
      BlockBuilder .mk .build (
        _translate_lines (block .lines)
      )
    )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case CommentAnnotation_ (block) ==> _translate_comment (CommentAnnotation_ (block) )
      case _otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

