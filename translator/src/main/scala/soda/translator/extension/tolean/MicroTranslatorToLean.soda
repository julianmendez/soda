
/**
 * This class translates Soda snippets into Lean snippets.
 */

class MicroTranslatorToLean
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.BlockAnnotationId
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.block.ConditionalBlockTranslator_
    soda.translator.blocktr.TokenReplacement_
    soda.translator.blocktr.TokenizedBlockTranslator_
    soda.translator.replacement.Token

  _tc = TranslationConstantToLean_ ()

  _function_definition = BlockAnnotationEnum_ () .function_definition

  _class_beginning = BlockAnnotationEnum_ () .class_beginning

  _abstract_declaration = BlockAnnotationEnum_ () .abstract_declaration

  _class_alias = BlockAnnotationEnum_ () .class_alias

  _test_declaration = BlockAnnotationEnum_ () .test_declaration

  functions_and_tests : Seq [BlockAnnotationId] =
    Seq (_function_definition, _test_declaration)

  declarations : Seq [BlockAnnotationId] =
    Seq (
      _function_definition , _class_beginning , _abstract_declaration , _class_alias ,
      _test_declaration
    )

  try_definition : Token -> String =
    lambda token -->
      LeanDefinitionLineTranslator_ (token .text) .translation

  _translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LeanDocumentationBlockTranslator_ () ,
        LeanDotNotationBlockTranslator_ () ,
        LeanMatchCaseBlockTranslator_ () ,
        LeanDefinitionBlockTranslator_ () ,
        LeanClassConstructorBlockTranslator_ () ,
        LeanClassDeclarationBlockTranslator_ () ,
        LeanPackageDeclarationBlockTranslator_ () ,
        LeanClassEndBlockTranslator_ () ,
        LeanImportDeclarationBlockTranslator_ () ,
        LeanTheoremBlockTranslator_ () ,
        LeanDirectiveBlockTranslator_ () ,
        ConditionalBlockTranslator_ (functions_and_tests ,
          TokenizedBlockTranslator_ (try_definition) ) ,
        ConditionalBlockTranslator_ (functions_and_tests ,
          TokenReplacement_ () .replace_words (_tc .function_symbols_translation) ) ,
        ConditionalBlockTranslator_ (declarations ,
          TokenReplacement_ () .replace_symbols (_tc .type_symbols_translation) ) ,
        ConditionalBlockTranslator_ (declarations ,
          TokenReplacement_ () .replace_words (_tc .type_translation) )
      )
    )

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      _translation_pipeline .translate (block)

end

