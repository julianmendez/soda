
/**
 * This class translates Soda snippets into Lean snippets.
 */

class MicroTranslatorToLean
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum
    soda.translator.block.BlockAnnotationId
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.block.ConditionalBlockTranslator
    soda.translator.blocktr.TokenReplacement
    soda.translator.blocktr.TokenizedBlockTranslator
    soda.translator.replacement.Token

  _tc = TranslationConstantToLean .mk

  _function_definition = BlockAnnotationEnum .mk .function_definition

  _class_beginning = BlockAnnotationEnum .mk .class_beginning

  _abstract_declaration = BlockAnnotationEnum .mk .abstract_declaration

  _class_alias = BlockAnnotationEnum .mk .class_alias

  _test_declaration = BlockAnnotationEnum .mk .test_declaration

  functions_and_tests : Seq [BlockAnnotationId] =
    Seq (_function_definition, _test_declaration)

  declarations : Seq [BlockAnnotationId] =
    Seq (
      _function_definition , _class_beginning , _abstract_declaration , _class_alias ,
      _test_declaration
    )

  try_definition : Token -> String =
    lambda token -->
      LeanDefinitionLineTranslator .mk (token .text) .translation

  _translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LeanDocumentationBlockTranslator .mk ,
        LeanDotNotationBlockTranslator .mk ,
        LeanMatchCaseBlockTranslator .mk ,
        LeanDefinitionBlockTranslator .mk ,
        LeanClassConstructorBlockTranslator .mk ,
        LeanClassDeclarationBlockTranslator .mk ,
        LeanPackageDeclarationBlockTranslator .mk ,
        LeanClassEndBlockTranslator .mk ,
        LeanClassAliasBlockTranslator .mk ,
        LeanImportDeclarationBlockTranslator .mk ,
        LeanTheoremBlockTranslator .mk ,
        LeanDirectiveBlockTranslator .mk ,
        ConditionalBlockTranslator .mk (functions_and_tests) (
          TokenizedBlockTranslator .mk (try_definition) ) ,
        ConditionalBlockTranslator .mk (functions_and_tests) (
          TokenReplacement .mk .replace_words (_tc .function_symbols_translation) ) ,
        ConditionalBlockTranslator .mk (declarations) (
          TokenReplacement .mk .replace_symbols (_tc .type_symbols_translation) ) ,
        ConditionalBlockTranslator .mk (declarations) (
          TokenReplacement .mk .replace_words (_tc .type_translation) )
      )
    )

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      _translation_pipeline .translate (block)

end

