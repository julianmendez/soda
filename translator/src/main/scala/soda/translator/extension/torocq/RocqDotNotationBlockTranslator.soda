
class RocqDotNotationBlockTranslator
  extends
    soda.translator.blocktr.TokenizedBlockTranslator

  abstract

  import
    soda.translator.parser.SodaConstant
    soda.translator.replacement.Token

  _sc = SodaConstant .mk

  _tc = TranslationConstantToRocq .mk

  fold_while = soda.lib.FoldWhile .mk

  _applies_dot_notation (word : String) : Boolean =
    word .startsWith (_sc .dot_notation_symbol) and
      word .length > _sc .dot_notation_symbol .length

  _translate_dot_notation (word : String) : String =
    _tc .rocq_dot_notation_symbol +
    _tc .rocq_opening_parenthesis +
    word .substring (_sc .dot_notation_symbol .length) +
    _tc .rocq_closing_parenthesis

  _add_parentheses_if_necessary (word : String) : String =
    if _applies_dot_notation (word)
    then _translate_dot_notation (word)
    else word

  _add_parentheses_to_dotted_words (line : String) : String =
    line
      .split (_sc .space)
      .map (lambda word --> _add_parentheses_if_necessary (word) )
      .mkString (_sc .space)

  _add_space_if_necessary (original : String ) (text : String) : String =
    if (original .endsWith (_sc .space) )
    then text + _sc .space
    else text

  replace_token : Token -> String =
    lambda token -->
      _add_space_if_necessary (token .text) (
        _add_parentheses_to_dotted_words (token .text)
      )

end

