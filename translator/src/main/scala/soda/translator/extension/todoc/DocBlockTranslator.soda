
class DocBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder
    soda.translator.parser.SodaConstant
    soda.translator.parser.annotation.CommentAnnotation
    soda.translator.parser.annotation.CommentAnnotation_
    soda.translator.parser.tool.CommentDelimiterRemover

  _tc = TranslationConstantToDoc .mk

  _prepend (prefix : String) (content : Seq [String] ) : Seq [String] =
    if content .isEmpty
    then Seq [String] (prefix)
    else Seq [String] (prefix + content .head) .++ (content .tail)

  _append (suffix : String) (content : Seq [String] ) : Seq [String] =
    content .:+ (suffix)

  _add_end_and_begin (lines : Seq [String] ) : Seq [String] =
    _append (_tc .doc_closing_comment_translation) (
      _prepend (_tc .doc_opening_comment_translation) (lines)
    )

  _translate_comment (block : CommentAnnotation) : CommentAnnotation =
    CommentAnnotation .mk (
      BlockBuilder .mk .build (
        _add_end_and_begin (
          CommentDelimiterRemover .mk
            .remove_comment_delimiters (block .lines)
        )
      )
    )

  _translate_source_code (block : AnnotatedBlock) : CommentAnnotation =
    CommentAnnotation .mk (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case CommentAnnotation_ (block) ==> _translate_comment (CommentAnnotation_ (block) )
      case _otherwise ==> _translate_source_code (annotated_block)

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

