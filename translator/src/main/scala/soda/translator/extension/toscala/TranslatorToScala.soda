
class TranslatorToScalaConstant

  abstract

  import
    soda.translator.parser.BlockProcessor
    soda.translator.block.DefaultBlockSequenceTranslator
    java.io.File

  soda_extension : String = ".soda"

  scala_extension : String = ".scala"

  default_argument = "."

  package_file_prefix : String = "Package"

  package_file_name : String = package_file_prefix + soda_extension

  package_scala_file_name : String = package_file_prefix + scala_extension

  file_separator : String = File .separator

  default_prelude : String = ""

  new_line : String = "\n"

  append_separation : String = new_line + new_line

  prelude_file_body : String = new_line + append_separation

  single_file_option_1 = "-s"

  single_file_option_2 = "--single"

  translator =
    BlockProcessor .mk (
      DefaultBlockSequenceTranslator .mk (
        MicroTranslatorToScala .mk
      )
    )

end

class FileNamePair

  abstract
    input_file_name : String
    output_file_name : String

end

class IndividualProcessor

  import
    soda.translator.io.SimpleFileReader
    soda.translator.io.SimpleFileWriter
    java.io.File

  tc = TranslatorToScalaConstant .mk

  reader = SimpleFileReader .mk

  writer = SimpleFileWriter .mk

  _is_a_prelude_file (input_file_name : String) : Boolean =
    tc .package_file_name == ( ( @new File (input_file_name) )  .getName)

  _get_prelude_with (prelude_file : File) : String =
    if prelude_file .exists
    then (reader .read_file (prelude_file .getAbsolutePath) ) + tc .append_separation
    else tc .default_prelude

  _get_prelude_file (input_file_name : String) : File =
    @new File ( @new File (input_file_name)  .getParentFile , tc .package_file_name )

  _get_prelude (input_file_name : String) : String =
    _get_prelude_with (_get_prelude_file (input_file_name) )

  _read_input_with_prelude (input_file_name : String) : String =
    if _is_a_prelude_file (input_file_name)
    then reader .read_file (input_file_name) + tc .prelude_file_body
    else _get_prelude (input_file_name) + reader .read_file (input_file_name)

  get_input_output_file_names (input_name : String) : FileNamePair =
    if input_name .endsWith (tc .soda_extension)
    then FileNamePair .mk (input_name) (input_name .substring (0 ,
      input_name .length - tc .soda_extension .length) + tc .scala_extension)
    else FileNamePair .mk (input_name + tc .soda_extension) (input_name + tc .scala_extension)

  _translate_with_input (input : String) (output_file_name : String) : Boolean =
    writer .write_file (output_file_name) (content := tc .translator .translate (input) )

  translate (input_file_name : String) (output_file_name : String) : Boolean =
    _translate_with_input (_read_input_with_prelude (input_file_name) ) (output_file_name)

  process_soda_file_with (pair : FileNamePair) : Boolean =
    translate (pair .input_file_name) (pair .output_file_name)

  process_soda_file (file : File) : Boolean =
    process_soda_file_with (get_input_output_file_names (file .getAbsolutePath) )

end

class PackageProcessor

  import
    soda.translator.io.SimpleFileReader
    soda.translator.io.SimpleFileWriter
    java.io.File

  tc = TranslatorToScalaConstant .mk

  reader = SimpleFileReader .mk

  writer = SimpleFileWriter .mk

  get_input_output_file_names (input_name : String) (parent_name : String) : FileNamePair =
    if input_name .endsWith (tc .soda_extension)
    then FileNamePair .mk (input_name) (parent_name + tc .file_separator +
      tc .package_scala_file_name )
    else FileNamePair .mk (input_name + tc .soda_extension) (input_name + tc .scala_extension)

  _translate_append_with_input (input : String) (output_file_name : String) : Boolean =
    writer .append_file (output_file_name) (content := tc .new_line +
      tc .translator .translate (input) + tc .new_line)

  translate_append (input_file_name : String) (output_file_name : String) : Boolean =
    _translate_append_with_input (reader .read_file (input_file_name) ) (output_file_name)

  process_soda_file_with (pair : FileNamePair) : Boolean =
    translate_append (pair .input_file_name) (pair .output_file_name)

  process_soda_file (file : File) : Boolean =
    process_soda_file_with (
      get_input_output_file_names (file .getAbsolutePath) (file .getParent) )

end

/**
 * This translates Soda source code to Scala source code.
 */

class TranslatorToScala
  extends
    soda.translator.extension.common.Extension

  import
    soda.translator.io.DirectoryProcessor
    soda.translator.io.SimpleFileReader
    soda.translator.io.SimpleFileWriter
    java.io.File

  tc = TranslatorToScalaConstant .mk

  reader = SimpleFileReader .mk

  writer = SimpleFileWriter .mk

  process_soda_file_with_package_option (file : File) : Boolean =
    if file .getName == tc .package_file_name
    then IndividualProcessor .mk .process_soda_file (file)
    else PackageProcessor .mk .process_soda_file (file)

  _process_directory_with_package_option (start : String) : Boolean =
    DirectoryProcessor .mk (start) (process_soda_file_with_package_option) .process ()

  _process_directory_with_single_file_option (start : String) : Boolean =
    DirectoryProcessor .mk (start) (IndividualProcessor .mk .process_soda_file) .process ()

  _is_single_file_option (s : String) : Boolean =
    (s == tc .single_file_option_1) or (s == tc .single_file_option_2)

  execute_for (arguments : Seq [String] ) : Boolean =
    match arguments .length
      case 0 ==> _process_directory_with_package_option (tc .default_argument)
      case 1 ==> _process_directory_with_package_option (arguments .apply (0) )
      case 2 ==>
        if _is_single_file_option (arguments .apply (0) )
        then _process_directory_with_single_file_option (arguments .apply (1) )
        else IndividualProcessor .mk .translate (arguments .apply (0) ) (arguments .apply (1) )
      case 3 ==>
        if _is_single_file_option (arguments .apply (0) )
        then IndividualProcessor .mk .translate (arguments .apply (1) ) (arguments .apply (2) )
        else false
      case _otherwise ==> false

  execute : Seq [String] -> Boolean =
    lambda arguments -->
      execute_for (arguments)

end

