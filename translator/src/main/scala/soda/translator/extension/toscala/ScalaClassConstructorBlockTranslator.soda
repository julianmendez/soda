
class ScalaClassConstructorBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.AbstractDeclarationAnnotation
    soda.translator.parser.annotation.AbstractDeclarationAnnotation_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.ClassEndAnnotation
    soda.translator.parser.annotation.ClassEndAnnotation_

  _sc = SodaConstant_ ()

  _tc = TranslationConstantToScala_ ()

  _sp : String = _tc .scala_space

  _get_initial_spaces_with (line : String) : String =
    line .takeWhile (lambda ch --> ch .isSpaceChar)

  _get_first_line (block : AnnotatedBlock) : String =
    block .lines .headOption .getOrElse ("")

  _get_initial_spaces (block : AnnotatedBlock) : String =
    _get_initial_spaces_with (_get_first_line (block) )

  _translate_type_symbols (line : String) : String =
    line
      .replaceAll (_sc .type_parameter_separation_regex ,
        _tc .scala_type_parameter_separator_symbol + _sp)
      .replaceAll (_sc .subtype_reserved_word , _tc .scala_subtype_symbol)
      .replaceAll (_sc .supertype_reserved_word , _tc .scala_supertype_symbol)
      .replaceAll (_sc .function_arrow_symbol , _tc .scala_function_arrow_symbol)

  _translate_to_apply (line : String) : String =
    line
      .replaceAll (_sc .type_declaration_colon_regex , "")

  _get_as_parameter_list (parameters : Seq [String] ) : String =
    if parameters .isEmpty
    then ""
    else _sp + _tc .scala_opening_bracket +
      parameters .mkString (_tc .scala_type_parameter_separator_symbol + _sp) +
       _tc .scala_closing_bracket

  _get_abstract_functions (references : Seq [AnnotatedBlock] ) : Seq [String] =
    references
      .flatMap (lambda block --> _get_as_abstract_declaration_annotation (block) )
      .flatMap (lambda block --> block .abstract_functions)
      .map (lambda annotated_line --> _translate_type_symbols (annotated_line .line) .trim )

  _get_abstract_functions_to_apply (abstract_functions : Seq [String] ) : Seq [String] =
     abstract_functions
      .map (lambda line --> _translate_to_apply (line) .trim )

  _get_constructor_params (beginning : ClassBeginningAnnotation)
    (functions : Seq [String] ) : String =
    _translate_type_symbols (_get_as_parameter_list (beginning .type_parameters_and_bounds) ) +
    _sp +
    _tc .scala_opening_parenthesis +
    functions .mkString (_tc .scala_type_parameter_separator_symbol + _sp) +
    _tc .scala_closing_parenthesis

  _get_constructor_params_to_apply (beginning : ClassBeginningAnnotation)
    (functions : Seq [String] ) : String =
    _tc .scala_opening_parenthesis +
    functions .mkString (_tc .scala_type_parameter_separator_symbol + _sp) +
    _tc .scala_closing_parenthesis

  _get_params_if_non_empty (functions : Seq [String] ) : String =
    if (functions .nonEmpty)
    then
      _tc .scala_opening_parenthesis +
      functions .mkString (
        _tc .scala_closing_parenthesis + _sp + _tc .scala_opening_parenthesis
      ) +
      _tc .scala_closing_parenthesis
    else ""

  _get_constructor_declaration (beginning : ClassBeginningAnnotation)
      (functions : Seq [String] ) : String =
    _get_initial_spaces (beginning) +
    _tc .class_declaration_translation_at_beginning_with_paren + _sp +
    beginning .class_name + _sc .constructor_suffix +
    _get_constructor_params (beginning) (functions) + _sp +
    _tc .scala_extends_translation + _sp +
    beginning .class_name + _get_as_parameter_list (beginning .type_parameters)

  _remove_unnecessary_spaces (line : String) : String =
    line .replaceAll (_sc .some_blanks_regex , _sp)

  _get_default_constructor_object_line (beginning : ClassBeginningAnnotation) : String =
    _tc .scala_object_reserved_word + _sp +
    beginning .class_name + _sp + _tc .scala_opening_brace

  _get_default_constructor_def_line (beginning : ClassBeginningAnnotation)
        (functions : Seq [String] ) : String =
    _tc .scala_def_reserved_word + _sp + _sc .default_constructor_function + _sp +
    _translate_type_symbols (_get_as_parameter_list (beginning .type_parameters_and_bounds) ) +
    _sp + _get_params_if_non_empty (functions) + _sp + _tc .scala_type_membership_symbol + _sp +
    beginning .class_name + _sp +
    _translate_type_symbols (_get_as_parameter_list (beginning .type_parameters) ) + _sp +
    _tc .scala_equals_symbol

  _get_default_constructor_body_line (beginning : ClassBeginningAnnotation)
      (functions : Seq [String] ) : String  =
    beginning .class_name + _sc .constructor_suffix + _sp +
    _translate_type_symbols (_get_as_parameter_list (beginning .type_parameters) ) + _sp +
    _get_constructor_params_to_apply (beginning) (_get_abstract_functions_to_apply (functions) )

  _get_default_constructor_function (beginning : ClassBeginningAnnotation)
       (functions : Seq [String] ) : String =
    _get_initial_spaces (beginning) +
    _get_default_constructor_object_line (beginning) +
    _tc .scala_new_line + _get_initial_spaces (beginning) + _sp + _sp +
    _remove_unnecessary_spaces (
      _get_default_constructor_def_line (beginning) (functions) ) +
    _tc .scala_new_line + _get_initial_spaces (beginning) + _sp + _sp + _sp + _sp +
    _remove_unnecessary_spaces (
      _get_default_constructor_body_line (beginning) (functions) ) +
    _tc .scala_new_line +
    _get_initial_spaces (beginning) + _tc .scala_closing_brace

  _get_as_abstract_declaration_annotation (block : AnnotatedBlock)
      : Option [AbstractDeclarationAnnotation] =
    match block
      case AbstractDeclarationAnnotation_ (b , references) ==>
        Some (AbstractDeclarationAnnotation_ (b , references) )
      case _otherwise ==> None

  _translate_block_with_abstract_beginning_and_fun (beginning : ClassBeginningAnnotation)
      (block : ClassEndAnnotation) (abstract_functions : Seq [String] ) : ClassEndAnnotation =
    ClassEndAnnotation_ (
      BlockBuilder_ () .build (
        block .lines .++ (
          Seq [String] (
            "" ,
            _get_constructor_declaration (beginning) (abstract_functions) ,
            "" ,
            _get_default_constructor_function (beginning) (abstract_functions)
          )
        )
      ),
      block .references
    )

  _translate_block_with_abstract_beginning (beginning : ClassBeginningAnnotation)
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    _translate_block_with_abstract_beginning_and_fun (beginning) (block) (
      _get_abstract_functions (block .references) )

  _translate_block_with_beginning (beginning : ClassBeginningAnnotation)
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    if beginning .is_concrete
    then block
    else _translate_block_with_abstract_beginning (beginning) (block)

  _translate_block_with (maybe_beginning : Option [ClassBeginningAnnotation] )
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    if maybe_beginning .isEmpty
    then block
    else _translate_block_with_beginning (maybe_beginning .get) (block)

  _get_as_class_beginning_annotation (annotated_block : AnnotatedBlock)
      : Option [ClassBeginningAnnotation] =
    match annotated_block
      case ClassBeginningAnnotation_ (b) ==> Some (ClassBeginningAnnotation_ (b) )
      case _otherwise ==> None

  _get_class_beginning (references : Seq [AnnotatedBlock] )
      : Option [ClassBeginningAnnotation] =
    references
      .flatMap (lambda block --> _get_as_class_beginning_annotation (block) )
      .headOption

  _translate_block (block : ClassEndAnnotation) : ClassEndAnnotation =
    _translate_block_with (_get_class_beginning (block .references) ) (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassEndAnnotation_ (block , references) ==>
        _translate_block (ClassEndAnnotation_ (block , references) )
      case _otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

