package soda.translator.extension.toscala

* ClassEndBlockTranslator
  extends soda.translator.block.BlockTranslator =

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_

  tc = TranslationConstantToScala_ ()

  _labels = BlockAnnotationEnum_ ()

  translate (block: AnnotatedBlock): AnnotatedBlock =
    if block.block_annotation == _labels.class_end
    then _translate_block (block)
    else block

  _translate_block (block: AnnotatedBlock): AnnotatedBlock =
    if is_class_end (block)
    then BlockBuilder_ ().build ( Seq [String] (tc.scala_class_end_symbol), block.block_annotation)
    else block

  get_first_line_trimmed (block: AnnotatedBlock): String =
    block.lines.headOption.getOrElse ("").trim

  is_class_end (block: AnnotatedBlock): Boolean =
    _is_class_end_with (get_first_line_trimmed (block) )

  _is_class_end_with (line: String): Boolean =
    line == tc.class_end_reserved_word or
    line == tc.class_end_symbol

end

* ClassEndBlockTranslator_ ()
  extends ClassEndBlockTranslator

