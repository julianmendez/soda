package soda.translator.extension.toscala

class ImportDeclarationBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedLine
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_

  space = " "

  tc = TranslationConstantToScala_ ()

  scala_import_declaration_pattern =
    tc.scala_import_declaration + space

  _labels = BlockAnnotationEnum_ ()

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      if block.block_annotation == _labels.import_declaration
      then _translate_block (block)
      else block

  _translate_block (block: AnnotatedBlock): AnnotatedBlock =
    if is_import_block_declaration (block)
    then prepend_to_lines_aligned_at (
      get_number_of_spaces_at_beginning (get_first_line (block) ),
      scala_import_declaration_pattern,
      remove_first_line (block) )
    else block

  prepend_to_lines_aligned_at (number_of_spaces: Int, prefix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      block.annotated_lines.map (annotated_line -> prepend_aligned_non_comment (number_of_spaces, prefix, annotated_line) ),
      block.block_annotation
    )

  prepend_aligned_non_comment (index: Int, prefix: String, annotated_line: AnnotatedLine): String =
    if annotated_line.is_comment
    then annotated_line.line
    else annotated_line.line.substring (0, index) + prefix + annotated_line.line.substring (index)

  get_number_of_spaces_at_beginning (line: String): Int =
    line
      .takeWhile (ch => ch.isSpaceChar)
      .length

  remove_first_line (block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      ( if block.lines.isEmpty
        then block.lines
        else block.lines.tail ),
      block.block_annotation
    )

  get_first_line (block: AnnotatedBlock): String =
    block.lines.headOption.getOrElse ("")

  is_import_block_declaration (block: AnnotatedBlock): Boolean =
    (get_first_line (block) ).trim == tc.import_reserved_word

end

class ImportDeclarationBlockTranslator_ ()
  extends
    ImportDeclarationBlockTranslator

end

