
/**
 * A line containing the definition sign will be classified as a definition.
 * The definitions need to be identified as 'val' case, 'def' case, or 'def' reserved word.
 *
 * When the 'def' reserved word is not detected at the beginning of the line, the following cases need to be determined.
 *
 * 'val' is for value definition.
 * It is detected in three cases.
 * Case 1: The line does not have a opening parenthesis, e.g. `a = 1`
 * Case 2: The first opening parenthesis is after the definition sign, e.g. `x = f (y)`
 * Case 3: The first opening parenthesis or bracket is after a colon,
 *   e.g. `x : (A, B) -> C = (x, y) -> f (x, y)`
 * Case 4: The first non-blank character of a line is an opening parenthesis,
 *   e.g. `(x, y) = (0, 1)`
 *
 * 'def' is for function definition.
 * If it does not fit in any of the 'val' cases.
 *
 * Formerly there was another case for 'val'.
 * Deprecated Case:
 * This was implemented simply as:
 * `line.trim.startsWith (soda_opening_parenthesis)`
 * This is no longer supported.
 *
 */

class ScalaFunctionDefinitionLineDetector

  abstract
    line : String

  import
    soda.lib.OptionSD
    soda.lib.SomeSD_
    soda.translator.parser.SodaConstant

  _sc = SodaConstant .mk

  _trimmed_line : String = line.trim

  undetected = 0

  val_detected = 1

  def_detected = 2

  def_reserved_word_detected = 3

  _get_index_from (line : String) (pattern : String) (start : Int) : OptionSD [Int] =
    SomeSD_ (line .indexOf (pattern, start) )
       .filter (lambda position --> not (position == -1) )

  _get_index (line : String) (pattern : String) : OptionSD [Int] =
    _get_index_from (line) (pattern) (0)

  _position_of_first_opening_parenthesis : OptionSD [Int] =
    _get_index (line) (_sc .opening_parenthesis_symbol)

  _position_of_first_opening_bracket : OptionSD [Int] =
    _get_index (line) (_sc .opening_bracket_symbol)

  _min (a : Int) (b : Int) : Int =
    if a < b
    then a
    else b

  _position_of_first_opening_parenthesis_or_bracket_with (index1 : Int) : Int =
    match _position_of_first_opening_bracket
      case SomeSD_ (index2) ==> _min (index1) (index2)
      case _otherwise ==> index1

  _position_of_first_opening_parenthesis_or_bracket : OptionSD [Int] =
    match _position_of_first_opening_parenthesis
      case SomeSD_ (index1) ==>
        SomeSD_ (_position_of_first_opening_parenthesis_or_bracket_with (index1) )
      case _otherwise ==> _position_of_first_opening_bracket

  _is_val_definition_case_1 : Boolean =
    _position_of_first_opening_parenthesis .isEmpty

  _is_val_definition_case_2 (initial_position : Int) : Boolean =
    match _position_of_first_opening_parenthesis
      case SomeSD_ (position) ==> (position > initial_position)
      case _otherwise ==> false

  _is_val_definition_case_2_b (initial_position : Int) : Boolean =
    match _position_of_first_opening_parenthesis_or_bracket
      case SomeSD_ (position) ==> (position > initial_position)
      case _otherwise ==> false

  _is_val_definition_case_3 : Boolean =
    match (_get_index (line) (_sc .type_membership_symbol) )
      case SomeSD_ (other_position) ==> _is_val_definition_case_2_b (other_position)
      case _otherwise ==> false

  _is_val_definition_case_4 : Boolean =
    _trimmed_line .startsWith (_sc .opening_parenthesis_symbol)

  _is_val_definition (initial_position : Int) : Boolean =
    _is_val_definition_case_1 or
    _is_val_definition_case_2 (initial_position) or
    _is_val_definition_case_3 or
    _is_val_definition_case_4

  _try_found_definition_without_def_reserved_word (position : Int) : Int =
    if _is_val_definition (position)
    then val_detected
    else def_detected

  _starts_with_def_reserved_word (position : Int) : Boolean =
    line .trim .startsWith (_sc .def_reserved_word + _sc .space)

  _try_found_definition (position : Int) : Int =
    if _starts_with_def_reserved_word (position)
    then def_reserved_word_detected
    else _try_found_definition_without_def_reserved_word (position)

  /**
   * A line is a definition when its main operator is "="  (the equals sign),
   * which in this context is also called the definition sign .
   * This function finds the first occurrence of the definition sign, if it is present.
   *
   * @param line line
   * @return maybe the position of the definition sign
   */

  _find_definition (line : String) : OptionSD [Int] =
    if line .endsWith (_sc .space + _sc .function_definition_symbol)
    then SomeSD_ (line .length - _sc .function_definition_symbol .length)
    else _get_index (line) (_sc .space + _sc .function_definition_symbol + _sc .space)

  detect : Int =
    match _find_definition (line)
      case SomeSD_ (position) ==> _try_found_definition (position)
      case _otherwise ==> undetected

end

