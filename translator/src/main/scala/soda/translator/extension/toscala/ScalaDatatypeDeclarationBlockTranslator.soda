
class ScalaDatatypeDeclarationBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedLine
    soda.translator.block.AnnotatedLine_
    soda.translator.block.Block
    soda.translator.block.Block_
    soda.translator.parser.SodaConstant
    soda.translator.parser.annotation.DatatypeDeclarationAnnotation
    soda.translator.parser.annotation.DatatypeDeclarationAnnotation_


  _sc = SodaConstant .mk

  _tc = TranslationConstantToScala .mk

  _get_type_parameters_with (parameters : Seq [String] ) : String =
    if parameters .isEmpty
    then _tc .scala_empty_string
    else _tc .scala_space + _tc .scala_opening_bracket +
      parameters .mkString ( _tc .scala_space + _tc .scala_type_parameter_separator_symbol +
      _tc .scala_space) + _tc .scala_closing_bracket

  get_type_parameters (block : DatatypeDeclarationAnnotation) : String =
    _get_type_parameters_with (block .type_parameters)

  get_scala_translation_pattern (has_type_parameters : Boolean) (
      proper_parameters : Seq [String] ) : String =
    if (not has_type_parameters) and (proper_parameters .isEmpty)
    then _tc .scala_case_object_translation
    else _tc .scala_case_class_translation

  _translate_type_parameters (line : String) : String =
    line
      .replaceAll (_sc .type_parameter_separation_regex ,
         _tc .scala_type_parameter_separator_symbol + _tc .scala_space)

  _translate_proper_parameters (has_type_parameters : Boolean) (
    proper_parameters : Seq [String] ) : String =
      if has_type_parameters and proper_parameters .isEmpty
      then _tc .scala_opening_parenthesis + _tc .scala_closing_parenthesis
      else
        proper_parameters
          .map (lambda p --> _translate_type_parameters (p) .trim)
          .mkString (_tc .scala_empty_string)
          .replaceAll (_sc .class_parameter_separation_regex ,
             _tc .scala_space + _tc .scala_comma + _tc .scala_space)
          .trim

  _translate_constructors (block : DatatypeDeclarationAnnotation)
      : Seq [AnnotatedLine] =
    block .constructors
      .map (lambda constr -->
          get_scala_translation_pattern (block .type_parameters .nonEmpty) (
          constr .parameters_without_last) + _tc .scala_space +
          constr .name + get_type_parameters (block) + _tc .scala_space +
          _translate_proper_parameters (block .type_parameters .nonEmpty) (
          constr .parameters_without_last) +
          _tc .scala_space + _tc .scala_extends_translation + _tc .scala_space +
          block .class_name + get_type_parameters (block) +
          _tc .scala_new_line
       )
      .map (lambda line --> AnnotatedLine .mk (line) (false) )

  get_number_of_spaces_at_beginning (line : String) : Int =
    line
      .takeWhile (lambda ch --> ch .isSpaceChar)
      .length

  get_first_line (block : AnnotatedBlock) : String =
    block .lines .headOption .getOrElse (_tc .scala_empty_string)

  prepend_aligned_non_comment (index : Int) (prefix : String) (annotated_line : AnnotatedLine)
      : AnnotatedLine =
    if annotated_line .is_comment
    then annotated_line
    else AnnotatedLine .mk (annotated_line .line .substring (0 , index) + prefix +
      annotated_line .line .substring (index) ) (annotated_line .is_comment)

  prepend_to_lines_aligned_at (number_of_spaces : Int) (prefix : String)
      (annotated_lines : Seq [AnnotatedLine] ) : Seq [AnnotatedLine] =
    annotated_lines .map (lambda annotated_line -->
      prepend_aligned_non_comment (number_of_spaces) (prefix) (annotated_line) )

  get_type_declaration (block : DatatypeDeclarationAnnotation) : AnnotatedLine =
    AnnotatedLine .mk (
      _tc .scala_sealed_trait_translation + _tc .scala_space +
      block .class_name + get_type_parameters (block) +
      _tc .scala_new_line
    ) (false)

  _translate_block (block : DatatypeDeclarationAnnotation) : DatatypeDeclarationAnnotation =
    DatatypeDeclarationAnnotation .mk (
      Block .mk (
        (Seq [AnnotatedLine] () .+: (get_type_declaration (block) ) ) .++ (
          _translate_constructors (block) )
      )
    )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case DatatypeDeclarationAnnotation_ (block) ==>
        _translate_block (DatatypeDeclarationAnnotation .mk (block) )
      case _otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

