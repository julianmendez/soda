package soda.translator.extension.toscala

* LinePerLineBlockTranslator
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.Block
  + soda.translator.block.Translator
  + soda.translator.blocktr.TokenizedBlockTranslator_
  + soda.translator.blocktr.TableBlockTranslator_
  + soda.translator.replacement.Replacement_
  + soda.translator.replacement.Token

  source = "soda"

  target = "soda"

  soda_opening_parenthesis: String = "("

  tc = TranslationConstantToScala_ ()

  synonym_at_beginning = TableBlockTranslator_ (tc.synonym_at_beginning)

  translation_at_beginning_with_paren = TableBlockTranslator_ (tc.translation_at_beginning_with_paren)

  translation_at_beginning_without_paren_for_type_alias =
    TableBlockTranslator_ (tc.translation_at_beginning_without_paren_for_type_alias)

  translation_at_beginning_without_paren =
    TableBlockTranslator_ (tc.translation_at_beginning_without_paren)

  synonym = TableBlockTranslator_ (tc.synonym)

  main_translation = TableBlockTranslator_ (tc.main_translation)

  scala_non_soda = TableBlockTranslator_ (tc.scala_non_soda)

  replace_token: Token -> String =
    lambda token ->
      Replacement_ (token.text)
        .add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet)
        .replace (scala_non_soda)
        .replace_at_beginning (token.index, synonym_at_beginning)
        .replace (synonym)
        .replace_with (try_definition)
        .replace_at_beginning (token.index, get_translation_table_at_beginning (token.text))
        .replace (main_translation)
        .line

  translator = TokenizedBlockTranslator_ (replace_token)

  translate (block: Block): Block =
    translator.translate (block)

  get_translation_table_at_beginning (line: String): Translator =
    if line.contains (soda_opening_parenthesis)
    then translation_at_beginning_with_paren
    else
      if DefinitionTranslatorToScala_ (line).condition_for_type_alias
      then translation_at_beginning_without_paren_for_type_alias
      else translation_at_beginning_without_paren

  try_definition (line: String): String =
    DefinitionTranslatorToScala_ (line).translation

}

* LinePerLineBlockTranslator_ ()
  extends LinePerLineBlockTranslator

