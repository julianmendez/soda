package soda.translator.extension.toscala

class ClassConstructorBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.AbstractDeclarationAnnotation_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.ClassEndAnnotation
    soda.translator.parser.annotation.ClassEndAnnotation_

  sc = SodaConstant_ ()

  tc = TranslationConstantToScala_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassEndAnnotation_ (block, references) ==> _translate_block (ClassEndAnnotation_ (block, references) )
      case x ==> annotated_block
    end

  _translate_block (block : ClassEndAnnotation) : ClassEndAnnotation =
    _translate_block_with (_get_class_beginning (block.references) ) (block)

  _translate_block_with (maybe_beginning : Option [ClassBeginningAnnotation] ) (block : ClassEndAnnotation) : ClassEndAnnotation =
    if maybe_beginning.isEmpty
    then block
    else _translate_block_with_beginning (maybe_beginning.get) (block)

  _translate_block_with_beginning (beginning : ClassBeginningAnnotation) (block : ClassEndAnnotation) : ClassEndAnnotation =
    if beginning.is_concrete
    then block
    else _translate_block_with_abstract_beginning (beginning) (block)

  _translate_block_with_abstract_beginning (beginning : ClassBeginningAnnotation) (block : ClassEndAnnotation) : ClassEndAnnotation =
    ClassEndAnnotation_ (
      BlockBuilder_ ().build (
        block.lines.++ (
          Seq [String] (
            "",
            _get_constructor_declaration (beginning) (_get_abstract_functions (block.references) )
          )
        )
      ),
      block.references
    )

  _get_constructor_declaration (beginning : ClassBeginningAnnotation) (abstract_functions : Seq [String] ) : String =
    _get_initial_spaces (beginning) +
    tc.class_declaration_translation_at_beginning_with_paren +
    tc.scala_space +
    beginning.class_name +
    sc.constructor_suffix +
    _translate_type_symbols (_get_as_parameter_list (beginning.type_parameters_and_bounds) ) +
    tc.scala_space +
    tc.scala_opening_parenthesis +
    abstract_functions.mkString (tc.scala_parameter_separator_symbol + tc.scala_space) +
    tc.scala_closing_parenthesis +
    tc.scala_space +
    tc.scala_extends_translation +
    tc.scala_space +
    beginning.class_name +
    _get_as_parameter_list (beginning.type_parameters)

  _get_as_parameter_list (parameters : Seq [String] ) : String =
    if parameters.isEmpty
    then ""
    else tc.scala_space + tc.scala_opening_bracket + parameters.mkString (tc.scala_parameter_separator_symbol + tc.scala_space) + tc.scala_closing_bracket

  _get_class_beginning (references : Seq [AnnotatedBlock] ) : Option [ClassBeginningAnnotation] =
    references
      .flatMap ( lambda block -->
        match block
          case ClassBeginningAnnotation_ (b) ==> Some (ClassBeginningAnnotation_ (b) )
          case x ==> None
        end
      )
      .headOption

  _get_abstract_functions (references : Seq [AnnotatedBlock] ) : Seq [String] =
    references
      .flatMap ( lambda block ==>
        match block
          case AbstractDeclarationAnnotation_ (b, references) ==> Some (AbstractDeclarationAnnotation_ (b, references) )
          case x ==> None
        end
      )
      .flatMap ( lambda block --> block.abstract_functions)
      .map ( lambda annotated_line --> _translate_type_symbols (annotated_line.line).trim )

  _translate_type_symbols (line : String) : String =
    line
      .replaceAll (sc.subtype_reserved_word, tc.scala_subtype_symbol)
      .replaceAll (sc.supertype_reserved_word, tc.scala_supertype_symbol)
      .replaceAll (sc.function_arrow_symbol, tc.scala_function_arrow_symbol)

  _get_initial_spaces (block : AnnotatedBlock) : String =
    _get_initial_spaces_with (_get_first_line (block) )

  _get_initial_spaces_with (line : String) : String =
    line.takeWhile ( lambda ch --> ch.isSpaceChar)

  _get_first_line (block : AnnotatedBlock) : String =
    block.lines.headOption.getOrElse ("")

end

