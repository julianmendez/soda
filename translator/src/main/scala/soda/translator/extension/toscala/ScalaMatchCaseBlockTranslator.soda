
class ScalaMatchCaseBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder
    soda.translator.parser.SodaConstant
    soda.translator.parser.annotation.ClassAliasAnnotation
    soda.translator.parser.annotation.ClassAliasAnnotation_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_
    soda.translator.parser.annotation.TestDeclarationAnnotation
    soda.translator.parser.annotation.TestDeclarationAnnotation_

  _sc = SodaConstant .mk

  _tc = TranslationConstantToScala .mk

  _soda_match_pattern = _sc .match_reserved_word + " "

  _left_part (index : Int) (line : String) : String =
    line .substring (0 , index)

  _right_part (index : Int) (line : String) : String =
    line .substring (index + _soda_match_pattern .length , line .length)

  _assemble_parts (index : Int) (line : String) : String =
    (_left_part (index) (line) ) + (_right_part (index) (line) ) +
      _tc .scala_match_translation + _tc .scala_space + _tc .scala_opening_brace

  _is_a_match_line (line : String) : Boolean =
    line .trim .startsWith (_soda_match_pattern)

  _is_a_match_case_structure (block : AnnotatedBlock) : Boolean =
    block .lines .exists (lambda line --> _is_a_match_line (line) )

  _get_tabulation_of_match (block : AnnotatedBlock) : String =
    block .lines
      .find (lambda line --> _is_a_match_line (line) )
      .map (lambda line --> _left_part (line .indexOf (_soda_match_pattern) ) (line) )
      .getOrElse (_tc .scala_space)

  _insert_match_before_brace_if_found (line : String) : String =
    if _is_a_match_line (line)
    then _assemble_parts (index := line .indexOf (_soda_match_pattern) ) (line)
    else line

  _translate_match_case_structure (block: AnnotatedBlock) (tabulation : String) : Block =
    BlockBuilder .mk .build (
      block .lines
        .map (lambda line --> _insert_match_before_brace_if_found (line) )
        .++ (Seq [String] () .+: (tabulation + _tc .scala_match_end_translation) )
    )

  _translate_block (block : AnnotatedBlock) : Block =
    if _is_a_match_case_structure (block)
    then _translate_match_case_structure (block) (_get_tabulation_of_match (block) )
    else block

  _translate_function_block (block : AnnotatedBlock) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  _translate_class_alias_block (block : AnnotatedBlock) : ClassAliasAnnotation =
    ClassAliasAnnotation_ (_translate_block (block) )

  _translate_test_block (block : AnnotatedBlock) : TestDeclarationAnnotation =
    TestDeclarationAnnotation_ (_translate_block (block) )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case FunctionDefinitionAnnotation_ (block) ==> _translate_function_block (annotated_block)
      case ClassAliasAnnotation_ (block) ==> _translate_class_alias_block (annotated_block)
      case TestDeclarationAnnotation_ (block) ==> _translate_test_block (annotated_block)
      case _otherwise ==> annotated_block

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

