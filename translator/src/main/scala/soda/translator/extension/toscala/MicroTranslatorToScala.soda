package soda.translator.extension.toscala

/**
 * This class translates Soda source code into Scala source code.
 */

class MicroTranslatorToScala
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.ConditionalBlockTranslator_
    soda.translator.blocktr.TokenReplacement_
    soda.translator.blocktr.TokenizedBlockTranslator_
    soda.translator.replacement.Token

  tc = TranslationConstantToScala_ ()

  ba = BlockAnnotationEnum_ ()

  functions_and_tests =
    Seq (ba.function_definition, ba.test_declaration)

  class_declarations =
    Seq (ba.class_alias, ba.class_beginning, ba.abstract_declaration)

  definitions_and_declarations =
    functions_and_tests.++ (class_declarations)

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translation_pipeline.translate (block)

  try_definition : Token -> String =
    lambda token -->
      FunctionDefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        MatchCaseBlockTranslator_ (),
        ConditionalBlockTranslator_ (definitions_and_declarations, TokenReplacement_ ().replace (tc.scala_non_soda) ),
        ConditionalBlockTranslator_ (functions_and_tests, TokenizedBlockTranslator_ (try_definition) ),
        ConditionalBlockTranslator_ (class_declarations, TokenReplacement_ ().replace (tc.type_symbol_translation) ),
        ConditionalBlockTranslator_ (functions_and_tests, TokenReplacement_ ().replace (tc.all_translations) ),
        ClassDeclarationBlockTranslator_ (),
        ImportDeclarationBlockTranslator_ (),
        AbstractDeclarationBlockTranslator_ (),
        TheoremAndProofBlockTranslator_ (),
        ClassEndBlockTranslator_ (),
        MainClassBlockTranslator_ (),
        ClassConstructorBlockTranslator_ ()
      )
    )

end

