
/**
 * This class translates Soda source code into Scala source code.
 */

class MicroTranslatorToScala
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockTranslatorPipeline
    soda.translator.block.BlockAnnotationEnum
    soda.translator.block.ConditionalBlockTranslator
    soda.translator.blocktr.TokenReplacement

  _tc = TranslationConstantToScala .mk

  _ba = BlockAnnotationEnum .mk

  _functions_and_tests =
    Seq (_ba .function_definition , _ba .class_alias , _ba .test_declaration)

  _class_declarations =
    Seq (_ba .class_alias , _ba .class_beginning , _ba .abstract_declaration)

  _definitions_and_declarations =
    _functions_and_tests .++ (_class_declarations)

  _translation_pipeline =
    BlockTranslatorPipeline .mk (
      Seq (
        ScalaTypeParameterBlockTranslator .mk ,
        ScalaClassConstructorParameterBlockTranslator .mk ,
        ScalaMatchCaseBlockTranslator .mk ,
        ConditionalBlockTranslator .mk (_definitions_and_declarations) (
          TokenReplacement .mk .replace_words (_tc .scala_non_soda) ) ,
        ConditionalBlockTranslator .mk (_functions_and_tests) (
          ScalaFunctionDefinitionBlockTranslator .mk ) ,
        ConditionalBlockTranslator .mk (_class_declarations) (
          TokenReplacement .mk .replace_words (_tc .type_symbol_translation) ) ,
        ConditionalBlockTranslator .mk (_functions_and_tests) (
          TokenReplacement .mk .replace_words (_tc .all_translations) ) ,
        ScalaClassDeclarationBlockTranslator .mk ,
        ScalaImportDeclarationBlockTranslator .mk ,
        ScalaAbstractDeclarationBlockTranslator .mk ,
        ScalaDatatypeDeclarationBlockTranslator .mk ,
        ScalaTheoremBlockTranslator .mk ,
        ScalaDirectiveBlockTranslator .mk ,
        ScalaClassEndBlockTranslator .mk ,
        ScalaMainClassBlockTranslator .mk ,
        ScalaClassConstructorBlockTranslator .mk
      )
    )

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      _translation_pipeline .translate (block)

end

