package soda.translator.extension.toscala

/**
 * This class translates Soda source code into Scala source code.
 */

class MicroTranslatorToScala
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.ConditionalBlockTranslator_
    soda.translator.blocktr.TokenReplacement_
    soda.translator.blocktr.TokenizedBlockTranslator_
    soda.translator.replacement.Token

  tc = TranslationConstantToScala_ ()

  class_alias = BlockAnnotationEnum_ ().class_alias

  class_beginning = BlockAnnotationEnum_ ().class_beginning

  function_definition = BlockAnnotationEnum_ ().function_definition

  test_declaration = BlockAnnotationEnum_ ().test_declaration

  functions_and_tests = Seq (function_definition, test_declaration)

  class_declaration = Seq (class_alias, class_beginning)

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translation_pipeline.translate (block)

  try_definition : Token -> String =
    lambda token -->
      FunctionDefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LetInBlockTranslator_ (),
        MatchCaseBlockTranslator_ (),
        TokenReplacement_ ().replace (tc.scala_non_soda),
        TokenReplacement_ ().replace (tc.type_symbols_translation),
        ConditionalBlockTranslator_ (functions_and_tests, TokenizedBlockTranslator_ (try_definition) ),
        ConditionalBlockTranslator_ (functions_and_tests, TokenReplacement_ ().replace (tc.function_symbols_translation) ),
        ClassDeclarationBlockTranslator_ (),
        ImportDeclarationBlockTranslator_ (),
        AbstractDeclarationBlockTranslator_ (),
        TheoremAndProofBlockTranslator_ (),
        ClassEndBlockTranslator_ (),
        MainClassBlockTranslator_ (),
        ClassConstructorBlockTranslator_ ()
      )
    )

end

