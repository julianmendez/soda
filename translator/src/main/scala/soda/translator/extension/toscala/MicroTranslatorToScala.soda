package soda.translator.extension.toscala

/**
 * This class translates Soda source code into Scala source code.
 */
* MicroTranslatorToScala
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.AnnotatedBlock
  + soda.translator.block.BlockTranslatorPipeline_
  + soda.translator.block.BlockAnnotationEnum_
  + soda.translator.block.ConditionalBlockTranslator_
  + soda.translator.blocktr.TokenReplacement_
  + soda.translator.blocktr.TokenizedBlockTranslator_
  + soda.translator.parser.BlockAnnotator_
  + soda.translator.replacement.Token

  new_line = "\n"

  tc = TranslationConstantToScala_ ()

  function_definition = BlockAnnotationEnum_ ().function_definition

  test_declaration = BlockAnnotationEnum_ ().test_declaration

  try_definition: Token -> String =
    lambda token ->
      FunctionDefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        BlockAnnotator_ (),
        LetInBlockTranslator_ (),
        MatchCaseBlockTranslator_ (),
        TokenReplacement_ ().add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet),
        TokenReplacement_ ().replace (tc.scala_non_soda),
        TokenReplacement_ ().replace_at_beginning (tc.synonym_at_beginning),
        TokenReplacement_ ().replace (tc.synonym),
        ConditionalBlockTranslator_ (function_definition, TokenizedBlockTranslator_ (try_definition) ),
        ConditionalBlockTranslator_ (test_declaration, TokenizedBlockTranslator_ (try_definition) ),
        ClassDeclarationBlockTranslator_ (),
        TokenReplacement_ ().replace (tc.main_translation),
        TheoremAndProofBlockTranslator_ (),
        TokenReplacement_ ().replace_regex (tc.beautifier)
      )
    )

  translate (block: AnnotatedBlock): AnnotatedBlock =
    translation_pipeline.translate (block)

}

* MicroTranslatorToScala_ ()
  extends MicroTranslatorToScala
