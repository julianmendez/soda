package soda.translator.extension.toscala

/**
 * This class translates Soda source code into Scala source code.
 */
* MicroTranslatorToScala
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.Block
  + soda.translator.block.BlockTranslatorPipeline_
  + soda.translator.blocktr.LineBackwardJoinerBlockTranslator_
  + soda.translator.blocktr.LineForwardJoinerBlockTranslator_
  + soda.translator.blocktr.TableTranslator_
  + soda.translator.blocktr.TokenizedBlockTranslator_
  + soda.translator.replacement.ReplacementAux_
  + soda.translator.replacement.Token

  source = "soda"

  target = "scala"

  new_line = "\n"

  tc = TranslationConstantToScala_ ()

  add_spaces_to_symbols (symbols: Set [Char] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().add_spaces_to_symbols (token.text, symbols)

  replace (table: Seq [ (String, String) ] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().replace (token.text, TableTranslator_ (table))

  replace_regex (table: Seq [ (String, String) ] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().replace_regex (token.text, TableTranslator_ (table))

  replace_at_beginning (table: Seq [ (String, String) ] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().replace_at_beginning (token.text, token.index, TableTranslator_ (table))

  try_definition: Token -> String =
    lambda token ->
      DefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LineForwardJoinerBlockTranslator_ (),
        LetInBlockTranslator_ (),
        MatchCaseBlockTranslator_ (),
        LineBackwardJoinerBlockTranslator_ (),
        TokenizedBlockTranslator_ (add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet) ),
        TokenizedBlockTranslator_ (replace (tc.scala_non_soda) ),
        TokenizedBlockTranslator_ (replace_at_beginning (tc.synonym_at_beginning) ),
        TokenizedBlockTranslator_ (replace (tc.synonym)),
        TokenizedBlockTranslator_ (try_definition),
        ClassDeclarationBlockTranslator_ (),
        TokenizedBlockTranslator_ (replace (tc.main_translation) ),
        TokenizedBlockTranslator_ (replace_regex (tc.beautifier) )
      )
    )

  translate (block: Block): Block =
    translation_pipeline.translate (block)

}

* MicroTranslatorToScala_ ()
  extends MicroTranslatorToScala
