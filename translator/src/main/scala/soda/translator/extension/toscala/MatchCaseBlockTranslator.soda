package soda.translator.extension.toscala

class MatchCaseBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_
    soda.translator.parser.annotation.TestDeclarationAnnotation
    soda.translator.parser.annotation.TestDeclarationAnnotation_

  _sc = SodaConstant_ ()

  _tc = TranslationConstantToScala_ ()

  _soda_match_pattern = _sc.match_reserved_word + " "

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case FunctionDefinitionAnnotation_ (block) ==> _translate_function_block (FunctionDefinitionAnnotation_ (block) )
      case TestDeclarationAnnotation_ (block) ==> _translate_test_block (TestDeclarationAnnotation_ (block) )
      case x ==> annotated_block
    end

  _translate_function_block (block : AnnotatedBlock) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  _translate_test_block (block : AnnotatedBlock) : TestDeclarationAnnotation =
    TestDeclarationAnnotation_ (_translate_block (block) )

  _translate_block (block : AnnotatedBlock) : Block =
    BlockBuilder_ ().build (
      block.lines
        .map ( lambda line --> _insert_match_before_brace_if_found (line) )
        .map ( lambda line --> _replace_match_end_if_found (line) )
    )

  _insert_match_before_brace_if_found (line : String) : String =
    if line.trim.startsWith (_soda_match_pattern)
    then _assemble_parts (index := line.indexOf (_soda_match_pattern) ) (line)
    else line

  _replace_match_end_if_found (line : String) : String =
    if line.trim == _sc.match_end_reserved_word
    then line.replaceAll (_sc.match_end_reserved_word, _tc.scala_match_end_translation)
    else line

  _assemble_parts (index : Int) (line : String) : String =
    (_left_part (index) (line) ) + (_right_part (index) (line) ) + _tc.scala_match_translation + _tc.scala_space + _tc.scala_opening_brace

  _left_part (index : Int) (line : String) : String =
    line.substring (0, index)

  _right_part (index : Int) (line : String) : String =
    line.substring (index + _soda_match_pattern.length, line.length)

end

