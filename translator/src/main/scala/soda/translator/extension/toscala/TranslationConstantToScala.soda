
/**
 * This class contains constants that are specific for the Soda translator,
 * like reserved words for Soda and Scala.
 */

class TranslationConstantToScala

  import
    soda.translator.parser.SodaConstant_

  soda_constant = SodaConstant_ ()

  scala_colon_symbol = ":"

  scala_3_class_definition = scala_colon_symbol

  scala_match_translation = " match "

  scala_space = " "

  scala_empty_string = ""

  scala_comma = ","

  scala_type_parameter_separator_symbol = ","

  scala_class_parameter_separator_symbol = ","

  scala_lambda_arrow_symbol = "=>"

  scala_case_arrow_symbol = "=>"

  scala_parameter_definition_symbol = "="

  scala_match_end_translation = "}"

  scala_opening_parenthesis = "("

  scala_closing_parenthesis = ")"

  scala_opening_bracket = "["

  scala_closing_bracket = "]"

  scala_opening_brace = "{"

  scala_closing_brace = "}"

  scala_class_begin_symbol = "{"

  scala_class_end_symbol = "}"

  scala_comment_opening_symbol = "/*"

  scala_comment_closing_symbol = "*/"

  scala_if_translation = "if ("

  scala_then_translation = ")"

  scala_def_reserved_word = "def"

  scala_abstract_function_declaration = scala_def_reserved_word

  scala_definition = scala_def_reserved_word

  scala_value = "lazy val"

  scala_import_declaration = "import"

  scala_with_translation = "with"

  scala_extends_translation = "extends"

  scala_object_reserved_word = "object"

  scala_equals_symbol = "="

  scala_function_arrow_symbol = "=>"

  scala_subtype_symbol = "<:"

  scala_supertype_symbol = ">:"

  scala_not_symbol = "!"

  scala_and_symbol = "&&"

  scala_or_symbol = "||"

  scala_tail_recursion_annotation_translation =
    "import scala.annotation.tailrec\n        @tailrec  final"

  scala_override_annotation_translation = "override"

  scala_new_annotation_translation = "new"

  soda_main_class_name = "Main"

  scala_entry_point =
    "object EntryPoint {\n  def main (args: Array [String]): Unit = Main_ ().main (args)\n}\n"

  scala_private_reserved_word = "private"

  scala_directive_identifier = "scala"

  /**
   * Scala 3 keywords:
   *   https://dotty.epfl.ch/docs/internals/syntax.html
   * Scala 2 keywords:
   *   https://www.scala-lang.org/files/archive/spec/2.13/01-lexical-syntax.html
   */
  scala_reserved_words =
    scala_3_regular_keywords ++ scala_3_soft_keywords ++ scala_2_extra_keywords

  scala_3_regular_keywords =
    Seq (
      "abstract",
      "case",
      "catch",
      "class",
      "def",
      "do",
      "else",
      "enum",
      "export",
      "extends",
      "false",
      "final",
      "finally",
      "for",
      "given",
      "if",
      "implicit",
      "import",
      "lazy",
      "match",
      "new",
      "null",
      "object",
      "override",
      "package",
      "private",
      "protected",
      "return",
      "sealed",
      "super",
      "then",
      "throw",
      "trait",
      "true",
      "try",
      "type",
      "val",
      "var",
      "while",
      "with",
      "yield",
      ":",
      "=",
      "<-",
      "=>",
      "<:",
      ">:",
      "#",
      "@",
      "=>>",
      "?=>"
    )

  scala_3_soft_keywords =
    Seq (
      "as",
      "derives",
      "end",
      "extension",
      "infix",
      "inline",
      "opaque",
      "open",
      "transparent",
      "using",
      "|",
      "*",
      "+",
      "-"
    )

  scala_2_extra_keywords =
    Seq (
      "forSome",
      "macro",
      "this",
      "_",
      "<%",
      "\u21D2",
      "\u2190"
    )

  type_symbol_translation : Seq [Tuple2 [String] [String] ] =
    Seq (
      Tuple2 (soda_constant .subtype_reserved_word , scala_subtype_symbol) ,
      Tuple2 (soda_constant .supertype_reserved_word , scala_supertype_symbol) ,
      Tuple2 (soda_constant .function_arrow_symbol , scala_function_arrow_symbol)
    )

  function_symbol_translation : Seq [Tuple2 [String] [String] ] =
    Seq (
      Tuple2 (soda_constant .lambda_reserved_word , scala_empty_string) ,
      Tuple2 (soda_constant .any_reserved_word , scala_empty_string) ,
      Tuple2 (soda_constant .lambda_arrow_symbol , scala_lambda_arrow_symbol) ,
      Tuple2 (soda_constant .case_arrow_symbol , scala_case_arrow_symbol) ,
      Tuple2 (soda_constant .not_reserved_word , scala_not_symbol) ,
      Tuple2 (soda_constant .and_reserved_word , scala_and_symbol) ,
      Tuple2 (soda_constant .or_reserved_word , scala_or_symbol) ,
      Tuple2 (soda_constant .if_reserved_word , scala_if_translation) ,
      Tuple2 (soda_constant .then_reserved_word , scala_then_translation) ,
      Tuple2 (soda_constant .parameter_definition_symbol , scala_parameter_definition_symbol) ,
      Tuple2 (soda_constant .tail_recursion_annotation ,
        scala_tail_recursion_annotation_translation) ,
      Tuple2 (soda_constant .override_annotation , scala_override_annotation_translation) ,
      Tuple2 (soda_constant .new_annotation , scala_new_annotation_translation)
    )

  all_translations : Seq [Tuple2 [String] [String] ] =
    type_symbol_translation .++ (function_symbol_translation)

  class_declaration_translation_at_beginning_with_paren = "case class"

  class_declaration_translation_at_beginning_without_paren_for_type_alias = "type"

  class_declaration_translation_at_beginning_without_paren = "trait"

  prefix_scala_non_soda = "__soda__"

  scala_non_soda : Seq [Tuple2 [String] [String] ] =
      scala_reserved_words
        .filter (lambda x --> not soda_constant .soda_reserved_words .contains (x))
        .map (lambda x --> Tuple2 (x , prefix_scala_non_soda + x) )

  is_scala_word (word : String) : Boolean =
    scala_reserved_words .contains (word)

  is_soda_word (word : String) : Boolean =
    soda_constant .soda_reserved_words .contains (word)

end

