package soda.translator.extension.toscala

/**
 * This class contains constants that are specific for the Soda translator, like reserved words for Soda and Scala.
 */

class TranslationConstantToScala

  import
    soda.translator.parser.SodaConstant_

  soda_constant = SodaConstant_ ()

  scala_3_class_definition = ":"

  soda_let_pattern = soda_constant.deprecated_let_reserved_word + " "

  soda_in_pattern = soda_constant.deprecated_in_reserved_word + " "

  scala_in_translation = " }"

  soda_in_let_pattern = soda_constant.deprecated_in_reserved_word + " " + soda_constant.deprecated_let_reserved_word + " "

  scala_in_let_translation = " "

  scala_match_translation = " match "

  scala_space = " "

  scala_comma = ","

  scala_parameter_separator_symbol = ","

  scala_match_end_translation = "}"

  scala_opening_parenthesis = "("

  scala_closing_parenthesis = ")"

  scala_opening_bracket = "["

  scala_closing_bracket = "]"

  scala_opening_brace = "{"

  scala_closing_brace = "}"

  scala_class_begin_symbol = "{"

  scala_class_end_symbol = "}"

  scala_comment_opening_symbol = "/*"

  scala_comment_closing_symbol = "*/"

  soda_class_reserved_word = "class"

  scala_abstract_function_declaration = "def"

  scala_definition = "def"

  scala_value = "lazy val"

  scala_import_declaration = "import"

  scala_with_translation = "with"

  scala_extends_translation = "extends"

  scala_function_arrow_symbol = "=>"

  scala_subtype_symbol = "<:"

  scala_supertype_symbol = ">:"

  soda_main_class_name = "Main"

  scala_entry_point = "object EntryPoint {\n  def main (args: Array [String]): Unit = Main_ ().main (args)\n}\n"

  /**
   * Scala 3 keywords:
   *   https://dotty.epfl.ch/docs/internals/syntax.html
   * Scala 2 keywords:
   *   https://www.scala-lang.org/files/archive/spec/2.13/01-lexical-syntax.html
   */
  scala_reserved_words =
    scala_3_regular_keywords ++ scala_3_soft_keywords ++ scala_2_extra_keywords

  scala_3_regular_keywords =
    Seq (
      "abstract",
      "case",
      "catch",
      "class",
      "def",
      "do",
      "else",
      "enum",
      "export",
      "extends",
      "false",
      "final",
      "finally",
      "for",
      "given",
      "if",
      "implicit",
      "import",
      "lazy",
      "match",
      "new",
      "null",
      "object",
      "override",
      "package",
      "private",
      "protected",
      "return",
      "sealed",
      "super",
      "then",
      "throw",
      "trait",
      "true",
      "try",
      "type",
      "val",
      "var",
      "while",
      "with",
      "yield",
      ":",
      "=",
      "<-",
      "=>",
      "<:",
      ">:",
      "#",
      "@",
      "=>>",
      "?=>"
    )

  scala_3_soft_keywords =
    Seq (
      "as",
      "derives",
      "end",
      "extension",
      "infix",
      "inline",
      "opaque",
      "open",
      "transparent",
      "using",
      "|",
      "*",
      "+",
      "-"
    )

  scala_2_extra_keywords =
    Seq (
      "forSome",
      "macro",
      "this",
      "_",
      "<%",
      "\u21D2",
      "\u2190"
    )

  synonym_at_beginning : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 ("*", "class"),
      Tuple2 ("+", "import"),
      Tuple2 ("|", "case")
    )

  type_symbols_translation : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 (soda_constant.subtype_reserved_word, scala_subtype_symbol),
      Tuple2 (soda_constant.supertype_reserved_word, scala_supertype_symbol),
      Tuple2 (soda_constant.function_arrow_symbol, scala_function_arrow_symbol)
    )

  class_declaration_translation_at_beginning_with_paren = "case class"

  class_declaration_translation_at_beginning_without_paren_for_type_alias = "type"

  class_declaration_translation_at_beginning_without_paren = "trait"

  synonym : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 ("is", "="),
      Tuple2 ("fun", "lambda"),
      Tuple2 ("def", ""),
      Tuple2 ("<:", "subtype"),
      Tuple2 (">:", "supertype")
    )

  main_translation : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 (":", ":"),
      Tuple2 ("->", "=>"),
      Tuple2 ("=>", "=>"),
      Tuple2 (":=", "="),
      Tuple2 ("if", "if ("),
      Tuple2 ("then", ")"),
      Tuple2 ("else", "else"),
      Tuple2 ("let", "{"),
      Tuple2 ("in", " "),
      Tuple2 ("match", "match"),
      Tuple2 ("case", "case"),
      Tuple2 ("end", "}"),
      Tuple2 ("lambda", ""),
      Tuple2 ("abstract", "abstract"),
      Tuple2 ("has", "def"),
      Tuple2 ("extends", "extends"),
      Tuple2 ("with", "with"),
      Tuple2 ("this", "this"),
      Tuple2 ("subtype", "<:"),
      Tuple2 ("supertype", ">:"),
      Tuple2 ("false", "false"),
      Tuple2 ("true", "true"),
      Tuple2 ("not", "!"),
      Tuple2 ("and", "&&"),
      Tuple2 ("or", "||"),
      Tuple2 ("theorem", "theorem"),
      Tuple2 ("proof", "proof"),
      Tuple2 ("@new", "new"),
      Tuple2 ("@override", "override"),
      Tuple2 ("@tailrec", "import scala.annotation.tailrec\n        @tailrec  final")
    )

  prefix_scala_non_soda = "__soda__"

  scala_non_soda : Seq [Tuple2 [String, String] ] =
      scala_reserved_words
        .filter (lambda x -> not soda_constant.soda_reserved_words.contains (x))
        .map (lambda x -> Tuple2 (x, prefix_scala_non_soda + x) )

  soda_brackets_and_comma =
      Seq ( '(', ')', '[', ']', '{', '}', ',' )

  beautifier : Seq [Tuple2 [String, String] ] =
    Seq (
      Tuple2 ("\\.\\s+", "."),
      Tuple2 ("=\\s+", "= "),
      Tuple2 ("\\s+=", " ="),
      Tuple2 ("\\(\\s+", "("),
      Tuple2 ("\\[\\s+", "["),
      Tuple2 ("\\s+\\]", "]"),
      Tuple2 ("\\s+,", ","),
      Tuple2 (",\\s+", ", "),
      Tuple2 ("\\s+:", ":"),
      Tuple2 (":\\s+", ": ")
    )

  is_scala_word (word : String) : Boolean =
    scala_reserved_words.contains (word)

  is_soda_word (word : String) : Boolean =
    soda_constant.soda_reserved_words.contains (word)

end

