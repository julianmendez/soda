
class CoqClassConstructorBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.AbstractDeclarationAnnotation
    soda.translator.parser.annotation.AbstractDeclarationAnnotation_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_

  _sc = SodaConstant_ ()

  _tc = TranslationConstantToCoq_ ()

  _get_as_class_beginning_annotation (annotated_block : AnnotatedBlock)
      : Option [ClassBeginningAnnotation] =
    match annotated_block
      case ClassBeginningAnnotation_ (b) ==> Some (ClassBeginningAnnotation_ (b) )
      case otherwise ==> None

  _get_class_beginning (referencess : Seq [AnnotatedBlock] )
      : Option [ClassBeginningAnnotation] =
    referencess
       .flatMap (lambda block --> _get_as_class_beginning_annotation (block) )
       .headOption

  _remove_variable_with (line : String) (index : Int) : String =
    if index < 0
    then line
    else line .substring (index + _sc .type_membership_symbol .length) .trim

  _remove_variable (line : String) : String =
    _remove_variable_with (line) (line .indexOf (_sc .type_membership_symbol) )

  _translate_type_symbols (line : String) : String =
    line
      .replaceAll (_sc .subtype_reserved_word , _tc .coq_subtype_symbol)
      .replaceAll (_sc .supertype_reserved_word , _tc .coq_supertype_symbol)
      .replaceAll (_sc .function_arrow_symbol , _tc .coq_function_arrow_symbol)

  _get_types_of_abstract_functions (block : AbstractDeclarationAnnotation) : Seq [String] =
    block .abstract_functions
      .map (lambda annotated_line --> _translate_type_symbols (annotated_line .line) .trim )
      .map (lambda line --> _remove_variable (line) )

  _get_first_line (block : AnnotatedBlock) : String =
    block .lines .headOption .getOrElse ("")

  _get_initial_spaces_with (line : String) : String =
    line .takeWhile (lambda ch --> ch .isSpaceChar)

  _get_initial_spaces (block : AnnotatedBlock) : String =
    _get_initial_spaces_with (_get_first_line (block) )

  _get_constructor_declaration (beginning : ClassBeginningAnnotation)
      (functions : Seq [String] ) : String =
    _get_initial_spaces (beginning) +
    _tc .coq_inductive_reserved_word +
    _tc .coq_space +
    beginning .class_name +
    _tc .coq_space +
    _tc .coq_type_membership_symbol +
    _tc .coq_space +
    _tc .coq_type_reserved_word +
    _tc .coq_space +
    _tc .coq_function_definition_symbol +
    _tc .coq_new_line +
    _get_initial_spaces (beginning) +
    _tc .coq_space +
    _tc .coq_space +
    _tc .coq_vertical_bar_symbol +
    _tc .coq_space +
    beginning .class_name +
    _sc .constructor_suffix +
    _tc .coq_space +
    _tc .coq_opening_parenthesis +
    _tc .coq_some_variable_name +
    _tc .coq_space +
    _tc .coq_type_membership_symbol +
    _tc .coq_space +
    functions .mkString (_tc .coq_space + _tc .coq_product_type_symbol + _tc .coq_space) +
    _tc .coq_closing_parenthesis +
    _tc .coq_new_line +
    _get_initial_spaces (beginning) +
    _tc .coq_inductive_end_symbol

  _translate_block_with_abstract_beginning (beginning : ClassBeginningAnnotation)
      (block : AbstractDeclarationAnnotation) : AbstractDeclarationAnnotation =
    AbstractDeclarationAnnotation_ (
      BlockBuilder_ () .build (
        Seq (_tc .coq_opening_comment) .++ (
          block .lines .++ (
            Seq [String] (
            _tc .coq_closing_comment,
            "",
            _get_constructor_declaration (beginning) (_get_types_of_abstract_functions (block) )
            )
          )
        )
      ),
      block .references
    )

  _translate_block_with_beginning (beginning : ClassBeginningAnnotation)
      (block : AbstractDeclarationAnnotation) : AbstractDeclarationAnnotation =
    if beginning .is_concrete
    then block
    else _translate_block_with_abstract_beginning (beginning) (block)

  _translate_block_with (maybe_beginning : Option [ClassBeginningAnnotation] )
      (block : AbstractDeclarationAnnotation) : AbstractDeclarationAnnotation =
    if maybe_beginning .isEmpty
    then block
    else _translate_block_with_beginning (maybe_beginning .get) (block)

  _translate_block (block : AbstractDeclarationAnnotation) : AbstractDeclarationAnnotation =
    _translate_block_with (_get_class_beginning (block .references) ) (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case AbstractDeclarationAnnotation_ (block , references) ==>
        _translate_block (AbstractDeclarationAnnotation_ (block , references) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

