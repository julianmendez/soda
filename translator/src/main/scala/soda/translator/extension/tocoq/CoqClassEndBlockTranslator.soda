package soda.translator.extension.tocoq

class CoqClassEndBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.ClassEndAnnotation
    soda.translator.parser.annotation.ClassEndAnnotation_

  sc = SodaConstant_ ()

  tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassEndAnnotation_ (block, references) ==> _translate_block (ClassEndAnnotation_ (block, references) )
      case x ==> annotated_block
    end

  _translate_block (block : ClassEndAnnotation) : ClassEndAnnotation =
    _translate_block_with (_get_class_beginning (block.references) ) (block)

  _translate_block_with (maybe_beginning : Option [ClassBeginningAnnotation] ) (block : ClassEndAnnotation) : ClassEndAnnotation =
    if maybe_beginning.isEmpty
    then block
    else _translate_block_with_beginning (maybe_beginning.get) (block)

  _translate_block_with_beginning (beginning : ClassBeginningAnnotation) (block : ClassEndAnnotation) : ClassEndAnnotation =
    if beginning.is_concrete
    then block
    else _translate_block_with_abstract_beginning (beginning) (block)

  _translate_block_with_abstract_beginning (beginning : ClassBeginningAnnotation) (block : ClassEndAnnotation) : ClassEndAnnotation =
    ClassEndAnnotation_ (
      BlockBuilder_ ().build (
        Seq [String] (
          tc.coq_module_end_reserved_word + tc.coq_space + beginning.class_name + tc.coq_space + tc.coq_end_symbol,
          "",
          tc.coq_import_reserved_word + tc.coq_space + beginning.class_name + tc.coq_space + tc.coq_end_symbol
        )
      ),
      block.references
    )

  _get_constructor_declaration (beginning : ClassBeginningAnnotation) (abstract_functions : Seq [String] ) : String =
    tc.coq_module_end_reserved_word +
    tc.coq_space +
    beginning.class_name

  _get_as_parameter_list (parameters : Seq [String] ) : String =
    if parameters.isEmpty
    then ""
    else tc.coq_space + tc.coq_opening_brace + parameters.mkString (tc.coq_product_type_symbol + tc.coq_space) + tc.coq_closing_brace

  _get_class_beginning (references : Seq [AnnotatedBlock] ) : Option [ClassBeginningAnnotation] =
    references
      .flatMap ( lambda block -->
        match block
          case ClassBeginningAnnotation_ (b) ==> Some (ClassBeginningAnnotation_ (b) )
          case x ==> None
        end
      )
      .headOption

  _remove_variable (line : String) : String =
    _remove_variable_with (line) (line.indexOf (sc.type_membership_symbol) )

  _remove_variable_with (line : String) (index : Int) : String =
    if index < 0
    then line
    else line.substring (index + sc.type_membership_symbol.length).trim

  _translate_type_symbols (line : String) : String =
    line
      .replaceAll (sc.subtype_reserved_word, tc.coq_subtype_symbol)
      .replaceAll (sc.supertype_reserved_word, tc.coq_supertype_symbol)
      .replaceAll (sc.function_arrow_symbol, tc.coq_function_arrow_symbol)

  _get_initial_spaces (block : AnnotatedBlock) : String =
    _get_initial_spaces_with (_get_first_line (block) )

  _get_initial_spaces_with (line : String) : String =
    line.takeWhile ( lambda ch --> ch.isSpaceChar)

  _get_first_line (block : AnnotatedBlock) : String =
    block.lines.headOption.getOrElse ("")

end

