
class CoqClassEndBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.ClassEndAnnotation
    soda.translator.parser.annotation.ClassEndAnnotation_

  _mk_ClassEndAnnotation (block : Block) (references : Seq [AnnotatedBlock] )
      : ClassEndAnnotation =
    ClassEndAnnotation_ (block) (references)

  _tc = TranslationConstantToCoq_ ()

  _translate_block_with_abstract_beginning (beginning : ClassBeginningAnnotation)
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    _mk_ClassEndAnnotation (
      BlockBuilder_ () .build (
        Seq [String] (
          _tc .coq_module_end_reserved_word + _tc .coq_space + beginning .class_name +
          _tc .coq_space + _tc .coq_end_symbol ,
          "",
          _tc .coq_import_reserved_word + _tc .coq_space + beginning .class_name +
          _tc .coq_space + _tc .coq_end_symbol
        )
      ) ) (
      block .references
    )

  _translate_block_with_beginning (beginning : ClassBeginningAnnotation)
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    if beginning .is_concrete
    then block
    else _translate_block_with_abstract_beginning (beginning) (block)

  _translate_block_with (maybe_beginning : Option [ClassBeginningAnnotation] )
      (block : ClassEndAnnotation) : ClassEndAnnotation =
    if maybe_beginning .isEmpty
    then block
    else _translate_block_with_beginning (maybe_beginning .get) (block)

  _get_class_beginning (references : Seq [AnnotatedBlock] )
      : Option [ClassBeginningAnnotation] =
    references
      .flatMap (lambda block --> _get_as_class_beginning_annotation (block) )
      .headOption

  _get_as_class_beginning_annotation (annotated_block : AnnotatedBlock)
      : Option [ClassBeginningAnnotation] =
    match annotated_block
      case ClassBeginningAnnotation_ (b) ==> Some (ClassBeginningAnnotation_ (b) )
      case otherwise ==> None

  _translate_block (block : ClassEndAnnotation) : ClassEndAnnotation =
    _translate_block_with (_get_class_beginning (block.references) ) (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassEndAnnotation_ (block) (references) ==>
        _translate_block (_mk_ClassEndAnnotation (block) (references) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

