
class CoqClassAliasBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.block.Translator
    soda.translator.blocktr.TableTranslator_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.ClassAliasAnnotation
    soda.translator.parser.annotation.ClassAliasAnnotation_
    soda.translator.replacement.Replacement_

  _sc = SodaConstant_ ()

  _tc = TranslationConstantToCoq_ ()

  get_first_line (block : Block) : String =
    block .lines .headOption .getOrElse ("")

  _process_class_alias (line : String) : String =
    line
      .replace (_sc .class_alias_reserved_word + _sc .space , _tc .coq_notation_prefix)
      .replace (_sc .space + _sc .class_alias_definition_symbol + _sc .space ,
         _tc .coq_notation_infix) +
      _tc .coq_notation_suffix

  _translate_block (block : AnnotatedBlock) : Block =
    BlockBuilder_ () .build (
      Seq [String] (
        _process_class_alias (get_first_line (block) )
      )
    )

  _translate_class_alias_block (block : ClassAliasAnnotation)
      : ClassAliasAnnotation =
    ClassAliasAnnotation_ (_translate_block (block) )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassAliasAnnotation_ (block) ==>
        _translate_class_alias_block (ClassAliasAnnotation_ (block) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

