package soda.translator.extension.tocoq

class CoqTheoremBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.TheoremBlockAnnotation
    soda.translator.parser.annotation.TheoremBlockAnnotation_

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      | block : TheoremBlockAnnotation => _translate_block (block)
      | x => annotated_block
    end

  _translate_block (block : TheoremBlockAnnotation) : TheoremBlockAnnotation =
    TheoremBlockAnnotation_ (
      append (
        tc.coq_theorem_end) (prepend (
          tc.coq_theorem_begin_reserved_word) (remove_first_line (block)
        )
      )
    )

  prepend (prefix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail
    )

  append (suffix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix)
    )

  first_line (block : Block) : String =
    block.lines.headOption.getOrElse ("").trim

  remove_first_line (block : Block) : Block =
    if block.lines.isEmpty
    then block
    else BlockBuilder_ ().build (block.lines.tail)

end

