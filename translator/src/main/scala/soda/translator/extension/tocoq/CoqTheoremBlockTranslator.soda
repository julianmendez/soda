package soda.translator.extension.tocoq

class CoqTheoremBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.TheoremBlockAnnotation

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translate_for (block)

  translate_for (annotated_block: AnnotatedBlock): AnnotatedBlock =
    match annotated_block
      | block: TheoremBlockAnnotation => _translate_block (block)
      | x => annotated_block
    end

  _translate_block (block: TheoremBlockAnnotation): AnnotatedBlock =
    if is_a_theorem (block)
    then append (
      tc.coq_theorem_end, prepend (
        tc.coq_theorem_begin_reserved_word, remove_first_line (block) ) )
    else block

  prepend (prefix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail, block.block_annotation
    )

  append (suffix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix), block.block_annotation
    )

  first_line (block: AnnotatedBlock): String =
    block.lines.headOption.getOrElse ("").trim

  remove_first_line (block: AnnotatedBlock): AnnotatedBlock =
    if block.lines.isEmpty
    then block
    else BlockBuilder_ ().build ( block.lines.tail, block.block_annotation )

  is_a_theorem (block: AnnotatedBlock): Boolean =
    first_line (block) == tc.theorem_reserved_word

end

class CoqTheoremBlockTranslator_ ()
  extends
    CoqTheoremBlockTranslator

end

