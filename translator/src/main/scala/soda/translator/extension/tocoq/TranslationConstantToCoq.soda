
/**
 * This class contains constants that are specific for the Soda translator,
 * like reserved words for Soda and Coq.
 */

class TranslationConstantToCoq

  import
    soda.translator.parser.SodaConstant_

  soda_constant = SodaConstant_ ()

  coq_space = " "

  coq_new_line = "\n"

  coq_function_definition_symbol = ":="

  coq_type_membership_symbol = ":"

  coq_subtype_symbol = "<:"

  coq_supertype_symbol = ">:"

  coq_function_arrow_symbol = "->"

  coq_empty_string = ""

  coq_vertical_bar_symbol = "|"

  coq_match_end_translation = "end"

  coq_opening_parenthesis = "("

  coq_closing_parenthesis = ")"

  coq_comment_opening_symbol = "(*"

  coq_comment_closing_symbol = "*)"

  coq_opening_documentation = "(**"

  coq_closing_documentation = "*)"

  coq_some_variable_name = "x"

  coq_opening_brace = "{"

  coq_closing_brace = "}"

  coq_semicolon_symbol = ";"

  coq_dot_notation_symbol = "."

  coq_product_type_symbol = "*"

  coq_lambda_reserved_word = "fun"

  coq_lambda_arrow_symbol = "=>"

  coq_case_arrow_symbol = "=>"

  coq_quotes_symbol = "\""

  coq_apostrophe_symbol = "'"

  coq_equals_symbol = "=?"

  coq_less_than_symbol = "<?"

  coq_less_than_or_equal_to_symbol = "<=?"

  coq_case_translation = coq_vertical_bar_symbol + coq_space

  coq_not_reserved_word = "negb"

  coq_and_reserved_word = "andb"

  coq_or_reserved_word = "orb"

  coq_end_symbol = "."

  coq_class_reserved_word : String = "Class"

  coq_definition_reserved_word : String = "Definition"

  coq_inductive_reserved_word : String = "Inductive"

  coq_set_reserved_word : String = "Set"

  coq_type_reserved_word : String = "Type"

  coq_module_reserved_word : String = "Module"

  coq_module_end_reserved_word : String = "End"

  coq_import_reserved_word : String = "Import"

  coq_notation_reserved_word : String = "Notation"

  coq_recursive_definition_reserved_word : String = "Fixpoint"

  coq_inductive_end_symbol : String = coq_end_symbol

  coq_definition_end_symbol : String = coq_end_symbol

  coq_recursive_definition_end_symbol : String = coq_end_symbol

  coq_with_reserved_word : String = "with"

  coq_theorem_begin_reserved_word : String = "Theorem"

  coq_theorem_end_symbol : String = coq_end_symbol

  coq_directive_identifier : String = "coq"

  coq_notation_at_level_99 : String = "(at level 99)"

  coq_notation_prefix : String =
    coq_notation_reserved_word + coq_space + coq_quotes_symbol + coq_apostrophe_symbol

  coq_notation_infix : String =
     coq_apostrophe_symbol + coq_quotes_symbol + coq_space + coq_function_definition_symbol +
     coq_space

  coq_notation_suffix : String =
    coq_space + coq_notation_at_level_99 + coq_space + coq_end_symbol

  coq_prelude : Seq [String] =
    Seq (
      "",
      "Require Import Coq.ZArith.BinInt .",
      "(* https://coq.inria.fr/library/Coq.ZArith.BinInt.html *)",
      "",
      "Require Import Coq.Lists.List .",
      "(* https://coq.inria.fr/library/Coq.Lists.List.html *)",
      "",
      "Notation Int := Z .",
      ""
    )

  coq_recursive_function_prefixes : Seq [String] =
    Seq (
      "rec_",
      "_rec_",
      "tailrec_",
      "_tailrec_",
      "@tailrec"
    )

  non_definition_block_prefixes : Seq [String] =
    Seq (
      soda_constant .package_reserved_word ,
      soda_constant .import_reserved_word ,
      soda_constant .class_end_reserved_word ,
      soda_constant .class_reserved_word ,
      soda_constant .comment_opening_symbol
    )

  coq_reserved_words =
    coq_1 .++ (coq_2 .++ (coq_3 .++ (coq_4) ) )

  coq_1 : Seq [String] =
    Seq (
      "as",
      "else",
      "end",
      "forall",
      "fun",
      "if",
      "in",
      "let",
      "match",
      "then",
      "with"
    )

  coq_2 : Seq [String] =
    Seq (
      "Admitted",
      "Arguments",
      "Check",
      "Constructors",
      "End",
      "Eval",
      "Export",
      "Hint",
      "Implicit",
      "Import",
      "Module",
      "Notation",
      "Print",
      "Proof",
      "Qed",
      "Require",
      "Resolve",
      "Section",
      "Set",
      "Type",
      "Unset"
    )

  coq_3 : Seq [String] =
    Seq (
      "admit",
      "apply",
      "assert",
      "auto",
      "case",
      "compute",
      "destruct",
      "discriminate",
      "elim",
      "exact",
      "induction",
      "intros",
      "pose",
      "refine",
      "rewrite",
      "simpl",
      "specialize",
      "unfold"
    )

  coq_4 : Seq [String] =
    Seq (
      "CoFixpoint",
      "CoInductive",
      "Definition",
      "Example",
      "Fixpoint",
      "Global",
      "Hypothesis",
      "Inductive",
      "Instance",
      "Lemma",
      "Ltac",
      "Parameter",
      "Theorem",
      "Variable"
    )

  type_symbols_translation : Seq [Tuple2 [String] [String] ] =
    Seq (
      Tuple2 (soda_constant .subtype_reserved_word , coq_subtype_symbol) ,
      Tuple2 (soda_constant .supertype_reserved_word , coq_supertype_symbol) ,
      Tuple2 (soda_constant .function_arrow_symbol , coq_function_arrow_symbol) ,
      Tuple2 (soda_constant .opening_bracket_symbol , coq_opening_parenthesis + coq_space) ,
      Tuple2 (soda_constant .closing_bracket_symbol , coq_space + coq_closing_parenthesis)
    )

  function_symbols_translation : Seq [Tuple2 [String] [String] ] =
    Seq (
      Tuple2 (soda_constant .function_definition_symbol , coq_function_definition_symbol) ,
      Tuple2 (soda_constant .lambda_reserved_word , coq_lambda_reserved_word) ,
      Tuple2 (soda_constant .any_reserved_word , coq_lambda_reserved_word) ,
      Tuple2 (soda_constant .lambda_arrow_symbol , coq_lambda_arrow_symbol) ,
      Tuple2 (soda_constant .case_arrow_symbol , coq_case_arrow_symbol) ,
      Tuple2 (soda_constant .not_reserved_word , coq_not_reserved_word) ,
      Tuple2 (soda_constant .and_reserved_word , coq_and_reserved_word) ,
      Tuple2 (soda_constant .or_reserved_word , coq_or_reserved_word) ,
      Tuple2 (soda_constant .equals_symbol , coq_equals_symbol) ,
      Tuple2 (soda_constant .less_than_symbol , coq_less_than_symbol) ,
      Tuple2 (soda_constant .less_than_or_equal_to_symbol , coq_less_than_or_equal_to_symbol),
      Tuple2 (soda_constant .less_than_or_equal_to_unicode_symbol ,
        coq_less_than_or_equal_to_symbol)
    )

  type_translation : Seq [Tuple2 [String] [String] ] =
    Seq (
        Tuple2 ("Boolean" , "bool"),
        Tuple2 ("Nat" , "nat"),
        Tuple2 ("Option" , "option"),
        Tuple2 ("List" , "list"),
        Tuple2 ("Nil" , "nil"),
        Tuple2 ("Seq" , "list"),
        Tuple2 ("String" , "string"),
        Tuple2 ("BigInt" , "Z"),
        Tuple2 ("Tuple2" , "prod")
    )

  prefix_coq_non_soda : String = "__soda__"

  coq_non_soda : Seq [Tuple2 [String] [String] ] =
    coq_reserved_words
      .filter (lambda x --> not soda_constant.soda_reserved_words .contains (x))
      .map (lambda x --> Tuple2 (x , prefix_coq_non_soda + x) )

  is_coq_word (word : String) : Boolean =
    coq_reserved_words .contains (word)

  is_soda_word (word : String) : Boolean =
    soda_constant .soda_reserved_words.contains (word)

end

