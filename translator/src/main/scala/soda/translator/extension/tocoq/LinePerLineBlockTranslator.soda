package soda.translator.extension.tocoq

* LinePerLineBlockTranslator
  extends soda.translator.block.BlockTranslator = {

  + soda.lib.SomeSD_
  + soda.translator.block.Block
  + soda.translator.block.Block_
  + soda.translator.blocktr.TableBlockTranslator_
  + soda.translator.replacement.ParserStateEnum_
  + soda.translator.replacement.Replacement_
  + soda.translator.replacement.Tokenizer_
  + soda.translator.replacement.Token
  + soda.translator.replacement.Token_

  source = "soda"

  target = "coq"

  tc = TranslationConstantToCoq_ ()

  new_line = "\n"

  space = " "

  soda_opening_parenthesis: String = "("

  synonym_at_beginning = TableBlockTranslator_ (tc.synonym_at_beginning)

  translation_at_beginning_with_paren = TableBlockTranslator_ (tc.translation_at_beginning_with_paren)

  translation_at_beginning_without_paren_for_type_alias =
      TableBlockTranslator_ (tc.translation_at_beginning_without_paren_for_type_alias)

  translation_at_beginning_without_paren =
      TableBlockTranslator_ (tc.translation_at_beginning_without_paren)

  synonym = TableBlockTranslator_ (tc.synonym)

  main_translation = TableBlockTranslator_ (tc.main_translation)

  coq_non_soda = TableBlockTranslator_ (tc.coq_non_soda)

  beautifier = TableBlockTranslator_ (tc.beautifier)

  translate (block: Block): Block =
    Block_ (
      block
        .annotated_lines
        .map (annotated_line ->
          if annotated_line.isComment
          then annotated_line.line
          else _translate_non_comment (annotated_line.line)
        )
    )

  _translate_non_comment (line: String): String =
      SomeSD_ (line)
        .map (x -> Replacement_ (x).add_space_to_soda_line ().line)
        .map (x -> Tokenizer_ (x).tokens)
        .map (x -> _translate_line (x))
        .map (x -> _join_tokens (x))
        .map (x -> Replacement_ (x).remove_space_from_scala_line ().line)
        .value

  _translate_line (tokens: Seq [Token]): Seq [Token] =
    tokens.map (
      token ->
        if token.parser_state == ParserStateEnum_ ().plain
        then Token_ (_get_all_replacements (token), token.parser_state, token.index)
        else token
    )

  _join_tokens (tokens: Seq [Token]): String =
    tokens
      .map (token -> token.text)
      .mkString ("")

  _get_all_replacements (token: Token): String =
    Replacement_ (token.text)
      .add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet)
      .replace (coq_non_soda)
      .replace_at_beginning (token.index, synonym_at_beginning)
      .replace (synonym)
      .replace_with (try_definition)
      .replace (main_translation)
      .replace_regex (beautifier)
      .line

  try_definition (line: String): String =
    DefinitionTranslatorToCoq_ (line).translation

}

* LinePerLineBlockTranslator_ ()
  extends LinePerLineBlockTranslator

