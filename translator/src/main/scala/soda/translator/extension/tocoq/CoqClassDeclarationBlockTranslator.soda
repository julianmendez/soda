package soda.translator.extension.tocoq

class CoqClassDeclarationBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.block.Translator
    soda.translator.blocktr.TableTranslator_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.AbstractDeclarationAnnotation
    soda.translator.parser.annotation.AbstractDeclarationAnnotation_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.AbstractDeclarationAnnotation
    soda.translator.parser.annotation.AbstractDeclarationAnnotation_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.parser.annotation.ClassAliasAnnotation
    soda.translator.parser.annotation.ClassAliasAnnotation_
    soda.translator.replacement.Replacement_

  sc = SodaConstant_ ()

  tc = TranslationConstantToCoq_ ()

  soda_space : String = sc.space

  scala_space : String = " "

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassBeginningAnnotation_ (block) ==> _translate_class_beginning_block (ClassBeginningAnnotation_ (block) )
      case x ==> annotated_block
    end

  _translate_class_beginning_block (block : ClassBeginningAnnotation) : ClassBeginningAnnotation =
    ClassBeginningAnnotation_ (_translate_block (block) )

  _translate_block (block : AnnotatedBlock) : Block =
    if (has_condition_for_type_alias (get_first_line (block) ) )
    then block
    else
      BlockBuilder_ ().build (
        _process_head (block) ++ _process_tail (block)
      )

  _process_head (block : Block) : Seq [String] =
    _process_head_with (get_first_line (block) ) (block)

  _process_head_with (line : String) (block : Block) : Seq [String] =
    Seq [String] (
      Replacement_ (sc.space + line).replace_at_beginning (0) (get_table_translator (line) ).line.substring (sc.space.length) + tc.coq_space + tc.coq_end_symbol
    )

  _process_tail (block : Block) : Seq [String] =
    _process_if_extends (remove_first_line (block) )

  _process_if_extends (block : Block) : Seq [String] =
    if (get_first_line (block).trim == sc.extends_reserved_word)
    then Seq [String] (get_initial_spaces (block) ).++ ( _process_after_extends (remove_first_line (block) ) )
    else block.lines

  get_table_translator (line : String) : Translator =
    TableTranslator_ (
      Seq (Tuple2 (sc.class_reserved_word, tc.coq_module_reserved_word ) )
    )

  _process_after_extends (block : Block) : Seq [String] =
    if (get_first_line (block).trim.nonEmpty)
    then block.lines.map ( lambda line --> tc.coq_import_reserved_word + tc.coq_space + line.trim + tc.coq_space + tc.coq_end_symbol)
    else Seq [String] ()

  remove_first_line (block : Block) : Block =
    BlockBuilder_ ().build (
      if block.lines.isEmpty
      then block.lines
      else block.lines.tail
    )

  get_first_line (block : Block) : String =
    block.lines.headOption.getOrElse ("")

  get_initial_spaces (block : Block) : String =
    get_initial_spaces_for (get_first_line (block) )

  get_initial_spaces_for (line : String) : String =
    line.takeWhile ( lambda ch --> ch.isSpaceChar)

  contains_equals (line : String) : Boolean =
    line.trim.contains (sc.function_definition_symbol)

  has_condition_for_type_alias (line : String) : Boolean =
    contains_equals (line)

end

