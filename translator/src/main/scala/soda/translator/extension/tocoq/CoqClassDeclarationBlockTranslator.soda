
class CoqClassDeclarationBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.block.Translator
    soda.translator.blocktr.TableTranslator_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.ClassBeginningAnnotation
    soda.translator.parser.annotation.ClassBeginningAnnotation_
    soda.translator.replacement.Replacement_

  _sc = SodaConstant_ ()

  _tc = TranslationConstantToCoq_ ()

  soda_space : String = _sc .space

  scala_space : String = " "

  get_first_line (lines : Seq [String] ) : String =
    lines .headOption .getOrElse ("")

  get_initial_spaces_for (line : String) : String =
    line .takeWhile (lambda ch --> ch .isSpaceChar)

  get_initial_spaces (lines : Seq [String] ) : String =
    get_initial_spaces_for (get_first_line (lines) )

  _process_after_extends (lines : Seq [String] ) : Seq [String] =
    if (get_first_line (lines) .trim .nonEmpty)
    then lines .map (lambda line -->
       _tc .coq_import_reserved_word + _tc .coq_space + line .trim +
       _tc .coq_space + _tc .coq_end_symbol)
    else Seq [String] ()

  remove_first_line (lines : Seq [String] ) : Seq [String] =
    if lines .isEmpty
    then lines
    else lines .tail

  remove_first_line (block : Block) : Block =
    BlockBuilder_ () .build (remove_first_line (block .lines) )

  _process_if_extends (lines : Seq [String] ) : Seq [String] =
    if (get_first_line (lines) .trim == _sc .extends_reserved_word)
    then Seq [String] (
      get_initial_spaces (lines) ) .++ (_process_after_extends (remove_first_line (lines) ) )
    else lines

  _process_tail (lines : Seq [String] ) : Seq [String] =
    _process_if_extends (remove_first_line (lines) )

  get_table_translator (line : String) : Translator =
    TableTranslator_ (
      Seq (Tuple2 (_sc .class_reserved_word, _tc .coq_class_reserved_word ) )
    )

  _process_head_with (class_name : String) (line : String) (lines : Seq [String] )
      : Seq [String] =
    Seq [String] (
      _tc .coq_module_reserved_word + _tc .coq_space + class_name + _tc .coq_space +
      _tc .coq_end_symbol + _tc .coq_new_line + _tc .coq_new_line +
      Replacement_ (_sc .space + line)
        .replace_at_beginning (0) (get_table_translator (line) )
        .line .substring (_sc .space .length) +
      _tc .coq_space + _tc .coq_type_membership_symbol + _tc .coq_space +
      _tc .coq_type_reserved_word + _tc .coq_space + _tc .coq_function_definition_symbol
    )

  _process_head (class_name : String) (lines : Seq [String] ) : Seq [String] =
    _process_head_with (class_name) (get_first_line (lines) ) (lines)

  contains_equals (line : String) : Boolean =
    line .trim .contains (_sc .function_definition_symbol)

  has_condition_for_type_alias (line : String) : Boolean =
    contains_equals (line)

  _translate_block (block : ClassBeginningAnnotation) : Block =
    if (has_condition_for_type_alias (get_first_line (block .lines) ) )
    then block
    else
      BlockBuilder_ () .build (
        _process_head (block .class_name) (block .lines) ++ _process_tail (block .lines)
      )

  _translate_class_beginning_block (block : ClassBeginningAnnotation)
      : ClassBeginningAnnotation =
    ClassBeginningAnnotation_ (_translate_block (block) )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ClassBeginningAnnotation_ (block) ==>
        _translate_class_beginning_block (ClassBeginningAnnotation_ (block) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

