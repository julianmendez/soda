package soda.translator.extension.tocoq

class CoqDefinitionBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case block : FunctionDefinitionAnnotation => _translate_definition_block (block)
      case x => annotated_block
    end

  _translate_definition_block (block : FunctionDefinitionAnnotation) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  _translate_block (block : FunctionDefinitionAnnotation) : Block =
    if is_a_recursive_definition (block)
    then append (tc.coq_recursive_definition_end) (prepend (tc.coq_recursive_definition + space) (block) )
    else
      if is_a_definition (block)
      then append (tc.coq_definition_end) (prepend (tc.coq_definition + space) (block) )
      else block

  prepend (prefix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail
    )

  append (suffix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix)
    )

  is_a_recursive_definition (block : Block) : Boolean =
    tc.coq_recursive_function_prefixes.exists (lambda prefix --> first_line (block).startsWith (prefix))

  first_line (block : Block) : String =
    block.lines.headOption.getOrElse ("").trim

  is_a_definition (block : Block) : Boolean =
    not is_a_recursive_definition (block) and
    not tc.non_definition_block_prefixes.exists (lambda prefix --> block.contents.trim.startsWith (prefix))

end

