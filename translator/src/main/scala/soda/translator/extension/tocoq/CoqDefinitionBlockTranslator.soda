package soda.translator.extension.tocoq

* CoqDefinitionBlockTranslator
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.AnnotatedBlock
  + soda.translator.parser.BlockBuilder_

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate (block: AnnotatedBlock): AnnotatedBlock =
    if is_a_recursive_definition (block) then append (tc.coq_recursive_definition_end, prepend (tc.coq_recursive_definition + space, block) )
    else if is_a_definition (block) then append (tc.coq_definition_end, prepend (tc.coq_definition + space, block) )
    else block

  prepend (prefix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail
    )

  append (suffix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      block.lines.:+(suffix)
    )

  is_a_recursive_definition (block: AnnotatedBlock): Boolean =
    let
      first = block.lines.head.trim
      result = tc.coq_recursive_function_prefixes.exists (prefix -> first.startsWith (prefix))
    in result

  is_a_definition (block: AnnotatedBlock): Boolean =
    let
      contents = block.contents.trim
      result =
        not is_a_recursive_definition (block) and
        not tc.non_definition_block_prefixes.exists (prefix -> contents.startsWith (prefix))
    in result

}

* CoqDefinitionBlockTranslator_ ()
  extends CoqDefinitionBlockTranslator

