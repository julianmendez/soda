
class CoqDefinitionBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_

  _tc = TranslationConstantToCoq_ ()

  _append (suffix : String) (block : Block) : Block =
    BlockBuilder_ () .build (
      block .lines .:+ (suffix)
    )

  _prepend (prefix : String) (block : Block) : Block =
    BlockBuilder_ () .build (
      Seq[String] (prefix + block .lines .head) ++ block .lines .tail
    )

  is_a_definition (block : Block) : Boolean =
    not is_a_recursive_definition (block) and
    not _tc .non_definition_block_prefixes .exists (lambda prefix --> block .contents .trim .startsWith (prefix) )

  _translate_non_recursive_definition (block : FunctionDefinitionAnnotation) : Block =
    if is_a_definition (block)
    then _append (_tc .coq_definition_end_symbol) (_prepend (_tc .coq_definition_reserved_word + _tc .coq_space) (block) )
    else block

  first_line (block : Block) : String =
    block .lines .headOption .getOrElse ("") .trim

  is_a_recursive_definition (block : Block) : Boolean =
    _tc .coq_recursive_function_prefixes .exists (lambda prefix --> first_line (block) .startsWith (prefix) )

  _translate_block (block : FunctionDefinitionAnnotation) : Block =
    if is_a_recursive_definition (block)
    then _append (_tc .coq_recursive_definition_end_symbol) (_prepend (_tc .coq_recursive_definition_reserved_word + _tc .coq_space) (block) )
    else _translate_non_recursive_definition (block)

  _translate_definition_block (block : FunctionDefinitionAnnotation) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case FunctionDefinitionAnnotation_ (block) ==> _translate_definition_block (FunctionDefinitionAnnotation_ (block) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

