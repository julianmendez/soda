package soda.translator.extension.tocoq

class CoqDefinitionBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translate_for (block)

  translate_for (annotated_block: AnnotatedBlock): AnnotatedBlock =
    match annotated_block
      | block: FunctionDefinitionAnnotation => _translate_block (block)
      | x => annotated_block
    end

  _translate_block (block: FunctionDefinitionAnnotation): AnnotatedBlock =
    if is_a_recursive_definition (block)
    then append (tc.coq_recursive_definition_end, prepend (tc.coq_recursive_definition + space, block) )
    else
      if is_a_definition (block)
      then append (tc.coq_definition_end, prepend (tc.coq_definition + space, block) )
      else block

  prepend (prefix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail, block.block_annotation
    )

  append (suffix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix), block.block_annotation
    )

  is_a_recursive_definition (block: AnnotatedBlock): Boolean =
    tc.coq_recursive_function_prefixes.exists (prefix -> first_line (block).startsWith (prefix))

  first_line (block: AnnotatedBlock): String =
    block.lines.headOption.getOrElse ("").trim

  is_a_definition (block: AnnotatedBlock): Boolean =
    not is_a_recursive_definition (block) and
    not tc.non_definition_block_prefixes.exists (prefix -> block.contents.trim.startsWith (prefix))

end

class CoqDefinitionBlockTranslator_ ()
  extends
    CoqDefinitionBlockTranslator

end

