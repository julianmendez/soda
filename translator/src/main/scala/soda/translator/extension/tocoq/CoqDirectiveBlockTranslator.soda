
class CoqDirectiveBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.DirectiveBlockAnnotation
    soda.translator.parser.annotation.DirectiveBlockAnnotation_

  _tc = TranslationConstantToCoq_ ()

  _append (suffix : String) (block : Block) : Block =
    BlockBuilder_ () .build (
      block .lines .:+ (suffix)
    )

  _get_tail_or_empty (sequence : Seq [String] ) : Seq [String] =
    if sequence .isEmpty
    then sequence
    else sequence .tail

  _replace_first_line (first_line : String) (block : Block) : Block =
    BlockBuilder_ () .build (
      Seq (first_line)  .++ (_get_tail_or_empty (block .lines) )
    )

  _translate_block (block : DirectiveBlockAnnotation) : DirectiveBlockAnnotation =
    DirectiveBlockAnnotation_ (
      _append (
        _tc .coq_directive_end_reserved_word) (
          _replace_first_line (_tc .coq_directive_begin_reserved_word) (block)
      )
    )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case DirectiveBlockAnnotation_ (block) ==> _translate_block (DirectiveBlockAnnotation_ (block) )
      case otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

