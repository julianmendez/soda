package soda.translator.extension.tocoq

/**
 * This class translates Soda snippets into Coq snippets.
 */
* MicroTranslatorToCoq
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.AnnotatedBlock
  + soda.translator.block.BlockTranslatorPipeline_
  + soda.translator.blocktr.LineBackwardJoinerBlockTranslator_
  + soda.translator.blocktr.LineForwardJoinerBlockTranslator_
  + soda.translator.blocktr.TokenReplacement_
  + soda.translator.blocktr.TokenizedBlockTranslator_
  + soda.translator.parser.BlockAnnotator_
  + soda.translator.replacement.Token

  tc = TranslationConstantToCoq_ ()

  try_definition: Token -> String =
    lambda token ->
      DefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LineForwardJoinerBlockTranslator_ (),
        LineBackwardJoinerBlockTranslator_ (),
        BlockAnnotator_ (),
        MatchCaseBlockTranslator_ (),
        TokenReplacement_ (). add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet),
        TokenReplacement_ (). replace (tc.coq_non_soda),
        TokenReplacement_ (). replace_at_beginning (tc.synonym_at_beginning),
        TokenReplacement_ (). replace (tc.synonym),
        TokenizedBlockTranslator_ (try_definition),
        TokenReplacement_ (). replace (tc.main_translation),
        TokenReplacement_ (). replace_regex (tc.beautifier),
        CoqDefinitionBlockTranslator_ ()
      )
    )

  translate (block: AnnotatedBlock): AnnotatedBlock =
    translation_pipeline.translate (block)

}

* MicroTranslatorToCoq_ ()
  extends MicroTranslatorToCoq

