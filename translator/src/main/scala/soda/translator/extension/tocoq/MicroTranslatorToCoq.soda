package soda.translator.extension.tocoq

/**
 * This class translates Soda snippets into Coq snippets.
 */
* MicroTranslatorToCoq
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.Block
  + soda.translator.block.BlockTranslatorPipeline_
  + soda.translator.blocktr.LineBackwardJoinerBlockTranslator_
  + soda.translator.blocktr.LineForwardJoinerBlockTranslator_
  + soda.translator.blocktr.TableTranslator_
  + soda.translator.blocktr.TokenizedBlockTranslator_
  + soda.translator.replacement.ReplacementAux_
  + soda.translator.replacement.Token

  source = "soda"

  target = "coq"

  tc = TranslationConstantToCoq_ ()

  replace (table: Seq [ (String, String) ] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().replace (token.text, TableTranslator_ (table))

  replace_regex (table: Seq [ (String, String) ] ): Token -> String =
    lambda token ->
        ReplacementAux_ ().replace_regex (token.text, TableTranslator_ (table))

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        LineForwardJoinerBlockTranslator_ (),
        LineBackwardJoinerBlockTranslator_ (),
        MatchCaseBlockTranslator_ (),
        LinePerLineBlockTranslator_ (),
        TokenizedBlockTranslator_ (replace (tc.main_translation) ),
        TokenizedBlockTranslator_ (replace_regex (tc.beautifier) ),
        DefinitionBlockTranslator_ ()
      )
    )

  translate (block: Block): Block =
    translation_pipeline.translate (block)

}

* MicroTranslatorToCoq_ ()
  extends MicroTranslatorToCoq

