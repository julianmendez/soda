package soda.translator.extension.tocoq

/**
 * This class translates Soda snippets into Coq snippets.
 */

class MicroTranslatorToCoq
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.block.ConditionalBlockTranslator_
    soda.translator.blocktr.TokenReplacement_
    soda.translator.blocktr.TokenizedBlockTranslator_
    soda.translator.parser.annotation.AnnotationFactory_
    soda.translator.replacement.Token

  tc = TranslationConstantToCoq_ ()

  function_definition = BlockAnnotationEnum_ ().function_definition

  test_declaration = BlockAnnotationEnum_ ().test_declaration

  functions_and_tests = Seq (function_definition, test_declaration)

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translation_pipeline.translate (block)

  try_definition : Token -> String =
    lambda token -->
      DefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        MatchCaseBlockTranslator_ (),
        CoqDefinitionBlockTranslator_ (),
        CoqTheoremBlockTranslator_ (),
        CoqProofBlockTranslator_ (),
        ConditionalBlockTranslator_ (functions_and_tests, TokenizedBlockTranslator_ (try_definition) ),
        ConditionalBlockTranslator_ (functions_and_tests, TokenReplacement_ ().replace (tc.function_symbols_translation) )
      )
    )

end

