package soda.translator.extension.tocoq

/**
 * This class translates Soda snippets into Coq snippets.
 */

class MicroTranslatorToCoq
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockTranslatorPipeline_
    soda.translator.blocktr.TokenReplacement_
    soda.translator.blocktr.TokenizedBlockTranslator_
    soda.translator.parser.annotation.AnnotationFactory_
    soda.translator.replacement.Token

  tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translation_pipeline.translate (block)

  try_definition : Token -> String =
    lambda token ->
      DefinitionLineTranslator_ (token.text).translation

  translation_pipeline =
    BlockTranslatorPipeline_ (
      Seq (
        MatchCaseBlockTranslator_ (),
        CoqDefinitionBlockTranslator_ (),
        CoqTheoremBlockTranslator_ (),
        CoqProofBlockTranslator_ (),
        TokenReplacement_ (). add_spaces_to_symbols (symbols := tc.soda_brackets_and_comma.toSet),
        /* TokenReplacement_ (). replace (tc.coq_non_soda), FIXME */
        TokenReplacement_ (). replace_at_beginning (tc.synonym_at_beginning),
        TokenReplacement_ (). replace (tc.synonym),
        TokenizedBlockTranslator_ (try_definition),
        TokenReplacement_ (). replace (tc.main_translation),
        TokenReplacement_ (). replace_regex (tc.beautifier)
      )
    )

end

