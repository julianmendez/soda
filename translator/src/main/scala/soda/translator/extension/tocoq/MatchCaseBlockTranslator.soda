package soda.translator.extension.tocoq

class MatchCaseBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_
    soda.translator.parser.annotation.TestDeclarationAnnotation
    soda.translator.parser.annotation.TestDeclarationAnnotation_

  sc = SodaConstant_ ()

  tc = TranslationConstantToCoq_ ()

  soda_match_pattern = sc.match_reserved_word + " "

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case block : FunctionDefinitionAnnotation => _translate_function_block (block)
      case block : TestDeclarationAnnotation => _translate_test_block (block)
      case x => annotated_block
    end

  _translate_function_block (block : AnnotatedBlock) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  _translate_test_block (block : AnnotatedBlock) : TestDeclarationAnnotation =
    TestDeclarationAnnotation_ (_translate_block (block) )

  _translate_block (block : AnnotatedBlock) : Block =
    BlockBuilder_ ().build(
      block.lines
        .map (lambda line --> append_with_after_match (line) )
    )

  append_with_after_match (line : String) : String =
    if line.trim ().startsWith (soda_match_pattern)
    then line + tc.coq_space + tc.coq_with_reserved_word
    else line

end

