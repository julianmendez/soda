package soda.translator.extension.tocoq

class MatchCaseBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.SodaConstant_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.FunctionDefinitionAnnotation_
    soda.translator.parser.annotation.TestDeclarationAnnotation
    soda.translator.parser.annotation.TestDeclarationAnnotation_
    soda.translator.replacement.ReplacementAux_

  _sc = SodaConstant_ ()

  _soda_case_pattern = _sc.case_reserved_word + _sc.space

  _tc = TranslationConstantToCoq_ ()

  _soda_match_pattern = _sc.match_reserved_word + " "

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case FunctionDefinitionAnnotation_ (block) ==> _translate_function_block (FunctionDefinitionAnnotation_ (block) )
      case TestDeclarationAnnotation_ (block) ==> _translate_test_block (TestDeclarationAnnotation_ (block) )
      case x ==> annotated_block
    end

  _translate_function_block (block : AnnotatedBlock) : FunctionDefinitionAnnotation =
    FunctionDefinitionAnnotation_ (_translate_block (block) )

  _translate_test_block (block : AnnotatedBlock) : TestDeclarationAnnotation =
    TestDeclarationAnnotation_ (_translate_block (block) )

  _translate_block (block : AnnotatedBlock) : Block =
    BlockBuilder_ ().build(
      block.lines
        .map ( lambda line --> _append_with_after_match (line) )
        .map ( lambda line --> _replace_case (line) )
    )

  _append_with_after_match (line : String) : String =
    if line.trim ().startsWith (_soda_match_pattern)
    then line + _tc.coq_space + _tc.coq_with_reserved_word
    else line

  _replace_case (line : String) : String =
    if line.trim.startsWith (_soda_case_pattern)
    then ReplacementAux_ (). replace_first (line) (_soda_case_pattern) (_tc.coq_case_translation)
    else line

end

