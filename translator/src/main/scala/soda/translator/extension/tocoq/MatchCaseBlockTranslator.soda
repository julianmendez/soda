package soda.translator.extension.tocoq

class MatchCaseBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.FunctionDefinitionAnnotation
    soda.translator.parser.annotation.TestDeclarationAnnotation

  tc = TranslationConstantToCoq_ ()

  _labels = BlockAnnotationEnum_ ()

  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translate_for (block)

  translate_for (annotated_block: AnnotatedBlock): AnnotatedBlock =
    match annotated_block
      | block: FunctionDefinitionAnnotation => _translate_block (block)
      | block: TestDeclarationAnnotation => _translate_block (block)
      | x => annotated_block
    end

  _translate_block (block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build(
      block.lines
        .map (line -> append_with_after_match (line) ), block.block_annotation
    )

  append_with_after_match (line: String): String =
    if line.trim ().startsWith (tc.soda_match_pattern)
    then line + tc.space + tc.coq_with_reserved_word
    else line

end

class MatchCaseBlockTranslator_ ()
  extends
    MatchCaseBlockTranslator

end
