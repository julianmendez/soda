package soda.translator.extension.tocoq

class CoqProofBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.BlockAnnotationEnum_
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.ProofBlockAnnotation

  space = " "

  tc = TranslationConstantToCoq_ ()


  translate: AnnotatedBlock -> AnnotatedBlock =
    lambda block ->
      translate_for (block)

  translate_for (annotated_block: AnnotatedBlock): AnnotatedBlock =
    match annotated_block
      | block: ProofBlockAnnotation => _translate_block (block)
      | x => annotated_block
    end

  _translate_block (block: ProofBlockAnnotation): AnnotatedBlock =
    if is_a_proof (block)
    then append (
      tc.coq_proof_end_reserved_word,
        replace_first_line (tc.coq_proof_begin_reserved_word, block) )
    else block

  prepend (prefix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      Seq[String] (prefix + block.lines.head) ++ block.lines.tail, block.block_annotation
    )

  append (suffix: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix), block.block_annotation
    )

  get_first_line (block: AnnotatedBlock): String =
    block.lines.headOption.getOrElse ("").trim

  replace_first_line (first_line: String, block: AnnotatedBlock): AnnotatedBlock =
    BlockBuilder_ ().build (
      Seq (first_line) .++ (get_tail_or_empty (block.lines) ),
      block.block_annotation
    )

  get_tail_or_empty (sequence: Seq [String]): Seq [String] =
    if sequence.isEmpty
    then sequence
    else sequence.tail

  is_a_proof (block: AnnotatedBlock): Boolean =
    get_first_line (block) == tc.proof_reserved_word

end

class CoqProofBlockTranslator_ ()
  extends
    CoqProofBlockTranslator

end

