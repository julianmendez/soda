package soda.translator.extension.tocoq

class CoqProofBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.ProofBlockAnnotation
    soda.translator.parser.annotation.ProofBlockAnnotation_

  space = " "

  tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case block : ProofBlockAnnotation ==> _translate_block (block)
      case x ==> annotated_block
    end

  _translate_block (block : ProofBlockAnnotation) : ProofBlockAnnotation =
    ProofBlockAnnotation_ (
      append (
        tc.coq_proof_end_reserved_word) (
          replace_first_line (tc.coq_proof_begin_reserved_word) (block)
      )
    )

  prepend (prefix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      Seq [String] (prefix + block.lines.head) ++ block.lines.tail
    )

  append (suffix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix)
    )

  get_first_line (block : AnnotatedBlock) : String =
    block.lines.headOption.getOrElse ("").trim

  replace_first_line (first_line : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      Seq (first_line) .++ (get_tail_or_empty (block.lines) )
    )

  get_tail_or_empty (sequence : Seq [String] ) : Seq [String] =
    if sequence.isEmpty
    then sequence
    else sequence.tail

end

