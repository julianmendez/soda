package soda.translator.extension.tocoq

class CoqProofBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.block.Block
    soda.translator.parser.BlockBuilder_
    soda.translator.parser.annotation.ProofBlockAnnotation
    soda.translator.parser.annotation.ProofBlockAnnotation_

  _tc = TranslationConstantToCoq_ ()

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case ProofBlockAnnotation_ (block) ==> _translate_block (ProofBlockAnnotation_ (block) )
      case x ==> annotated_block

  _translate_block (block : ProofBlockAnnotation) : ProofBlockAnnotation =
    ProofBlockAnnotation_ (
      _append (
        _tc.coq_proof_end_reserved_word) (
          _replace_first_line (_tc.coq_proof_begin_reserved_word) (block)
      )
    )

  _append (suffix : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      block.lines.:+ (suffix)
    )

  _replace_first_line (first_line : String) (block : Block) : Block =
    BlockBuilder_ ().build (
      Seq (first_line) .++ (_get_tail_or_empty (block.lines) )
    )

  _get_tail_or_empty (sequence : Seq [String] ) : Seq [String] =
    if sequence.isEmpty
    then sequence
    else sequence.tail

end

