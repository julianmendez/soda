package soda.translator.blocktr

class TokenReplacement

  import
    soda.translator.replacement.ReplacementAux_
    soda.translator.replacement.ReplacementWithTranslator_

  add_spaces_to_symbols (symbols: Set [Char] ): TokenizedBlockTranslator =
    TokenizedBlockTranslator_ (
      lambda token ->
        ReplacementAux_ ().add_spaces_to_symbols (token.text, symbols)
    )

  replace (table: Seq [ (String, String) ] ): TokenizedBlockTranslator =
    TokenizedBlockTranslator_ (
      lambda token ->
        ReplacementWithTranslator_ (TableTranslator_ (table)).replace (token.text)
    )

  replace_regex (table: Seq [ (String, String) ] ): TokenizedBlockTranslator =
    TokenizedBlockTranslator_ (
      lambda token ->
        ReplacementWithTranslator_ (TableTranslator_ (table)).replace_regex (token.text)
    )

  replace_at_beginning (table: Seq [ (String, String) ] ): TokenizedBlockTranslator =
    TokenizedBlockTranslator_ (
      lambda token ->
        ReplacementWithTranslator_ (TableTranslator_ (table)).replace_at_beginning (token.text, token.index)
    )

end

class TokenReplacement_ ()
  extends
    TokenReplacement

end

