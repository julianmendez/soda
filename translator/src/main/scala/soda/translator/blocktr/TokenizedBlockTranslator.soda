
class TokenizedBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract
    replace_token : soda.translator.replacement.Token -> String

  import
    soda.lib.SomeSD
    soda.translator.block.AnnotatedBlock
    soda.translator.block.AnnotatedLine
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.AnnotationFactory
    soda.translator.replacement.ParserStateEnum
    soda.translator.replacement.Replacement
    soda.translator.replacement.Token
    soda.translator.replacement.Tokenizer

  _join_tokens (tokens : Seq [Token] ) : String =
    tokens
      .map (lambda token --> token .text)
      .mkString ("")

  _get_token_translated_if_in_state (token : Token) : Token =
    if token .parser_state == ParserStateEnum .mk .plain
    then Token .mk (replace_token (token) ) (token .parser_state) (token .index)
    else token

  _translate_line (tokens : Seq [Token] ) : Seq [Token] =
    tokens
      .map (lambda token --> _get_token_translated_if_in_state (token) )

  _translate_non_comment (line : String) : String =
      SomeSD .mk [String] (line)
        .map (lambda x --> Replacement .mk (x) .add_space_to_soda_line () .line)
        .map (lambda x --> Tokenizer .mk (x) .tokens)
        .map (lambda x --> _translate_line (x) )
        .map (lambda x --> _join_tokens (x) )
        .map (lambda x --> Replacement .mk (x) .remove_space_from_translated_line () .line)
        .getOrElse ("")

  _translate_if_not_a_comment (annotated_line : AnnotatedLine) : String =
    if annotated_line .is_comment
    then annotated_line .line
    else _translate_non_comment (annotated_line .line)

  translate_for (block : AnnotatedBlock) : AnnotatedBlock =
    AnnotationFactory .mk .update_block (
      block) (
      BlockBuilder .mk .build (
        block
          .annotated_lines
          .map (lambda annotated_line --> _translate_if_not_a_comment (annotated_line) )
      )
    )

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

