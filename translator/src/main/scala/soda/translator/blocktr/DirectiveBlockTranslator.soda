
class DirectiveBlockTranslator
  extends
    soda.translator.block.BlockTranslator

  abstract
    identifier : String
    opening_comment : String
    closing_comment : String

  import
    soda.translator.block.AnnotatedBlock
    soda.translator.parser.BlockBuilder
    soda.translator.parser.annotation.DirectiveBlockAnnotation
    soda.translator.parser.annotation.DirectiveBlockAnnotation_

  _get_first_or_empty (sequence : Seq [String] ) : String =
    match sequence
      case x +: xs ==> x
      case Nil ==> ""

  _remove_first_if_possible (sequence : Seq [String] ) : Seq [String] =
    match sequence
      case x +: xs ==> xs
      case Nil ==> sequence

  _comment_block_out (lines : Seq [String] ) : Seq [String] =
    Seq (opening_comment) .++ (lines .++ (Seq (closing_comment) ) )

  _directive_applies (lines : Seq [String] ) : Boolean =
    (_get_first_or_empty (lines) ) .contains (identifier)

  _translate_lines (lines : Seq [String] ) : Seq [String] =
    if _directive_applies (lines)
    then _remove_first_if_possible (lines)
    else _comment_block_out (lines)

  _translate_block (block : DirectiveBlockAnnotation) : DirectiveBlockAnnotation =
    DirectiveBlockAnnotation .mk (
      BlockBuilder .mk .build (
        _translate_lines (block .lines)
      )
    )

  translate_for (annotated_block : AnnotatedBlock) : AnnotatedBlock =
    match annotated_block
      case DirectiveBlockAnnotation_ (block) ==> _translate_block (DirectiveBlockAnnotation .mk (block) )
      case _otherwise ==> annotated_block

  translate : AnnotatedBlock -> AnnotatedBlock =
    lambda block -->
      translate_for (block)

end

