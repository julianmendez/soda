package soda.translator.blocktr

* LineForwardJoinerBlockTranslator
  extends soda.translator.block.BlockTranslator = {

  + soda.translator.block.Block
  + soda.translator.parser.BlockBuilder_

  source = "soda"

  target = "soda"

  space = " "

  reserved_word_joiner: Seq [String] = Seq (
    "extends", "with"
  )

  symbol_forward_joiner: Seq [String] = Seq (
    ",", "(", "["
  )

  translate (block: Block): Block =
    BlockBuilder_ ().build (
        Joiner_ (block.lines, is_a_forward_join).join
    )

  is_a_forward_join (previous_line: String, current_line: String): Boolean =
    is_a_symbol_forward_join (previous_line) or
    is_a_reserved_word_forward_join (previous_line)

  is_a_symbol_forward_join (previous_line: String): Boolean =
    symbol_forward_joiner
      .exists (previous_line.endsWith)

  is_a_reserved_word_forward_join (previous_line: String): Boolean =
    reserved_word_joiner
      .map (x -> space + x)
      .exists (previous_line.endsWith)

}

* LineForwardJoinerBlockTranslator_ ()
  extends LineForwardJoinerBlockTranslator

