package soda.translator.blocktr

* LineJoinerToScala
  extends soda.translator.block.MultiLineProcessor = {

  reserved_word_joiner: Seq [String] = Seq (
    "extends", "with"
  )

  symbol_forward_joiner: Seq [String] = Seq (
    ",", "(", "["
  )

  symbol_backward_joiner: Seq [String] = Seq (
    ")", "]"
  )

  comma = ","

  soda_opening_parenthesis: String = "("

  soda_closing_parenthesis: String = ")"

  soda_opening_bracket: String = "["

  soda_closing_bracket: String = "]"

  space = " "

  joined_lines_with_forward_join: Seq [String] =
    Joiner_ (lines, is_a_forward_join).join

  joined_lines_with_backward_join: Seq [String] =
    Joiner_ (lines, is_a_backward_join).join

  is_a_forward_join (previous_line: String, current_line: String): Boolean =
    is_a_symbol_forward_join (previous_line) or
    is_a_reserved_word_forward_join (previous_line)

  is_a_symbol_forward_join (previous_line: String): Boolean =
    symbol_forward_joiner
      .exists (previous_line.endsWith)

  is_a_reserved_word_forward_join (previous_line: String): Boolean =
    reserved_word_joiner
      .map (x -> space + x)
      .exists (previous_line.endsWith)

  is_a_backward_join (previous_line: String, current_line: String): Boolean =
    is_a_symbol_backward_join (current_line) or
    is_a_reserved_word_backward_join (current_line)

  is_a_symbol_backward_join (current_line: String): Boolean =
    symbol_backward_joiner
      .exists (current_line.startsWith)

  is_a_reserved_word_backward_join (current_line: String): Boolean =
    reserved_word_joiner
      .map (x -> x + space)
      .exists (current_line.startsWith)

}

* LineJoinerToScala_ (lines: Seq [String])
  extends LineJoinerToScala

