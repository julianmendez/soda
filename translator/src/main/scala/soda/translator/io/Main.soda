package soda.translator.io


@main
/**
 * This is the main entry point.
 */
* Main() = {
  + java.io.File
  + soda.translator.language.MicroTranslator

  SodaExtension: String = ".soda"
  ScalaExtension: String = ".scala"

  Help: String = SimpleIO().read_resource("/soda/translator/documentation/help.txt")

  Title_and_version: String = {
    packg = this.getClass.getPackage
    name = Option(packg.getImplementationTitle).getOrElse("")
    version = Option(packg.getImplementationVersion).getOrElse("")
    (name + " " + version).trim
  }

  main(args: Array[String]): Unit =
    if args.length == 1 then process_directory(args(0))
    else if args.length == 2 then translate(args(0), args(1))
    else println(Title_and_version + "\n\n" + Help)

  process_directory(start: String): Boolean =
    DirectoryProcessor(start, process_soda_file).process()

  get_input_output_file_names(input_name: String): FileNamePair =
    if input_name.endsWith(SodaExtension)
    then FileNamePair(input_name,
      input_name.substring(0, input_name.length - SodaExtension.length) + ScalaExtension)
    else FileNamePair(input_name + SodaExtension, input_name + ScalaExtension)

  process_soda_file(file: File): Boolean = {
    file_name = file.getAbsolutePath
    t = get_input_output_file_names(file_name)
    translate(t.input_file_name, t.output_file_name)
  }

  translate(input_file_name: String, output_file_name: String): Boolean = {
    input = SimpleIO().read_file(input_file_name)
    output = MicroTranslator().translate_program(input)
    SimpleIO().write_file(output_file_name, content := output)
  }

  * FileNamePair(input_file_name: String, output_file_name: String)

}

