package soda.translator.io

+ java.io.File

+ soda.translator.language.MicroTranslator

@main
/**
 * This is the main entry point.
 */
* Main() {

  SodaExtension: String = ".soda"
  ScalaExtension: String = ".scala"

  Library_marker_file = "lib.soda"
  Library_content_file = "/sodalib.soda"
  Soda_suffix = ".soda"


  Help: String = "\n" +
    "\nUsage:" +
    "\n  soda SODA_SCALA_INPUT" +
    "\nor" +
    "\n  soda SODA_INPUT SCALA_OUTPUT" +
    "\n" +
    "\nwhere" +
    "\n" +
    "\n  SODA_SCALA_INPUT is used to create the Soda input file and Scala output file. " +
    "\nIf it is a directory, it scans recursively the directory to translate Soda files." +
    "\nIf the extension is " + SodaExtension + ", the output file has extension " + ScalaExtension + "." +
    "\nOtherwise, the extension " + SodaExtension + " and " + ScalaExtension + " are appended to create the input and output files respectively." +
    "\n" +
    "\n" +
    "\n  SODA_INPUT is the Soda input file, regardless of the extension" +
    "\n" +
    "\n  SCALA_OUTPUT is the Scala output file, regardless of the extension" +
    "\n" +
    "\n"


  get_title_and_version: String = {
    packg = this.getClass.getPackage
    name = Option(packg.getImplementationTitle).getOrElse("")
    version = Option(packg.getImplementationVersion).getOrElse("")
    (name + " " + version).trim
  }

  main(args: Array[String]): Unit = {
    result =
      if args.length == 1 then process_directory(args(0))
      else if args.length == 2 then translate(args(0), args(1))
      else {
        println(get_title_and_version + Help)
        true
      }
  }

  process_directory(start: String): Boolean = {
    lib_content = SimpleIO().read_resource(Library_content_file)

    result =
      lib_files
        .map(file -> SimpleIO().write_file(file.getAbsolutePath, content=lib_content))
        .forall(x -> x) and
      soda_files
        .map(file -> process_soda_file(file))
        .forall(x -> x)

    all_files = DirectoryScanner().get_all_files(new File(start))
    soda_files = all_files
        .filter(x -> x.isFile)
        .filter(x -> x.getName.endsWith(Soda_suffix))
    lib_files = all_files
        .filter(x -> x.isFile)
        .filter(file -> file.getName == Library_marker_file)

    result
  }

  process_soda_file(file: File): Boolean = {
    file_name = file.getAbsolutePath
    t = get_input_output_file_names(file_name)
    translate(t.input_file_name, t.output_file_name)
  }

  * FileNamePair(input_file_name: String, output_file_name: String)

  get_input_output_file_names(input_name: String): FileNamePair =
    if input_name.endsWith(SodaExtension)
    then FileNamePair(input_name,
      input_name.substring(0, input_name.length - SodaExtension.length) + ScalaExtension)
    else FileNamePair(input_name + SodaExtension, input_name + ScalaExtension)

  translate(input_file_name: String, output_file_name: String): Boolean = {
    input = SimpleIO().read_file(input_file_name)
    output = MicroTranslator().translate_program(input)
    SimpleIO().write_file(output_file_name, content=output)
  }

}

