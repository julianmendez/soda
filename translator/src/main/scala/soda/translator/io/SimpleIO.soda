
/**
 * This is an auxiliary class to read small files.
 */

class SimpleFileReader

  abstract

  import
    java.io.BufferedReader
    java.io.InputStream
    java.io.InputStreamReader
    java.nio.file.Files
    java.nio.file.Paths
    java.util.stream.Collectors

  new_line = "\n"

  read_file (file_name : String) : String =
    @new String (Files .readAllBytes (Paths .get (file_name) ) )

  read_resource (file_name : String) : String =
    read_input_stream (getClass .getResourceAsStream (file_name) )

  read_input_stream (input_stream : InputStream) : String =
    _read_reader_content ( @new BufferedReader ( @new InputStreamReader (input_stream) ) )

  _read_reader_content (reader : BufferedReader) : String =
    reader .lines () .collect (Collectors .joining (new_line) )

end

/**
 * This is an auxiliary class to write small files.
 */

class SimpleFileWriter

  abstract

  import
    soda.lib.SomeSD
    java.io.File
    java.io.FileWriter
    java.io.Writer

  _write_content (writer : Writer) (content : String) : Boolean =
    SomeSD .mk [Boolean] (true)
      .map (lambda x --> writer .write (content) )
      .map (lambda x --> writer .flush () )
      .map (lambda x --> writer .close () )
      .map (lambda x --> true)
      .getOrElse (false)

  write_file_with (file : File) (content : String) : Boolean =
    _write_content (@new FileWriter (file , false) ) (content)

  write_file (file_name : String) (content : String) : Boolean =
    write_file_with (@new File (file_name) ) (content)

  create_file (parent_directory : String) (file_name : String) : File =
    @new File (parent_directory , file_name)

  append_file_with (file : File) (content : String) : Boolean =
    _write_content (@new FileWriter (file , true) ) (content)

  append_file (file_name : String) (content : String) : Boolean =
    append_file_with (@new File (file_name) ) (content)

end

