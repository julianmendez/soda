package soda.translator.language


* LineJoiner(lines: Seq[String]) = {
  + soda.lib.Rec

  Comma = ","
  SodaOpeningParenthesis: String = "("

  get_joined_lines =
    processed_lines.reverse

  processed_lines = {
    pairs = Rec().foldLeft(lines, initial_value, next_value)

    if pairs.in_process_rev.isEmpty
    then pairs.processed_rev
    else pairs.processed_rev.+:(rev_list_as_element(pairs.in_process_rev, ""))
  }

  initial_value = FoldTuple(Seq(), Seq())

  next_value(pair: FoldTuple, head: String): FoldTuple =
    if head.trim().endsWith(Comma) or head.trim().endsWith(SodaOpeningParenthesis)
    then FoldTuple(pair.in_process_rev.+:(head), pair.processed_rev)
    else {
      new_head = rev_list_as_element(pair.in_process_rev, head)

      FoldTuple(Seq(), pair.processed_rev.+:(new_head))
    }

  rev_list_as_element(in_process_rev: Seq[String], line: String): String =
    in_process_rev.reverse.mkString("") + line

  * FoldTuple(in_process_rev: Seq[String], processed_rev: Seq[String])
}

