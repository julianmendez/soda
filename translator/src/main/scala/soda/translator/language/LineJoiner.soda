package soda.translator.language


* LineJoiner(lines: Seq[String]) = {
  + soda.lib.Rec
  + soda.lib.SomeSD

  Comma = ","
  SodaOpeningParenthesis: String = "("
  SodaClosingParenthesis: String = ")"
  SodaOpeningBracket: String = "["
  SodaClosingBracket: String = "]"

  get_joined_lines_with_opening_brackets: Seq[String] =
    Joiner(lines, condition_for_forward_join).join

  get_joined_lines_with_closing_brackets: Seq[String] =
    Joiner(lines, condition_for_backward_join).join

  condition_for_forward_join(previous_line: String, current_line: String): Boolean =
    Translation().ForwardJoiner
      .exists(previous_line.endsWith)

  condition_for_backward_join(previous_line: String, current_line: String): Boolean =
    Translation().BackwardJoiner
      .exists(current_line.startsWith)

  * Joiner(lines_to_join: Seq[String], condition_for_join: (String, String) -> Boolean) = {

    join: Seq[String] = reverse_join.reverse

    reverse_join: Seq[String] =
      if lines_to_join.isEmpty
      then lines_to_join
      else
        let
          tuple = Rec().foldLeft(lines_to_join.tail, initial_value(lines_to_join.head), next_value)
          result =
            if tuple.in_process_rev.isEmpty
            then tuple.processed_rev.+:(tuple.previous_line)
            else tuple.processed_rev.+:(_rev_list_as_element(tuple.in_process_rev, tuple.previous_line))
        in result

    initial_value(first_line: String): FoldTuple = FoldTuple(Seq(), Seq(), first_line)

    next_value(tuple: FoldTuple, head: String): FoldTuple =
      if condition_for_join(tuple.previous_line.trim, head.trim)
      then FoldTuple(tuple.in_process_rev.+:(tuple.previous_line), tuple.processed_rev, head)
      else
        let
          processed_line = _rev_list_as_element(tuple.in_process_rev, tuple.previous_line)
        in FoldTuple(Seq(), tuple.processed_rev.+:(processed_line), head)

    _rev_list_as_element(in_process_rev: Seq[String], line: String): String =
      in_process_rev.reverse.mkString("") + line

    * FoldTuple(in_process_rev: Seq[String], processed_rev: Seq[String], previous_line: String)
  }
}

