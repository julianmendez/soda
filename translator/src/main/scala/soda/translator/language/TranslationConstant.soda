package soda.translator.language


/**
 * This class contains constants that are specific for the Soda translator, like reserved words for Soda and Scala.
 */
* TranslationConstant = {

  soda_definition: String = "="

  soda_colon: String = ":"

  soda_in_reserved_word: String = "in"
  soda_in_pattern: String = soda_in_reserved_word + " "
  scala_in_translation: String = " }"

  soda_class_reserved_word: String = "class"

  scala_definition: String = "def"
  scala_value: String = "lazy val"
  scala_entry_point: String = "object EntryPoint {\n  def main(args: Array[String]): Unit = Main().main(args)\n}\n"

  soda_reserved_words = Seq(
    "=",
    ":",
    "->",
    ":=",
    "if",
    "then",
    "else",
    "let",
    "in",
    "class",
    "has",
    "extends",
    "with",
    "this",
    "subtype",
    "supertype",
    "false",
    "true",
    "not",
    "and",
    "or",
    "package",
    "import",
    "is",
    "*",
    "-",
    "+"
  )

  /**
   * Scala 3 keywords:
   *   https://dotty.epfl.ch/docs/internals/syntax.html
   * Scala 2 keywords:
   *   https://www.scala-lang.org/files/archive/spec/2.13/01-lexical-syntax.html
   */
  scala_reserved_words =
    scala_3_regular_keywords ++ scala_3_soft_keywords ++ scala_2_extra_keywords

  scala_3_regular_keywords = Seq(
    "abstract",
    "case",
    "catch",
    "class",
    "def",
    "do",
    "else",
    "enum",
    "export",
    "extends",
    "false",
    "final",
    "finally",
    "for",
    "given",
    "if",
    "implicit",
    "import",
    "lazy",
    "match",
    "new",
    "null",
    "object",
    "override",
    "package",
    "private",
    "protected",
    "return",
    "sealed",
    "super",
    "then",
    "throw",
    "trait",
    "true",
    "try",
    "type",
    "val",
    "var",
    "while",
    "with",
    "yield",
    ":",
    "=",
    "<-",
    "=>",
    "<:",
    ">:",
    "#",
    "@",
    "=>>",
    "?=>"
  )

  scala_3_soft_keywords = Seq(
    "as",
    "derives",
    "end",
    "extension",
    "infix",
    "inline",
    "opaque",
    "open",
    "transparent",
    "using",
    "|",
    "*",
    "+",
    "-"
  )

  scala_2_extra_keywords = Seq(
    "forSome",
    "macro",
    "this",
    "_",
    "<%",
    "\u21D2",
    "\u2190"
  )

  SynonymAtBeginning: Seq[(String, String)] = Seq(
    ("*", "class"),
    ("+", "import")
  )

  TranslationAtBeginningWithParen: Seq[(String, String)] = Seq(
    ("class", "case class"),
    ("has", "def")
  )

  TranslationAtBeginningWithoutParen: Seq[(String, String)] = Seq(
    ("class", "trait"),
    ("has", "def"),
    ("package", "package"),
    ("import", "import"),

    /** Annotations */
    ("@override", "override"),
    ("@tailrec", "import scala.annotation.tailrec\n        @tailrec"),
    ("@main", scala_entry_point)
  )

  Synonym: Seq[(String, String)] = Seq(
    ("is", "=")
  )

  MainTranslation: Seq[(String, String)] = Seq(
    (":", ":"),
    ("->", "=>"),
    (":=", "="),
    ("if", "if ("),
    ("then", ")"),
    ("else", "else"),
    ("let", "{"),
    ("in", " "),
    ("extends", "extends"),
    ("with", "with"),
    ("this", "this"),
    ("subtype", "<:"),
    ("supertype", ">:"),
    ("false", "false"),
    ("true", "true"),
    ("not", "!"),
    ("and", "&&"),
    ("or", "||"),

    /** Annotations */
    ("@new", "new")
  )

  PrefixScalaNonSoda = "__soda__"

  ScalaNonSoda: Seq[(String, String)] =
    scala_reserved_words
      .filter(x -> not soda_reserved_words.contains(x))
      .map(x -> (x, PrefixScalaNonSoda + x) )

  SodaBracketsAndComma = Seq( '(', ')', '[', ']', '{', '}', ',' )

  Beautifier: Seq[(String, String)] = Seq(
    ("\\.\\s+", "."),
    ("=\\s+", "= "),
    ("\\s+=", " ="),
    ("\\(\\s+", "("),
    ("\\[\\s+", "["),
    ("\\s+\\]", "]"),
    ("\\s+,", ","),
    (",\\s+", ", "),
    ("\\s+:", ":"),
    (":\\s+", ": ")
  )

  ReservedWordJoiner: Seq[String] = Seq(
    "extends", "with"
  )

  SymbolForwardJoiner: Seq[String] = Seq(
    ",", "(", "["
  )

  SymbolBackwardJoiner: Seq[String] = Seq(
    ")", "]"
  )

  is_scala_word(word: String): Boolean =
    scala_reserved_words.contains(word)

  is_soda_word(word: String): Boolean =
    soda_reserved_words.contains(word)
}

* Translation() extends TranslationConstant

