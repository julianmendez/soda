package soda.translator.language


/**
 * A line containing the definition sign will be classified as a definition.
 * The definitions need to be identified as 'val', 'def', or 'class'.
 *
 * 'class' is for class definition.
 * It is detected if the 'class' reserved word is also in the same line.
 *
 * 'val' is for value definition.
 * It is detected in three cases.
 * Case 1: The line does not have a opening parenthesis, e.g. `a = 1`
 * Case 2: The first opening parenthesis is after the definition sign, e.g. `x = f(y)`
 * Case 3: The first opening parenthesis is after a colon, e.g. `x: (A, B) -> C = (x, y) -> f(x,y)`
 *
 * 'def' is for function definition.
 * If it does not fit in any of the 'val' cases.
 *
 * Formerly there was another case for 'val'.
 * Deprecated Case: The first non-blank character of a line is an open parenthesis, e.g. `(x, y) = (0, 1)`
 * This was implemented simply as:
 * `line.trim.startsWith(SodaOpeningParenthesis)`
 * This is no longer supported.
 *
 * @param line line
 * @return a translated line
 */
* DefinitionTranslator(line: String) = {
  + soda.lib.OptionSD
  + soda.lib.SomeSD
  + soda.translator.replacement.Replacement

  SodaOpeningParenthesis: String = "("
  SodaSpace: String = " "
  ScalaSpace: String = " "

  get_translation = find_definition(line).opt(
    ifEmpty := line,
    ifNonEmpty := position -> try_found_definition(position).line
  )

  is_class_definition =
    indexOf(line, SodaSpace + Translation().SodaClassReservedWord + SodaSpace).isDefined

  translate_class_definition =
    Replacement(line).replace_all(SodaSpace + Translation().SodaDefinition, "")

  translate_val_definition =
    Replacement(line).add_after_spaces( Translation().ScalaValue + ScalaSpace )

  translate_def_definition =
    Replacement(line).add_after_spaces( Translation().ScalaDefinition + ScalaSpace )

  try_found_definition(position: Int): Replacement =
    if is_class_definition then translate_class_definition
    else if is_val_definition(position) then translate_val_definition
    else translate_def_definition

  is_val_definition(initial_position: Int) = {
    position_of_first_opening_parenthesis = indexOf(line, SodaOpeningParenthesis)
    case1 = position_of_first_opening_parenthesis.isEmpty
    case2 = position_of_first_opening_parenthesis.opt(false, position -> position > initial_position)
    case3 =
      indexOf(line, Translation().SodaColon).opt(
        ifEmpty := false,
        ifNonEmpty := other_position ->
          position_of_first_opening_parenthesis.opt(false, position -> position > other_position)
      )

    case1 or case2 or case3
  }

  /**
   * A line is a definition when its main operator is "=" (the equals sign), which in this context is also called the definition sign.
   * This function finds the first occurrence of the definition sign, if it is present.
   *
   * @param line line
   * @return maybe the position of the definition sign
   */
  find_definition(line: String): OptionSD[Int] =
    if line.endsWith(SodaSpace + Translation().SodaDefinition)
    then SomeSD(line.length - Translation().SodaDefinition.length)
    else indexOf(line, SodaSpace + Translation().SodaDefinition + SodaSpace)

  indexOf(line: String, pattern: String): OptionSD[Int] = indexOf(line, pattern, 0)

  indexOf(line: String, pattern: String, start: Int): OptionSD[Int] =
    SomeSD(line.indexOf(pattern, start))
      .filter(position -> not (position == -1))
}

