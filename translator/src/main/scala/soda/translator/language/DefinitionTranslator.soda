package soda.translator.language


/**
 * A line containing the definition sign will be classified as a definition.
 * The definitions need to be identified as 'val', 'def', or 'class'.
 *
 * 'class' is for class definition.
 * It is detected if the 'class' reserved word is also in the same line.
 *
 * 'val' is for value definition.
 * It is detected in three cases.
 * Case 1: The line does not have a opening parenthesis, e.g. `a = 1`
 * Case 2: The first opening parenthesis is after the definition sign, e.g. `x = f(y)`
 * Case 3: The first opening parenthesis is after a colon, e.g. `x: (A, B) -> C = (x, y) -> f(x,y)`
 *
 * 'def' is for function definition.
 * If it does not fit in any of the 'val' cases.
 *
 * Formerly there was another case for 'val'.
 * Deprecated Case: The first non-blank character of a line is an open parenthesis, e.g. `(x, y) = (0, 1)`
 * This was implemented simply as:
 * `line.trim.startsWith(soda_opening_parenthesis)`
 * This is no longer supported.
 *
 */
* DefinitionTranslator = {
  + soda.lib.OptionSD
  + soda.lib.SomeElem
  + soda.translator.replacement.Replacement
  + soda.translator.replacement.ReplacementImpl

  has line: String

  soda_opening_parenthesis: String = "("
  soda_space: String = " "
  scala_space: String = " "

  get_translation = find_definition(line).opt(
    ifEmpty := line,
    ifNonEmpty := position -> try_found_definition(position).line
  )

  is_class_definition =
    indexOf(line, soda_space + Translation().soda_class_reserved_word + soda_space).isDefined

  translate_class_definition =
    ReplacementImpl(line).replace_all(soda_space + Translation().soda_definition, "")

  translate_val_definition =
    ReplacementImpl(line).add_after_spaces( Translation().scala_value + scala_space )

  translate_def_definition =
    ReplacementImpl(line).add_after_spaces( Translation().scala_definition + scala_space )

  try_found_definition(position: Int): Replacement =
    if is_class_definition then translate_class_definition
    else if is_val_definition(position) then translate_val_definition
    else translate_def_definition

  is_val_definition(initial_position: Int) =
    let
      position_of_first_opening_parenthesis = indexOf(line, soda_opening_parenthesis)
      case1 = position_of_first_opening_parenthesis.isEmpty
      case2 = position_of_first_opening_parenthesis.opt(false, position -> position > initial_position)
      case3 =
        indexOf(line, Translation().soda_colon).opt(
          ifEmpty := false,
          ifNonEmpty := other_position ->
            position_of_first_opening_parenthesis.opt(false, position -> position > other_position)
        )
    in case1 or case2 or case3

  /**
   * A line is a definition when its main operator is "=" (the equals sign), which in this context is also called the definition sign.
   * This function finds the first occurrence of the definition sign, if it is present.
   *
   * @param line line
   * @return maybe the position of the definition sign
   */
  find_definition(line: String): OptionSD[Int] =
    if line.endsWith(soda_space + Translation().soda_definition)
    then SomeElem(line.length - Translation().soda_definition.length)
    else indexOf(line, soda_space + Translation().soda_definition + soda_space)

  indexOf(line: String, pattern: String): OptionSD[Int] =
    indexOf(line, pattern, 0)

  indexOf(line: String, pattern: String, start: Int): OptionSD[Int] =
    SomeElem(line.indexOf(pattern, start))
      .filter(position -> not (position == -1))
}

* DefinitionTranslatorImpl(line: String) extends DefinitionTranslator

