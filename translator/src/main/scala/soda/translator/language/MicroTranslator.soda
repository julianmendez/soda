package soda.translator.language


/**
 * This class translates Soda source code into Scala source code.
 */
* MicroTranslator() = {
  + soda.translator.replacement.CommentPreprocessor
  + soda.translator.replacement.ParserStateEnum
  + soda.translator.replacement.Replacement
  + soda.translator.replacement.Token
  + soda.translator.replacement.Tokenizer
  + soda.translator.replacement.Translator

  NewLine = "\n"
  SodaOpeningParenthesis: String = "("

  translate_program(program: String): String = {
    original_lines = split_lines(program)
    lines_to_translate = join_lines_ending_with_comma_or_opening_parenthesis(original_lines)
    translated_lines = translate_lines(lines_to_translate)
    join_translated_lines (translated_lines)
  }

  split_lines (program: String): Seq[String] =
    program.split(NewLine).toIndexedSeq

  join_lines_ending_with_comma_or_opening_parenthesis(lines: Seq[String]): Seq[String] =
    LineJoiner(lines).get_joined_lines

  join_translated_lines (lines: Seq[String]): String =
    lines.mkString(NewLine) + NewLine

  translate_lines(lines: Seq[String]): Seq[String] =
    CommentPreprocessor(lines)
      .get_annotated_lines
      .map(annotated_line ->
        if annotated_line.isComment
        then annotated_line.line
        else _translate_non_comment(annotated_line.line)
      )

  _translate_non_comment(line: String): String = {
    line_with_space = Replacement(line).add_space_to_soda_line().line
    tokenized_line = Tokenizer(line_with_space).get_tokens
    translated_line = _translate_line(tokenized_line)
    joint_line = _join_tokens(translated_line)
    final_line = Replacement(joint_line).remove_space_from_scala_line().line
    final_line
  }

  _translate_line(tokens: Seq[Token]): Seq[Token] =
    tokens.map(
      token ->
        if token.parser_state == ParserStateEnum().Plain
        then {
          tr = Tr()
          newText = Replacement(token.text)
            .add_spaces_to_symbols(symbols := Translation().SodaBracketsAndComma.toSet)
            .replace(tr.ScalaNonSoda())
            .replace_at_beginning(token.index, tr.SynonymAtBeginning())
            .replace(tr.Synonym())
            .replace_with(try_definition)
            .replace_at_beginning(token.index, get_translation_table_at_beginning(token.text))
            .replace(tr.MainTranslation())
            .replace_regex(tr.Beautifier())
            .line
          Token(newText, token.parser_state, token.index)
        }
        else token
    )

  get_translation_table_at_beginning(line: String): Translator =
    if line.contains(SodaOpeningParenthesis)
    then Tr().TranslationAtBeginningWithParen()
    else Tr().TranslationAtBeginningWithoutParen()

  try_definition(line: String): String =
    DefinitionTranslator(line).get_translation

  _join_tokens(tokens: Seq[Token]): String =
    tokens
      .map(token -> token.text)
      .mkString("")

  * Excerpt(beginning: Int, end: Int)
}

