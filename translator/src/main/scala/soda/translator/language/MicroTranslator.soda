package soda.translator.language


/**
 * This class translates Soda source code into Scala source code.
 */
* MicroTranslator() = {
  + soda.lib.SomeSD
  + soda.translator.replacement.CommentPreprocessor
  + soda.translator.replacement.ParserStateEnum
  + soda.translator.replacement.Replacement
  + soda.translator.replacement.Token
  + soda.translator.replacement.Tokenizer
  + soda.translator.replacement.Translator

  NewLine = "\n"
  SodaOpeningParenthesis: String = "("
  Tr = TranslatorImplementation()


  translate_program(program: String): String =
    SomeSD(program)
      .map(split_lines)
      .map(join_lines_with_opening_brackets)
      .map(preprocess_let_in_commands)
      .map(join_lines_with_closing_brackets)
      .map(translate_lines)
      .map(join_translated_lines)
      .get

  split_lines (program: String): Seq[String] =
    program.split(NewLine).toIndexedSeq

  join_lines_with_opening_brackets(lines: Seq[String]): Seq[String] =
    LineJoiner(lines).get_joined_lines_with_opening_brackets

  join_lines_with_closing_brackets(lines: Seq[String]): Seq[String] =
    LineJoiner(lines).get_joined_lines_with_closing_brackets

  join_translated_lines (lines: Seq[String]): String =
    lines.mkString(NewLine) + NewLine

  translate_lines(lines: Seq[String]): Seq[String] =
    CommentPreprocessor(lines)
      .get_annotated_lines
      .map(annotated_line ->
        if annotated_line.isComment
        then annotated_line.line
        else _translate_non_comment(annotated_line.line)
      )

  _translate_non_comment(line: String): String =
      SomeSD(line)
        .map(x -> Replacement(x).add_space_to_soda_line().line)
        .map(x -> Tokenizer(x).get_tokens)
        .map(x -> _translate_line(x))
        .map(x -> _join_tokens(x))
        .map(x -> Replacement(x).remove_space_from_scala_line().line)
        .get

  _translate_line(tokens: Seq[Token]): Seq[Token] =
    tokens.map(
      token ->
        if token.parser_state == ParserStateEnum().Plain
        then Token(_get_all_replacements(token), token.parser_state, token.index)
        else token
    )

  _get_all_replacements(token: Token): String =
    Replacement(token.text)
      .add_spaces_to_symbols(symbols := Translation().SodaBracketsAndComma.toSet)
      .replace(Tr.ScalaNonSoda())
      .replace_at_beginning(token.index, Tr.SynonymAtBeginning())
      .replace(Tr.Synonym())
      .replace_with(try_definition)
      .replace_at_beginning(token.index, get_translation_table_at_beginning(token.text))
      .replace(Tr.MainTranslation())
      .replace_regex(Tr.Beautifier())
      .line

  get_translation_table_at_beginning(line: String): Translator =
    if line.contains(SodaOpeningParenthesis)
    then Tr.TranslationAtBeginningWithParen()
    else Tr.TranslationAtBeginningWithoutParen()

  try_definition(line: String): String =
    DefinitionTranslator(line).get_translation

  _join_tokens(tokens: Seq[Token]): String =
    tokens
      .map(token -> token.text)
      .mkString("")

  preprocess_let_in_commands(lines: Seq[String]): Seq[String] =
    lines.map(line ->
      append_if_condition(line, starts_with_in, Translation().ScalaInTranslation) )

  starts_with_in(line: String): Boolean =
    line.trim().startsWith(Translation().SodaInPattern)

  append_if_condition(line: String, condition: String -> Boolean, to_append: String): String =
    if condition(line)
    then line + to_append
    else line

  * Excerpt(beginning: Int, end: Int)
}

