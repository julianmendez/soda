package soda.translator.language

+ soda.translator.replacement.Translator

* SynonymAtBeginning () extends Translator {
  _table = Translation().SynonymAtBeginning

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}

* TranslationAtBeginningWithParen() extends Translator {
  _table = Translation().TranslationAtBeginningWithParen

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}

* TranslationAtBeginningWithoutParen() extends Translator {
  _table = Translation().TranslationAtBeginningWithoutParen

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* Synonym() extends Translator {
  _table = Translation().Synonym

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* MainTranslation() extends Translator {
  _table = Translation().MainTranslation

  translate (word: String) = _get(_table, word)

  keys = _keys(_table)
}


* ScalaNonSoda() extends Translator {
  translate (word: String) = {
    if not Translation().SodaReservedWords.contains(word) and
      Translation().ScalaReservedWords.contains(word)
    then Translation().PrefixScalaNonSoda + word
    else word
  }

  keys = Translation().ScalaNonSodaKeys

}

