package soda.translator.replacement


/**
 * This models all the possible states that the parser can be.
 */
* ParserState(ordinal: Int, name: String) extends soda.lib.EnumConstant

* ParserStateConstant = {

  UndefinedState = ParserState(0, "UndefinedState")
  QuotesState = ParserState(1, "QuotesState")
  ApostropheState = ParserState(2, "ApostropheState")
  QuotesBackslashState = ParserState(3, "QuotesBackslashState")
  ApostropheBackslashState = ParserState(4, "ApostropheBackslashState")
  Plain = ParserState(5, "Plain")

  ParserStateValues = Seq(UndefinedState, QuotesState, ApostropheState, QuotesBackslashState, ApostropheBackslashState, Plain)
}

/**
 * This is an enumeration of all the parser states.
 */
* ParserStateEnum extends ParserStateConstant = {

  values = ParserStateValues

  is_same_class(x: ParserState, y: ParserState): Boolean =
    (x == y) or is_like(x, y) or is_like(y, x)

  is_like(x: ParserState, y: ParserState): Boolean =
    (x == QuotesState and y == QuotesBackslashState) or
      (x == ApostropheState and y == ApostropheBackslashState)
}

* ParserStateEnumImpl() extends ParserStateEnum

* ParserTransition extends ParserStateConstant with CharTypeConstant = {

  TransitionsThatChangeStates: Map[(ParserState, CharType), ParserState] =
    Map(
      /* */
      ((QuotesState, UndefinedType), UndefinedState),
      ((QuotesState, QuotesType), Plain),
      ((QuotesState, BackslashType), QuotesBackslashState),
      /* */
      ((ApostropheState, UndefinedType), UndefinedState),
      ((ApostropheState, ApostropheType), Plain),
      ((ApostropheState, BackslashType), ApostropheBackslashState),
      /* */
      ((QuotesBackslashState, UndefinedType), UndefinedState),
      ((QuotesBackslashState, QuotesType), QuotesState),
      ((QuotesBackslashState, ApostropheType), QuotesState),
      ((QuotesBackslashState, BackslashType), QuotesState),
      ((QuotesBackslashState, PlainType), QuotesState),
      /* */
      ((ApostropheBackslashState, UndefinedType), UndefinedState),
      ((ApostropheBackslashState, QuotesType), ApostropheState),
      ((ApostropheBackslashState, ApostropheType), ApostropheState),
      ((ApostropheBackslashState, BackslashType), ApostropheState),
      ((ApostropheBackslashState, PlainType), ApostropheState),
      /* */
      ((Plain, UndefinedType), UndefinedState),
      ((Plain, QuotesType), QuotesState),
      ((Plain, ApostropheType), ApostropheState),
      ((Plain, BackslashType), Plain),
      ((Plain, PlainType), Plain)
    )

  next_parser_state(parser_state: ParserState, char_type: CharType): ParserState =
    TransitionsThatChangeStates.getOrElse((parser_state, char_type), parser_state)
}

* ParserTransitionImpl() extends ParserTransition

