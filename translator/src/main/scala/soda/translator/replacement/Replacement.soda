package soda.translator.replacement

+ soda.lib.Rec

/**
 * This models a collection of replacement functions.
 * This is intended to be used as a pipeline.
 */
* Replacement(line: String) = {

  SodaSpace: String = " "
  ScalaSpace: String = " "

  replace_with(function: String -> String): Replacement =
    Replacement(function(line))

  replace_at_beginning(index: Int, translator: Translator): Replacement =
    Replacement(replace_at_beginning(line, index, translator))

  replace_at_beginning(line: String, index: Int, translator: Translator): String =
    if index == 0
    then replace(line, translator, only_beginning := true)
    else line

  replace(line: String, translator: Translator, only_beginning: Boolean): String = {
    result = Rec().foldLeft(translator.keys, initial_value, next_value)

    replace_if_found(line: String, pattern: String, new_text: String, only_beginning: Boolean): String =
      if (only_beginning and line.trim.startsWith(pattern.trim)) or
        (not only_beginning and line.contains(pattern))
      then replace_all(line, pattern, new_text)
      else line

    initial_value: String = line

    next_value(line: String, reserved_word: String): String =
      replace_if_found(line,
        SodaSpace + reserved_word + SodaSpace, ScalaSpace + translator.translate(reserved_word) + ScalaSpace, only_beginning)

    result
  }

  replace_all(pattern: String, replacement: String): Replacement =
    Replacement(replace_all(line, pattern, replacement))

  replace_all(line: String, pattern: String, replacement: String): String = {
    result = postproc(
      Rec().foldLeftWhile( Rec().range(line.length), initial_value, next_value, condition )
    )

    initial_value = FoldTuple( Seq(), 0 )

    next_value(tuple: FoldTuple, x: Int): FoldTuple = {
      replaced_text_rev = tuple.replaced_text_rev
      start_index = tuple.start_index
      pos = line.indexOf(pattern, start_index)
      next_tuple =
        if pos == -1
        then FoldTuple( replaced_text_rev.+:(line.substring(start_index)), pos )
        else {
          new_replaced_text_rev = (replaced_text_rev.+:(line.substring(start_index, pos))).+:(replacement)
          new_index = pos + pattern.length
          FoldTuple( new_replaced_text_rev, new_index )
        }
      next_tuple
    }

    condition(tuple: FoldTuple, x: Int): Boolean =
      not (tuple.start_index == -1)

    postproc(tuple: FoldTuple): String =
      tuple.replaced_text_rev.reverse.mkString("")

    * FoldTuple(replaced_text_rev: Seq[String], start_index: Int)

    result
  }

  replace(translator: Translator, only_beginning: Boolean): Replacement =
    Replacement(replace(line, translator, only_beginning))

  add_space_to_soda_line(): Replacement =
    Replacement(SodaSpace + line + SodaSpace)

  add_spaces_to_symbols(symbols: Set[Char]): Replacement =
    Replacement(add_spaces_to_symbols(line, symbols))

  add_spaces_to_symbols(line: String, symbols: Set[Char]): String =
    line.indices.map(index -> {
      result = left_part + ch + right_part

      ch = line(index)

      left_part =
        if (index > 0) and
          symbols.contains(ch) and
          not line(index - 1).isWhitespace
        then ScalaSpace
        else ""

      right_part =
        if (index < line.length - 1) and
          symbols.contains(ch) and
          not line(index + 1).isWhitespace
        then ScalaSpace
        else ""

      result
    } ).mkString("")

  remove_space_from_scala_line(): Replacement =
    Replacement(remove_space_from_scala_line(line))

  remove_space_from_scala_line(line: String): String = {
    line_without_starting_space =
      if line.startsWith(ScalaSpace)
      then line.substring(1)
      else line

    line_without_ending_space =
      if line_without_starting_space.endsWith(ScalaSpace)
      then line_without_starting_space.substring(0, line_without_starting_space.length - 1)
      else line_without_starting_space

    line_without_ending_space
  }

  add_after_spaces(text_to_prepend: String): Replacement =
    Replacement(add_after_spaces(line, text_to_prepend))

  add_after_spaces(line: String, text_to_prepend: String): String = {
    prefix_length = line.takeWhile(ch -> ch.isSpaceChar).length
    line.substring(0, prefix_length) + text_to_prepend + line.substring(prefix_length)
  }

  replace_regex(translator: Translator): Replacement =
    Replacement(replace_regex(line, translator))

  replace_regex(line: String, translator: Translator): String = {
    result = Rec().foldLeft(translator.keys, initial_value, next_value)

    initial_value: String = line

    next_value(line: String, regex: String): String =
      line.replaceAll(regex, translator.translate(regex))

    result
  }

}

