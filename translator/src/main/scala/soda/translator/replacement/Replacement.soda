
class ReplacementAux

  abstract

  soda_space = " "

  scala_space = " "

  replace_at (index : Int) (line : String) (pattern : String) (replacement : String) : String =
    if (0 <= index) and (index + pattern .length <= line .length)
    then line .substring (0 , index) + replacement + line .substring (index + pattern .length ,
      line .length)
    else line

  replace_first (line : String) (pattern : String) (replacement : String) : String =
    replace_at (line .indexOf (pattern) ) (line) (pattern) (replacement)

  replace_if_found_at_beginning (line : String) (pattern : String) (new_text : String)
      : String =
    if line .trim .startsWith (pattern .trim)
    then replace_first (line) (pattern) (new_text)
    else line

  replace_all (line : String) (pattern : String) (replacement : String) : String =
    Replacer .mk (line) (pattern) (replacement) .replaced_text

  replace_if_found (line : String) (pattern : String) (new_text : String) : String =
    if line .contains (pattern)
    then replace_all (line) (pattern) (new_text)
    else line

  _left_part_of_symbols (line : String) (symbols : Set [Char] ) (index : Int) (ch : Char)
      : String =
    if (index > 0) and symbols .contains (ch) and
      not line (index - 1) .isWhitespace
    then scala_space
    else ""

  _right_part_of_symbols (line : String) (symbols : Set [Char] ) (index : Int) (ch : Char)
      : String =
    if (index < line .length - 1) and symbols .contains (ch) and
      not line (index + 1) .isWhitespace
    then scala_space
    else ""

  _add_spaces_to_symbols_with (ch : Char) (index : Int) (line : String) (symbols : Set [Char] )
      : String =
    (_left_part_of_symbols (line) (symbols) (index) (ch) ) + ch + (
      _right_part_of_symbols (line) (symbols) (index) (ch) )

  add_spaces_to_symbols (line : String) (symbols : Set [Char] ) : String =
    line
      .indices
      .map (lambda index -->
        _add_spaces_to_symbols_with (line (index) ) (index ) (line) (symbols) )
      .mkString ("")

  _get_line_without_starting_space (line : String) : String =
    if line .startsWith (scala_space)
    then line .substring (1)
    else line

  _get_line_without_ending_space (line : String) : String =
    if line .endsWith (scala_space)
    then line .substring (0 , line .length - 1)
    else line

  remove_space_from_translated_line (line : String) : String =
    _get_line_without_ending_space (_get_line_without_starting_space (line) )

  _add_after_spaces_or_pattern_with (prefix_length : Int) (line : String)
      (text_to_prepend : String) : String =
    line .substring (0 , prefix_length) + text_to_prepend + line .substring (prefix_length)

  _get_prefix_length (line : String) (pattern : String) : Int =
    if line .trim .startsWith (pattern)
    then line .indexOf (pattern) + pattern .length
    else line .takeWhile (lambda ch --> ch .isSpaceChar) .length

  add_after_spaces_or_pattern (line : String) (pattern : String) (text_to_prepend : String)
      : String =
    _add_after_spaces_or_pattern_with (
      _get_prefix_length (line) (pattern) ) (line) (text_to_prepend)

end

class ReplacementWithTranslator

  abstract
    translator : soda.translator.block.Translator

  import
    soda.lib.Fold

  aux = ReplacementAux .mk

  soda_space = aux .soda_space

  scala_space = aux .scala_space

  opening_parenthesis_symbol = "("

  closing_parenthesis_symbol = ")"

  new_line = "\n"

  _fold = Fold .mk

  _next_replace_words_with (line : String) (reserved_word : String) (translation : String)
      : String =
    Replacement .mk (line)
      .replace_if_found (soda_space) (reserved_word) (soda_space) (translation)
      .replace_if_found (soda_space) (reserved_word) (closing_parenthesis_symbol) (translation)
      .replace_if_found (soda_space) (reserved_word) (new_line) (translation)
      .replace_if_found (opening_parenthesis_symbol) (reserved_word) (soda_space) (translation)
      .replace_if_found (opening_parenthesis_symbol) (reserved_word) (
        closing_parenthesis_symbol) (translation)
      .replace_if_found (opening_parenthesis_symbol) (reserved_word) (new_line) (translation)
      .line

  _next_replace_words (line : String) (reserved_word : String) : String =
    _next_replace_words_with (line) (reserved_word) (translator .translate (reserved_word) )

  replace_words (line : String) : String =
    _fold .apply [String] [String] (translator .keys) (line) (_next_replace_words)

  _next_replace_symbols (line : String) (reserved_word : String) : String =
    aux .replace_if_found (line) (reserved_word) (translator .translate (reserved_word) )

  replace_symbols (line : String) : String =
    _fold .apply [String] [String] (translator .keys) (line) (_next_replace_symbols)

  _next_replace_only_beginning (line : String) (reserved_word : String) : String =
    aux .replace_if_found_at_beginning (line) (
      soda_space + reserved_word + soda_space) (scala_space +
        translator .translate (reserved_word) + scala_space)

  _replace_only_beginning (line : String) : String =
    _fold .apply [String] [String] (translator .keys) (line) (_next_replace_only_beginning)

  replace_at_beginning (line : String) (index : Int) : String =
    if index == 0
    then _replace_only_beginning (line)
    else line

end

/**
 * This models a collection of replacement functions.
 * This is intended to be used as a pipeline.
 */

class Replacement
  extends
    soda.translator.block.SingleLineProcessor

  abstract
    line : String

  import
    soda.translator.block.Translator

  aux = ReplacementAux .mk

  soda_space = aux.soda_space

  replace_at_beginning (index : Int) (translator : Translator) : Replacement =
    Replacement .mk (ReplacementWithTranslator .mk (translator) .replace_at_beginning (line) (index) )

  replace_all (pattern : String) (replacement : String) : Replacement =
    Replacement .mk (aux .replace_all (line) (pattern) (replacement) )

  add_space_to_soda_line () : Replacement =
    Replacement .mk (soda_space + line + soda_space)

  remove_space_from_translated_line () : Replacement =
    Replacement .mk (aux .remove_space_from_translated_line (line) )

  add_after_spaces_or_pattern (pattern : String) (text_to_prepend : String) : Replacement =
    Replacement .mk (aux .add_after_spaces_or_pattern (line) (pattern) (text_to_prepend) )

  replace_if_found  (previous_character : String) (text : String)  (next_character : String)
     (replacement : String) : Replacement =
    Replacement .mk (
      aux .replace_if_found (line) (
        previous_character + text + next_character) (
        previous_character + replacement + next_character)
    )

end

