package soda.translator.replacement

/**
 * This is to classify characters.
 */

class CharType
  extends
    soda.lib.EnumConstant

end

class CharType_ (ordinal: Int, name: String)
  extends
    CharType

end

/**
 * This is an enumeration for all types of characters.
 */

class CharTypeEnum
  extends
    soda.lib.Enum [CharType]

  undefined_type = CharType_ (0, "undefined_type")

  quotes_type = CharType_ (1, "quotes_type")

  apostrophe_type = CharType_ (2, "apostrophe_type")

  backslash_type = CharType_ (3, "backslash_type")

  plain_type = CharType_ (4, "plain_type")

  values = Seq (undefined_type, quotes_type, apostrophe_type, backslash_type, plain_type)

  backslash_char = '\\'

  quotes_char = '\"'

  apostrophe_char = '\''

  underscore_char = '_'

  symbol_chars = Seq ('!', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '`', '{', '|', '}', '~')

  get_char_type (ch: Char): CharType =
    if is_quotes (ch) then quotes_type
    else if is_apostrophe (ch) then apostrophe_type
    else if is_backslash (ch) then backslash_type
    else if is_whitespace (ch) or is_letter_or_digit_or_underscore (ch) or is_symbol (ch) then plain_type
    else undefined_type

  is_whitespace (ch: Char): Boolean =
    ch.isWhitespace

  is_letter_or_digit_or_underscore (ch: Char): Boolean =
    ch.isLetterOrDigit or ch == underscore_char

  is_symbol (ch: Char): Boolean =
    symbol_chars.contains (ch)

  is_quotes (ch: Char): Boolean =
    ch == quotes_char

  is_apostrophe (ch: Char): Boolean =
    ch == apostrophe_char

  is_backslash (ch: Char): Boolean =
    ch == backslash_char

end

class CharTypeEnum_ ()
  extends
    CharTypeEnum

end

