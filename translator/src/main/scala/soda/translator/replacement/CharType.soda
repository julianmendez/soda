
/**
 * This is to classify characters.
 */

class CharType
  extends
    soda.lib.EnumConstant

  abstract
    ordinal : Int
    name : String

end

/**
 * This is an enumeration for all types of characters.
 */

class CharTypeEnum
  extends
    soda.lib.Enum [CharType]

  abstract

  undefined_type = CharType .mk (0) ("undefined_type")

  quotes_type = CharType .mk (1) ("quotes_type")

  apostrophe_type = CharType .mk (2) ("apostrophe_type")

  backslash_type = CharType .mk (3) ("backslash_type")

  plain_type = CharType .mk (4) ("plain_type")

  values = Seq (undefined_type , quotes_type , apostrophe_type , backslash_type , plain_type)

  backslash_char = '\\'

  quotes_char = '\"'

  apostrophe_char = '\''

  underscore_char = '_'

  last_standard_symbol : Char = 0x7F

  symbol_chars : Seq [Char] =
    Seq ('!' , '#' , '$' , '%' , '&' , '(' , ')' , '*' , '+' , ',' , '-' , '.' , '/' , ':' ,
      ';' , '<' , '=' , '>' , '?' , '@' , '[' , ']' , '^' , '`' , '{' , '|' , '}' , '~')

  _is_plain (ch : Char) : Boolean =
    _is_whitespace (ch) or _is_letter_or_digit_or_underscore (ch) or _is_symbol (ch) or
      _is_extended_character (ch)

  _is_whitespace (ch : Char) : Boolean =
    ch.isWhitespace

  _is_letter_or_digit_or_underscore (ch : Char) : Boolean =
    ch.isLetterOrDigit or ch == underscore_char

  _is_symbol (ch : Char) : Boolean =
    symbol_chars.contains (ch)

  _is_extended_character (ch: Char): Boolean =
    ch > last_standard_symbol

  _get_char_type_if_plain (ch : Char) : CharType =
    if _is_plain (ch)
    then plain_type
    else undefined_type

  simple_char_type_map : Map [Char] [CharType] =
    Map (
      Tuple2 (quotes_char , quotes_type) ,
      Tuple2 (apostrophe_char , apostrophe_type) ,
      Tuple2 (backslash_char , backslash_type)
    )

  get_char_type (ch : Char) : CharType =
    simple_char_type_map
      .getOrElse (ch , _get_char_type_if_plain (ch) )

end

