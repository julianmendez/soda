package soda.translator.replacement

class LinePatternProcessor

  abstract
    line : String
    pattern : String
    replacement : String

end

class Replacer
  extends
    LinePatternProcessor

  abstract
    line : String
    pattern : String
    replacement : String

  import
    soda.lib.Recursion_

  replaced_text =
    postprocess (Recursion_ ().fold_while (Recursion_ ().range (line.length) ) (initial_value) (next_value_function) (should_continue) )

  initial_value : ReplacerFoldTuple = ReplacerFoldTuple_ (Seq (), 0 )

  next_value_function (tuple : ReplacerFoldTuple) (x : Int) : ReplacerFoldTuple =
    _get_next_tuple (
      replaced_text_rev := tuple.replaced_text_rev) (
      start_index := tuple.start_index) (
      pos := line.indexOf (pattern, tuple.start_index)
    )

  _get_next_tuple (replaced_text_rev : Seq [String] ) (start_index : Int) (pos : Int) : ReplacerFoldTuple =
    if pos == -1
    then ReplacerFoldTuple_ (replaced_text_rev.+: (line.substring (start_index) ), pos )
    else
      ReplacerFoldTuple_ (
        (replaced_text_rev.+: (line.substring (start_index, pos) ) ).+: (replacement),
        pos + pattern.length
      )

  should_continue (tuple : ReplacerFoldTuple) (x : Int) : Boolean =
    not (tuple.start_index == -1)

  postprocess (tuple : ReplacerFoldTuple) : String =
    tuple.replaced_text_rev.reverse.mkString ("")

end

class ReplacerFoldTuple

  abstract
    replaced_text_rev : Seq [String]
    start_index : Int

end

