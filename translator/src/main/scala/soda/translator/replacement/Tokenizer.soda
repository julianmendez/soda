package soda.translator.replacement


/**
 * A token is a piece of code, that can contain one or more words combined with symbols.
 */
* Token(text: String, parser_state: ParserState, index: Int)

/**
 * This class processes a line to divide it into tokens.
 */
* Tokenizer = {
  + soda.lib.Rec

  has line: String

  tokens: Seq[Token] =
    _postprocess(Rec().fold( Rec().range(line.length), _initial_value, _get_next_value ))

  _initial_value = TokenizerFoldTuple(0, ParserStateEnum().plain, Seq())

  _postprocess(tuple: TokenizerFoldTuple): Seq[Token] =
    (tuple.rev_tokens.+:(Token(line.substring(tuple.last_index), tuple.parser_state, tuple.last_index)))
      .reverse

  _get_next_value(tuple: TokenizerFoldTuple, current_index: Int): TokenizerFoldTuple =
    let
      ch = line.charAt(current_index)
      char_type = CharTypeEnum().get_char_type(ch)
      new_parser_state = ParserTransitionImpl().next_parser_state(tuple.parser_state, char_type)
      result =
        if ParserStateEnum().is_same_class(new_parser_state, tuple.parser_state)
        then TokenizerFoldTuple(tuple.last_index, new_parser_state, tuple.rev_tokens)
        else _get_next_value_of_different_class(tuple, current_index, new_parser_state)
    in result

  _get_next_value_of_different_class(tuple: TokenizerFoldTuple, current_index: Int,
      new_parser_state: ParserState): TokenizerFoldTuple =
    let
      index =
        if tuple.parser_state == ParserStateEnum().quotes_state or
           tuple.parser_state == ParserStateEnum().apostrophe_state
        then current_index + 1
        else current_index
      text = line.substring(tuple.last_index, index)

    in TokenizerFoldTuple(index, new_parser_state,
        tuple.rev_tokens.+:(Token(text, tuple.parser_state, tuple.last_index)))
}

* TokenizerImpl(line: String) extends Tokenizer

* TokenizerFoldTuple(last_index: Int, parser_state: ParserState, rev_tokens: Seq[Token])

