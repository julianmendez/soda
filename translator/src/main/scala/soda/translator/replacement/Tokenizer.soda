
/**
 * A token is a piece of code, that can contain one or more words combined with symbols.
 */

class Token

  abstract
    text : String
    parser_state : ParserState
    index : Int

end

class TokenizerFoldTuple

  abstract
    last_index : Int
    parser_state : ParserState
    rev_tokens : Seq [Token]

end

/**
 * This class processes a line to divide it into tokens.
 */

class Tokenizer
  extends
    soda.translator.block.SingleLineProcessor

  abstract
    line : String

  import
    soda.lib.Fold
    soda.lib.Range

  _fold = Fold .mk

  _range = Range .mk

  _new_parser_state (tuple : TokenizerFoldTuple) (current_index : Int) : ParserState =
    ParserTransition .mk
      .next_parser_state (
        tuple .parser_state) (
        CharTypeEnum .mk .get_char_type (line .charAt (current_index) )
      )

  _get_new_current_index (tuple : TokenizerFoldTuple) (current_index : Int) : Int =
    if tuple .parser_state == ParserStateEnum .mk .quotes_state or
     tuple .parser_state == ParserStateEnum .mk .apostrophe_state
    then current_index + 1
    else current_index

  _next_value_function_of_different_class_with (tuple : TokenizerFoldTuple)
      (current_index : Int) (new_parser_state : ParserState) (index : Int)
      : TokenizerFoldTuple =
    TokenizerFoldTuple .mk (index) (new_parser_state) (
      tuple .rev_tokens .+: (
        Token .mk (
          line .substring (tuple .last_index, index) ) (
          tuple .parser_state ) (
          tuple .last_index
        )
      )
    )

  _next_value_function_of_different_class (tuple : TokenizerFoldTuple) (current_index : Int)
      (new_parser_state : ParserState) : TokenizerFoldTuple =
    _next_value_function_of_different_class_with (tuple) (current_index) (new_parser_state) (
      _get_new_current_index (tuple) (current_index)
    )

  _new_value_function_with (tuple : TokenizerFoldTuple) (current_index : Int)
      (new_parser_state : ParserState) : TokenizerFoldTuple =
    if ParserStateEnum .mk .is_same_class (new_parser_state) (tuple .parser_state)
    then TokenizerFoldTuple .mk (tuple .last_index) (new_parser_state) (tuple .rev_tokens)
    else _next_value_function_of_different_class (tuple) (current_index) (new_parser_state)

  _next_value_function (tuple : TokenizerFoldTuple) (current_index : Int) : TokenizerFoldTuple =
    _new_value_function_with (tuple) (current_index) (
      _new_parser_state (tuple) (current_index) )

  _postprocess (tuple : TokenizerFoldTuple) : Seq [Token] =
    (tuple .rev_tokens .+: (Token .mk (line .substring (tuple .last_index) ) (tuple .parser_state) (
        tuple .last_index) ) )
      .reverse

  _initial_value  : TokenizerFoldTuple =
    TokenizerFoldTuple .mk (0) (ParserStateEnum .mk .plain) (Seq () )

  tokens : Seq [Token] =
    _postprocess (_fold .apply [Int] [TokenizerFoldTuple] (
      _range .apply (line .length) ) (_initial_value) (_next_value_function) )

end

