package soda.translator.replacement


* AnnotatedLine(line: String, isComment: Boolean)

/**
 * This preprocessor annotates lines to determine whether they are comments.
 */
* CommentPreprocessor(lines: Seq[String]) = {
  + soda.lib.Rec

  SodaBeginComment = "/*"
  SodaEndComment = "*/"

  get_annotated_lines: Seq[AnnotatedLine] =
    Rec().foldLeft(lines, initial_value, next_value)
      .annotated_lines_rev
      .reverse

  initial_value = FoldTuple(false, Seq())

  next_value(pair: FoldTuple, line: String): FoldTuple =
    let
      t = annotate_this_line(line, pair.comment_state)
    in FoldTuple(t.new_comment_state,
        pair.annotated_lines_rev.+:(AnnotatedLine(line, t.current_state)))

  annotate_this_line(line: String, comment_state: Boolean): CurrentAndNewCommentState =
    if comment_state
    then CurrentAndNewCommentState(true, not line.trim.endsWith(SodaEndComment))
    else
      if line.trim.startsWith(SodaBeginComment)
      then CurrentAndNewCommentState(true, not line.trim.endsWith(SodaEndComment))
      else CurrentAndNewCommentState(false, false)

  * FoldTuple(comment_state: Boolean, annotated_lines_rev: Seq[AnnotatedLine])

  * CurrentAndNewCommentState(current_state: Boolean, new_comment_state: Boolean)
}

