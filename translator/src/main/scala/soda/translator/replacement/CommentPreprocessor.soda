package soda.translator.replacement


* AnnotatedLine(line: String, isComment: Boolean)

/**
 * This preprocessor annotates lines to determine whether they are comments.
 */
* CommentPreprocessor = {
  + soda.lib.Rec

  has lines: Seq[String]

  soda_begin_comment = "/*"

  soda_end_comment = "*/"

  get_annotated_lines: Seq[AnnotatedLine] =
    Rec().fold(lines, initial_value, get_next_value)
      .annotated_lines_rev
      .reverse

  initial_value = PreprocessorFoldTuple(false, Seq())

  get_next_value(pair: PreprocessorFoldTuple, line: String): PreprocessorFoldTuple =
    let
      t = annotate_this_line(line, pair.comment_state)
    in PreprocessorFoldTuple(t.new_comment_state,
        pair.annotated_lines_rev.+:(AnnotatedLine(line, t.current_state)))

  annotate_this_line(line: String, comment_state: Boolean): CurrentAndNewCommentState =
    if comment_state
    then CurrentAndNewCommentState(true, not line.trim.endsWith(soda_end_comment))
    else
      if line.trim.startsWith(soda_begin_comment)
      then CurrentAndNewCommentState(true, not line.trim.endsWith(soda_end_comment))
      else CurrentAndNewCommentState(false, false)
}

* CommentPreprocessorImpl(lines: Seq[String]) extends CommentPreprocessor

* PreprocessorFoldTuple(comment_state: Boolean, annotated_lines_rev: Seq[AnnotatedLine])

* CurrentAndNewCommentState(current_state: Boolean, new_comment_state: Boolean)

