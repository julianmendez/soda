package soda.translator.replacement

+ soda.lib.Rec

* AnnotatedLine(line: String, isComment: Boolean)

/**
 * This preprocessor annotates lines to determine whether they are comments.
 */
* CommentPreprocessor() {

  SodaBeginComment = "/*"
  SodaEndComment = "*/"

  annotate_lines(lines: Seq[String]): Seq[AnnotatedLine] = {
    result =
      Rec().foldLeft(lines, initial_value, next_value)
        .annotated_lines_rev
        .reverse

    * FoldTuple(comment_state: Boolean, annotated_lines_rev: Seq[AnnotatedLine])

    initial_value = FoldTuple(false, Seq())

    next_value(pair: FoldTuple, line: String): FoldTuple = {
      (current_state, new_comment_state) = annotate_this_line(line, pair.comment_state)
      FoldTuple(new_comment_state, pair.annotated_lines_rev.+:(AnnotatedLine(line, current_state)))
    }

    annotate_this_line(line: String, comment_state: Boolean): (Boolean, Boolean) =
      if comment_state
      then (true, not line.trim.endsWith(SodaEndComment))
      else
        if line.trim.startsWith(SodaBeginComment)
        then (true, not line.trim.endsWith(SodaEndComment))
        else (false, false)

    result
  }

}

