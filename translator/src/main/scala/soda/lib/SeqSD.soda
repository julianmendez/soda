/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is a Seq implemented without exceptions.
 */
* SeqSD[A] = {

  has opt[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[A] -> B): B

  has toSeq: Seq[A]

  has reverse: SeqSD[A]

}

* EmptySeqSD[A] extends SeqSD[A] = {

  opt[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[A] -> B): B = ifEmpty

  toSeq: Seq[A] = Seq[A]()

  reverse: EmptySeqSD[A] = this

}

* EmptySeqSD_[A]() extends EmptySeqSD[A]

* NonEmptySeqSD[A] extends SeqSD[A] = {

  opt[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[A] -> B): B = ifNonEmpty(this)

  head: A = toSeq.head

  tail: SeqSD[A] = SeqSDBuilder_[A]().build(toSeq.tail)

  reverse: NonEmptySeqSD[A] = NonEmptySeqSD_(toSeq.reverse)

}

* NonEmptySeqSD_[A](toSeq: Seq[A]) extends NonEmptySeqSD[A]

* SeqSDBuilder[A] = {

  build(seq: Seq[A]): SeqSD[A] =
    if seq.isEmpty
    then EmptySeqSD_[A]()
    else NonEmptySeqSD_[A](seq)

}

* SeqSDBuilder_[A]() extends SeqSDBuilder[A]
