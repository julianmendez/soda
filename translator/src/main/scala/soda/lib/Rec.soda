package soda.lib

/**
 * This class contains tail recursive auxiliary functions.
 */
* Rec() {

  foldLeftWhile[A, B](s: Seq[A], initial_value: B, next_value: (B, A) -> B, cond: (B, A) -> Boolean): B = {
    result = rec(s, initial_value, next_value, cond)

    @tailrec
    rec[A, B](seq: Seq[A], acc: B, next_value: (B, A) -> B, cond: (B, A) -> Boolean): B =
      if seq.isEmpty
      then acc
      else {
        (elem, rest) = (seq.head, seq.tail)
        if not cond(acc, elem)
        then acc
        else rec(rest, next_value(acc, elem), next_value, cond)
      }

    result
  }


  foldLeft[A, B](seq: Seq[A], initial_value: B, next_value: (B, A) -> B): B = {
    result = rec(seq, initial_value, next_value)

    @tailrec
    rec[A, B](seq: Seq[A], acc: B, next_value: (B, A) -> B): B =
      if seq.isEmpty
      then acc
      else rec(seq.tail, next_value(acc, seq.head), next_value)

    result
  }

  range(n: Int): Seq[Int] = {
    result = rec(n, Seq[Int]())

    @tailrec
    rec(n: Int, seq: Seq[Int]): Seq[Int] =
      if n <= 0
      then seq
      else {
        next = n - 1
        rec(next, seq.+:(next))
      }

    result
  }

}

