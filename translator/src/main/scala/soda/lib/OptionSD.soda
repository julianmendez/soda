/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is an Option implemented without exceptions.
 */
* OptionSD [A] = {

  abstract
    opt [B] (ifEmpty: B, ifNonEmpty: A -> B): B
    map [B] (mapping: A -> B): OptionSD [B]
    toOption: Option [A]
    isEmpty: Boolean
    isDefined: Boolean
    isNonEmpty: Boolean
    toSeq: Seq [A]
    getOrElse (default: A): A
    fold [B] (ifEmpty: B, f: A -> B): B
    flatMap [B] (mapping: A -> OptionSD [B]): OptionSD [B]
    bind [B] (mapping: A -> OptionSD [B]): OptionSD [B]
    filter (predicate: A -> Boolean): OptionSD [A]

}

* NoneSD [A]
  extends OptionSD [A] = {

  opt [B] (ifEmpty: B, ifNonEmpty: A -> B): B = ifEmpty

  map [B] (mapping: A -> B): NoneSD [B] = NoneSD_ [B] ()

  toOption: None.type = None

  isEmpty: Boolean = true

  isDefined: Boolean = not isEmpty

  isNonEmpty: Boolean = not isEmpty

  toSeq: Seq [A] = Seq ()

  getOrElse (default: A): A = default

  fold [B] (ifEmpty: B, f: A -> B): B = opt (ifEmpty, f)

  flatMap [B] (mapping: A -> OptionSD [B]): OptionSD [B] = NoneSD_ [B] ()

  bind [B] (mapping: A -> OptionSD [B]): OptionSD [B] = flatMap [B] (mapping)

  filter (predicate: A -> Boolean): OptionSD [A] = this

}

* NoneSD_ [A] ()
  extends NoneSD [A]

* OptionSDWithElement [A]
  extends OptionSD [A] = {

  abstract
    element: A

}

* SomeSD [A]
  extends OptionSDWithElement [A] = {

  value: A = element

  opt [B] (ifEmpty: B, ifNonEmpty: A -> B): B = ifNonEmpty (element)

  map [B] (mapping: A -> B): SomeSD [B] = SomeSD_ [B] (mapping (element))

  toOption: Some [A] = Some [A] (element)

  isEmpty: Boolean = false

  isDefined: Boolean = not isEmpty

  isNonEmpty: Boolean = not isEmpty

  toSeq: Seq [A] = Seq (element)

  getOrElse (default: A): A = element

  fold [B] (ifEmpty: B, f: A -> B): B = opt (ifEmpty, f)

  flatMap [B] (mapping: A -> OptionSD [B]): OptionSD [B] = mapping (element)

  bind [B] (mapping: A -> OptionSD [B]): OptionSD [B] = flatMap [B] (mapping)

  filter (predicate: A -> Boolean): OptionSD [A] = if predicate (element) then this else NoneSD_ [A] ()

}

* SomeSD_ [A] (element: A)
  extends SomeSD [A]

* OptionSDBuilder [A] = {

  build (option: Option [A]): OptionSD [A] =
    if option.isEmpty
    then NoneSD_ [A] ()
    else SomeSD_ [A] (option.get)

}

* OptionSDBuilder_ [A] ()
  extends OptionSDBuilder [A]
