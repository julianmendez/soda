/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is an Option implemented without exceptions.
 */

class OptionSD [A]

  abstract
    toOption : Option [A]
    isEmpty : Boolean
    isDefined : Boolean
    isNonEmpty : Boolean
    toSeq : Seq [A]

  opt [B] (ifEmpty : B) (ifNonEmpty : A -> B) : B =
    match this
      case SomeSD_ (element) ==> ifNonEmpty (element)
      case x ==> ifEmpty

  map [B] (mapping : A -> B) : OptionSD [B] =
    match this
      case SomeSD_ (element) ==> SomeSD_ [B] (mapping (element) )
      case x ==> NoneSD_ [B] ()

  getOrElse (default : A) : A =
    match this
      case SomeSD_ (element) ==> element
      case x ==> default

  fold [B] (ifEmpty : B) (f : A -> B) : B =
    match this
      case SomeSD_ (element) ==> f (element)
      case x ==> ifEmpty

  flatMap [B] (mapping : A -> OptionSD [B] ) : OptionSD [B] =
    match this
      case SomeSD_ (element) ==> mapping (element)
      case x ==> NoneSD_ ()

  bind [B] (mapping : A -> OptionSD [B] ) : OptionSD [B] =
    flatMap [B] (mapping)

  filter (predicate : A -> Boolean) : OptionSD [A] =
    match this
      case SomeSD_ (element) ==>
        if predicate (element)
        then this
        else NoneSD_ [A] ()
      case x ==> NoneSD_ ()

end

class NoneSD [A]
  extends
    OptionSD [A]

  toOption : None.type = None

  isEmpty : Boolean = true

  isDefined : Boolean = not isEmpty

  isNonEmpty : Boolean = not isEmpty

  toSeq : Seq [A] = Seq ()

end

class OptionSDWithElement [A]
  extends
    OptionSD [A]

  abstract
    toOption : Option [A]
    isEmpty : Boolean
    isDefined : Boolean
    isNonEmpty : Boolean
    toSeq : Seq [A]
    element : A

end

class SomeSD [A]
  extends
    OptionSDWithElement [A]

  abstract
    element : A

  value : A = element

  toOption : Some [A] = Some [A] (element)

  isEmpty : Boolean = false

  isDefined : Boolean = not isEmpty

  isNonEmpty : Boolean = not isEmpty

  toSeq : Seq [A] = Seq (element)

end

class OptionSDBuilder [A]

  build (option : Option [A] ) : OptionSD [A] =
    if option.isEmpty
    then NoneSD_ [A] ()
    else SomeSD_ [A] (option.get)

end
