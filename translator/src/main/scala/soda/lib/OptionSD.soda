/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is an Option implemented without exceptions.
 */
* OptionSD[A] = {

  has opt[B](ifEmpty: B, ifNonEmpty: A -> B): B

  has map[B](mapping: A -> B): OptionSD[B]

  has toOption: Option[A]

  isEmpty: Boolean =
    opt(ifEmpty := true, ifNonEmpty := element -> false)

  isDefined: Boolean = not isEmpty

  nonEmpty: Boolean = not isEmpty

  toSeq: Seq[A] =
    opt(ifEmpty := Seq(), ifNonEmpty := element -> Seq(element))

  getOrElse(default: A): A =
    opt(ifEmpty := default, ifNonEmpty := element -> element)

  fold[B](ifEmpty: B, f: A -> B): B =
    opt(ifEmpty, f)

  flatMap[B](mapping: A -> OptionSD[B]): OptionSD[B] =
    opt(
      ifEmpty := NoInst[B](),
      ifNonEmpty := element -> mapping(element)
    )

  bind[B](mapping: A -> OptionSD[B]): OptionSD[B] = flatMap[B](mapping)

  filter(predicate: A -> Boolean): OptionSD[A] =
    opt(
      ifEmpty := this,
      ifNonEmpty := element -> if predicate(element) then this else NoInst[A]()
    )
}

* NoneSD[A] extends OptionSD[A] = {

  opt[B](ifEmpty: B, ifNonEmpty: A -> B): B = ifEmpty

  map[B](mapping: A -> B): NoneSD[B] = NoInst[B]()

  toOption: None.type = None
}

* NoInst[A]() extends NoneSD[A]

* SomeSD[A] extends OptionSD[A] = {

  has element: A

  get: A = element

  opt[B](ifEmpty: B, ifNonEmpty: A -> B): B = ifNonEmpty(element)

  map[B](mapping: A -> B): SomeSD[B] = SomeInst[B](mapping(element))

  toOption: Some[A] = Some[A](element)
}

* SomeInst[A](element: A) extends SomeSD[A]

* OptionSDBuilder[A] = {

  build(option: Option[A]): OptionSD[A] =
    if option.isEmpty
    then NoInst[A]()
    else SomeInst[A](option.get)
}

* OptionSDBuilderImpl[A]() extends OptionSDBuilder[A]
