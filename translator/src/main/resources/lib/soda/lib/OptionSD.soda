/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is an Option implemented without exceptions.
 */
* OptionSD[T] {

  has open[B](ifEmpty: B, ifNonEmpty: T -> B): B

  isEmpty: Boolean =
    open(
      ifEmpty := true,
      ifNonEmpty := element -> false
    )

  map[B](mapping: T -> B): OptionSD[B] =
    open(
      ifEmpty := NoneSD[B](),
      ifNonEmpty := element -> SomeSD[B](mapping(element))
    )
}

* NoneSD[T] () extends OptionSD[T] {

  open[B](ifEmpty: B, ifNonEmpty: T -> B): B = ifEmpty
}

* SomeSD[T] (element: T) extends OptionSD[T] {

  get: T = element

  open[B](ifEmpty: B, ifNonEmpty: T -> B): B = ifNonEmpty(element)
}

* OptionSDBuilder[T]() {

  build(opt: Option[T]): OptionSD[T] =
    if opt.isEmpty
    then NoneSD[T]()
    else SomeSD[T](opt.get)

}

