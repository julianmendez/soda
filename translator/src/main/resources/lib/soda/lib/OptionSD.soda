/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is an Option implemented without exceptions.
 */

class OptionSD [A]

  abstract
    toOption: Option [A]
    isEmpty: Boolean
    isDefined: Boolean
    isNonEmpty: Boolean
    toSeq: Seq [A]

  opt [B] (ifEmpty: B, ifNonEmpty: A -> B): B =
    match this
      | NoneSD_ () => ifEmpty
      | SomeSD_ (element) => ifNonEmpty (element)
    end

  map [B] (mapping: A -> B): OptionSD [B] =
    match this
      | NoneSD_ () => NoneSD_ [B] ()
      | SomeSD_ (element) => SomeSD_ [B] (mapping (element))
    end

  getOrElse (default: A): A =
    match this
      | NoneSD_ () => default
      | SomeSD_ (element) => element
    end

  fold [B] (ifEmpty: B, f: A -> B): B =
    match this
      | NoneSD_ () => ifEmpty
      | SomeSD_ (element) => f (element )
    end

  flatMap [B] (mapping: A -> OptionSD [B]): OptionSD [B] =
    match this
      | NoneSD_ () => NoneSD_ ()
      | SomeSD_ (element) => mapping (element)
    end

  bind [B] (mapping: A -> OptionSD [B]): OptionSD [B] =
    flatMap [B] (mapping)

  filter (predicate: A -> Boolean): OptionSD [A] =
    match this
      | NoneSD_ () => NoneSD_ ()
      | SomeSD_ (element) =>
        if predicate (element)
        then this
        else NoneSD_ [A] ()
    end

end

class NoneSD [A]
  extends
    OptionSD [A]

  toOption: None.type = None

  isEmpty: Boolean = true

  isDefined: Boolean = not isEmpty

  isNonEmpty: Boolean = not isEmpty

  toSeq: Seq [A] = Seq ()

end

class NoneSD_ [A] ()
  extends
    NoneSD [A]

end

class OptionSDWithElement [A]
  extends
    OptionSD [A]

  abstract
    toOption: Option [A]
    isEmpty: Boolean
    isDefined: Boolean
    isNonEmpty: Boolean
    toSeq: Seq [A]
    element: A

end

class SomeSD [A]
  extends
    OptionSDWithElement [A]

  abstract
    element: A

  value: A = element

  toOption: Some [A] = Some [A] (element)

  isEmpty: Boolean = false

  isDefined: Boolean = not isEmpty

  isNonEmpty: Boolean = not isEmpty

  toSeq: Seq [A] = Seq (element)

end

class SomeSD_ [A] (element: A)
  extends SomeSD [A]

end

class OptionSDBuilder [A]

  build (option: Option [A]): OptionSD [A] =
    if option.isEmpty
    then NoneSD_ [A] ()
    else SomeSD_ [A] (option.get)

end

class OptionSDBuilder_ [A] ()
  extends
    OptionSDBuilder [A]

end

