/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This class contains tail recursive auxiliary functions.
 */
trait Recursive {

  def fold [A, B, C <: B]  (sequence: Seq [A], initial_value: C, next_value_function: (B, A ) => C, condition: (B, A ) => Boolean ): C =
    {
      import scala.annotation.tailrec
        @tailrec
      def rec (seq: Seq [A], acc: C ): C =
        if (seq.isEmpty
        ) acc
        else
          if (! condition (acc, seq.head )
          ) acc
          else rec (seq.tail, next_value_function (acc, seq.head )  )

      rec (sequence, initial_value ) }

  def fold [A, B, C <: B]  (sequence: Seq [A], initial_value: C, next_value_function: (B, A ) => C ): C =
    {
      import scala.annotation.tailrec
        @tailrec
      def rec (seq: Seq [A], acc: C ): C =
        if (seq.isEmpty
        ) acc
        else rec (seq.tail, next_value_function (acc, seq.head )  )

      rec (sequence, initial_value ) }

  def range (length: Int ): Seq [Int] =
    {
      import scala.annotation.tailrec
        @tailrec
      def rec (n: Int, seq: Seq [Int]  ): Seq [Int] =
        if (n <= 0
        ) seq
        else rec (n - 1, seq.+: (n - 1 )  )

      rec (length, Seq [Int]  ()  ) }
}

case class Rec () extends Recursive
