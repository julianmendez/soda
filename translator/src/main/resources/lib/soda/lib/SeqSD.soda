/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is a Seq implemented without exceptions.
 */
* SeqSD[T] {

  has open[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[T] -> B): B

  has seq: Seq[T]

  has reverse: SeqSD[T]

  @override
  toString: String = seq.toString

}

* EmptySeqSD[T]() extends SeqSD[T] {

  open[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[T] -> B): B = ifEmpty

  seq: Seq[T] = Seq[T]()

  reverse: EmptySeqSD[T] = this

}

* NonEmptySeqSD[T] extends SeqSD[T] {

  open[B](ifEmpty: B, ifNonEmpty: NonEmptySeqSD[T] -> B): B = ifNonEmpty(this)

  head: T = seq.head

  tail: SeqSD[T] = SeqSDBuilder[T]().build(seq.tail)

  reverse: NonEmptySeqSD[T] = _NonEmptySeqSD(seq.reverse)

}

* _NonEmptySeqSD[T](seq: Seq[T]) extends NonEmptySeqSD[T]

* SeqSDBuilder[T]() {

  build(seq: Seq[T]): SeqSD[T] =
    if seq.isEmpty
    then EmptySeqSD[T]()
    else _NonEmptySeqSD[T](seq)

}

