/*
 * This file is automatically generated. Do not edit.
 */


/**
 * This is a Seq implemented without exceptions.
 */

class SeqSD [A : Type]

  abstract
    toSeq : Seq [A]
    reverse : SeqSD [A]

  opt [B : Type] (ifEmpty : B) (ifNonEmpty : NonEmptySeqSD [A] -> B) : B =
    match this
      case NonEmptySeqSD_ (toSeq) ==> ifNonEmpty (NonEmptySeqSD_ [A] (toSeq) )
      case otherwise ==> ifEmpty

end

class EmptySeqSD [A : Type]
  extends
    SeqSD [A]

  abstract

  toSeq : Seq [A] = Seq [A] ()

  reverse : EmptySeqSD [A] = this

end

class NonEmptySeqSD [A : Type]
  extends
    SeqSD [A]

  abstract
    toSeq : Seq [A]

  head : A = toSeq .head

  tail : SeqSD [A] = SeqSDBuilder_ [A] () .build (toSeq .tail)

  reverse : NonEmptySeqSD [A] = NonEmptySeqSD_ [A] (toSeq .reverse)

end

class SeqSDBuilder [A : Type]

  abstract

  build (seq : Seq [A] ) : SeqSD [A] =
    if seq .isEmpty
    then EmptySeqSD_ [A] ()
    else NonEmptySeqSD_ [A] (seq)

end

