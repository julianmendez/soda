/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is a Seq implemented without exceptions.
 */

class SeqSD [A]

  abstract
    opt [B] (ifEmpty: B, ifNonEmpty: NonEmptySeqSD [A] -> B): B
    toSeq: Seq [A]
    reverse: SeqSD [A]

end

class EmptySeqSD [A]
  extends
    SeqSD [A]

  opt [B] (ifEmpty: B, ifNonEmpty: NonEmptySeqSD [A] -> B): B = ifEmpty

  toSeq: Seq [A] = Seq [A] ()

  reverse: EmptySeqSD [A] = this

end

class EmptySeqSD_ [A] ()
  extends
    EmptySeqSD [A]

end

class NonEmptySeqSD [A]
  extends
    SeqSD [A]

  opt [B] (ifEmpty: B, ifNonEmpty: NonEmptySeqSD [A] -> B): B = ifNonEmpty (this)

  head: A = toSeq.head

  tail: SeqSD [A] = SeqSDBuilder_ [A] ().build (toSeq.tail)

  reverse: NonEmptySeqSD [A] = NonEmptySeqSD_ (toSeq.reverse)

end

class NonEmptySeqSD_ [A] (toSeq: Seq [A])
  extends
    NonEmptySeqSD [A]

end

class SeqSDBuilder [A]

  build (seq: Seq [A]): SeqSD [A] =
    if seq.isEmpty
    then EmptySeqSD_ [A] ()
    else NonEmptySeqSD_ [A] (seq)

end

class SeqSDBuilder_ [A] ()
  extends
    SeqSDBuilder [A]

end

