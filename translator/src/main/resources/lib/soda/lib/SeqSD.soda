/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is a Seq implemented without exceptions.
 */

class SeqSD [A]

  abstract
    toSeq : Seq [A]
    reverse : SeqSD [A]

  opt [B] (ifEmpty : B) (ifNonEmpty : NonEmptySeqSD [A] -> B) : B =
    match this
      case NonEmptySeqSD_ (toSeq) ==> ifNonEmpty (NonEmptySeqSD_ (toSeq) )
      case x ==> ifEmpty
    end

end

class EmptySeqSD [A]
  extends
    SeqSD [A]

  toSeq : Seq [A] = Seq [A] ()

  reverse : EmptySeqSD [A] = this

end

class NonEmptySeqSD [A]
  extends
    SeqSD [A]

  abstract
    toSeq : Seq [A]

  head : A = toSeq.head

  tail : SeqSD [A] = SeqSDBuilder_ [A] ().build (toSeq.tail)

  reverse : NonEmptySeqSD [A] = NonEmptySeqSD_ (toSeq.reverse)

end

class SeqSDBuilder [A]

  build (seq : Seq [A] ) : SeqSD [A] =
    if seq.isEmpty
    then EmptySeqSD_ [A] ()
    else NonEmptySeqSD_ [A] (seq)

end

