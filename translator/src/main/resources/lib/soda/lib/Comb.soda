/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This class contains auxiliary functions for combinations.
 */
* CartesianProduct = {

  get_cartesian_product[T](sequences: Seq[Seq[T]]): Seq[Seq[T]] =
    let
      result =
        if sequences.isEmpty
        then sequences
        else
          let
            rev_sequences = sequences.reverse
          in Rec().fold(rev_sequences.tail, initial_value(rev_sequences.head), next_value)

      initial_value(seq: Seq[T]): Seq[Seq[T]] = seq.map(elem -> Seq(elem))

      next_value(accum: Seq[Seq[T]], seq_a: Seq[T]): Seq[Seq[T]] =
        seq_a.flatMap(elem_a ->
          accum.map(seq_b -> seq_b.+:(elem_a) ) )

    in result
}

* Comb() extends CartesianProduct

