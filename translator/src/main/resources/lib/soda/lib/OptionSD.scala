/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/*
 * This package contains a small collection of classes that are useful in Soda.
 * These classes can be imported instead of the Scala or Java classes,
 * or can be used as an inspiration for similar developments.
 */



/*
 * This file is automatically generated. Do not edit.
 */

/**
 * This is an Option implemented without exceptions.
 */

trait OptionSD [A]
{

  def   toOption : Option [A]
  def   isEmpty : Boolean
  def   isDefined : Boolean
  def   isNonEmpty : Boolean
  def   toSeq : Seq [A]

  def opt [B] (ifEmpty : B) (ifNonEmpty : A => B) : B =
    this match  {
      case SomeSD_ (element) => ifNonEmpty (element)
      case x => ifEmpty
    }

  def map [B] (mapping : A => B) : OptionSD [B] =
    this match  {
      case SomeSD_ (element) => SomeSD_ [B] (mapping (element) )
      case x => NoneSD_ [B] ()
    }

  def getOrElse (default : A) : A =
    this match  {
      case SomeSD_ (element) => element
      case x => default
    }

  def fold [B] (ifEmpty : B) (f : A => B) : B =
    this match  {
      case SomeSD_ (element) => f (element)
      case x => ifEmpty
    }

  def flatMap [B] (mapping : A => OptionSD [B] ) : OptionSD [B] =
    this match  {
      case SomeSD_ (element) => mapping (element)
      case x => NoneSD_ ()
    }

  def bind [B] (mapping : A => OptionSD [B] ) : OptionSD [B] =
    flatMap [B] (mapping)

  def filter (predicate : A => Boolean) : OptionSD [A] =
    this match  {
      case SomeSD_ (element) =>
        if ( predicate (element)
        ) this
        else NoneSD_ [A] ()
      case x => NoneSD_ ()
    }

}

case class OptionSD_ [A] (toOption : Option [A], isEmpty : Boolean, isDefined : Boolean, isNonEmpty : Boolean, toSeq : Seq [A]) extends OptionSD [A]

trait NoneSD [A]
  extends
    OptionSD [A]
{

  lazy val toOption : None.type = None

  lazy val isEmpty : Boolean = true

  lazy val isDefined : Boolean = ! isEmpty

  lazy val isNonEmpty : Boolean = ! isEmpty

  lazy val toSeq : Seq [A] = Seq ()

}

case class NoneSD_ [A] () extends NoneSD [A]

trait OptionSDWithElement [A]
  extends
    OptionSD [A]
{

  def   toOption : Option [A]
  def   isEmpty : Boolean
  def   isDefined : Boolean
  def   isNonEmpty : Boolean
  def   toSeq : Seq [A]
  def   element : A

}

case class OptionSDWithElement_ [A] (toOption : Option [A], isEmpty : Boolean, isDefined : Boolean, isNonEmpty : Boolean, toSeq : Seq [A], element : A) extends OptionSDWithElement [A]

trait SomeSD [A]
  extends
    OptionSDWithElement [A]
{

  def   element : A

  lazy val value : A = element

  lazy val toOption : Some [A] = Some [A] (element)

  lazy val isEmpty : Boolean = false

  lazy val isDefined : Boolean = ! isEmpty

  lazy val isNonEmpty : Boolean = ! isEmpty

  lazy val toSeq : Seq [A] = Seq (element)

}

case class SomeSD_ [A] (element : A) extends SomeSD [A]

trait OptionSDBuilder [A]
{

  def build (option : Option [A] ) : OptionSD [A] =
    if ( option.isEmpty
    ) NoneSD_ [A] ()
    else SomeSD_ [A] (option.get)

}

case class OptionSDBuilder_ [A] () extends OptionSDBuilder [A]
