/*
 * This file is automatically generated. Do not edit.
 */


/**
 * This class contains tail recursive auxiliary functions.
 */

class FoldWhile

  @tailrec
  _tailrec_fold_while [A : Type] [B : Type] (sequence : Seq [A] ) (current : B)
      (next : B -> A -> B) (condition : B -> A -> Boolean) : B =
    if sequence .isEmpty or (not condition (current) (sequence .head) )
    then current
    else _tailrec_fold_while (sequence .tail) (next (current) (sequence .head) ) (next) (
      condition)

  apply [A : Type] [B : Type] (sequence : Seq [A] ) (initial : B) (next : B -> A -> B)
    (condition : B -> A -> Boolean)
      : B =
    _tailrec_fold_while (sequence) (initial) (next) (condition)

end

class Fold

  @tailrec
  _tailrec_fold [A : Type] [B : Type] (sequence : Seq [A] ) (current : B) (next : B -> A -> B)
      : B =
    if sequence .isEmpty
    then current
    else _tailrec_fold (sequence .tail) (next (current) (sequence .head) ) (next)

  apply [A : Type] [B : Type] (sequence : Seq [A] ) (initial : B) (next : B -> A -> B) : B =
    _tailrec_fold (sequence) (initial) (next)

end

class Range

  @tailrec
  _tailrec_range (n : Int) (sequence : Seq [Int] ) : Seq [Int] =
    if n <= 0
    then sequence
    else _tailrec_range (n - 1) (sequence .+: (n - 1) )

  apply (length : Int) : Seq [Int] =
    _tailrec_range (length) (Seq [Int] () )

end

class Recursion

  _fold_while = FoldWhile_ ()

  _fold = Fold_ ()

  _range = Range_ ()

  fold_while [A : Type] [B : Type] (sequence : Seq [A] ) (initial : B) (next : B -> A -> B)
      (condition : B -> A -> Boolean) : B =
    _fold_while .apply (sequence) (initial) (next) (condition)

  fold [A : Type] [B : Type] (sequence : Seq [A] ) (initial : B) (next : B -> A -> B) : B =
    _fold .apply (sequence) (initial) (next)

  range (length : Int) : Seq [Int] =
    _range .apply (length)

end

