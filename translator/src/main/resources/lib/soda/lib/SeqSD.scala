/*
 * This file is automatically generated. Do not edit.
 */

package soda.lib

/**
 * This is a Seq implemented without exceptions.
 */
trait SeqSD [T] {

  def open [B]  (ifEmpty: B, ifNonEmpty: NESeqSD [T] => B ): B

  def seq: Seq [T]

  override
  lazy val toString: String = seq.toString

}

case class ESeqSD [T]  () extends SeqSD [T] {

  def open [B]  (ifEmpty: B, ifNonEmpty: NESeqSD [T] => B ): B = ifEmpty

  lazy val seq: Seq [T] = Seq [T]  ()

}

case class NESeqSD [T]  (head: T, tailSeq: Seq [T]  ) extends SeqSD [T] {

  def open [B]  (ifEmpty: B, ifNonEmpty: NESeqSD [T] => B ): B = ifNonEmpty (this )

  lazy val seq: Seq [T] = tailSeq.+: (head )

}

case class SeqSDBuilder [T]  () {

  def build (seq: Seq [T]  ): SeqSD [T] =
    if (seq.isEmpty
    ) ESeqSD [T]  ()
    else NESeqSD [T]  (seq.head, seq.tail )

}
