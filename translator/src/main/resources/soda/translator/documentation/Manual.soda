package soda.manual

/*
 * This is a Soda tutorial written in Soda.
 * Copyright 2020--2024 Julian Alfredo Mendez
 * Version: 2024-02-01
 */

/* This tutorial is itself a "Hello world!" program.
 * The piece of code that prints the message is at the end of the file. */

/* Source code written in Soda is intended to be descriptive and readable.
 * It is usually written in different files, and each file has `blocks`.
 * These blocks are pieces of code that have some meaning.
 * A block should be short, maybe less than 10 lines.
 * However, it is more important to make things clear than concise.
 * These are examples of blocks:
 * 1. a constant or function definition
 * 2. the beginning of a class definition
 * 3. the end of a class definition
 * 4. a block declaration of abstract constants and functions
 * 5. a block of imports
 * 6. a package declaration
 * 7. a class alias
 * 8. a comment */


/* To declare a class, just add `class` before a class name, and end it with `end`. It is a good
 * practice to include `abstract` in the class, to explicitly state whether constants and
 * functions are required to instantiate a class. In the example below, no constants or
 * functions ar required.
 * For the class name, it is recommended to use camel case style starting with a capital letter.
 * The name could be a noun or an adjective, but it should not be a verb. */

class Shape

  abstract

end

/* The reserved word `class` declares a type, a namespace, and a default constructor.
 * The default constructor is the name of the class with an underscore as suffix.
 * For example, the constructor name for `Shape` is `Shape_`.
 * In addition, it is possible to use a function `mk` to instantiate a class. The notation looks
 * as a static function of the type. For example,  for `Shape` is `Shape .mk` without
 * parentheses. */

class Movable

  abstract

end

/* It is recommended to indent the constants and functions declared inside. */

class EqualsExample

  /* Note that `abstract` does not contain any constants or functions in this example, and the
   * declared constants and functions are in a different block. */

  abstract

  /* A constant does not have parameters and it is declared with the equals sign (`=`).
   * For the constant name, it is recommended to use snake case and start in lowercase.
   * The constant name should be a noun. */

  my_number : Int = 2

  /* A function has parameters and a type. Functions, even with empty parameters, are evaluated
   * every time they are invoked. The standard way of declaring and invoking a function
   * with multiple parameters is with parameters separated by spaces and not by commas. For
   * example, use `f (x) (y)` instead of `f(x, y)`. */

  f (x : Int) (y : Int) : Int = 2 * x + y

  /* Constants are only evaluated once, which is the first time they are needed. */

  first_result : Int = f (12) (4)

  /* In a function call, the parameters can be specified with the colon-equals sign (`:=`).
   * This is especially recommended when several parameters are of the same type. */

  second_result : Int = f (x := 20) (y := -10)

end

/* A class can extend other classes by using `extends`.
 * Abstract classes cannot be instantiated but can be extended.
 * Conversely, concrete classes cannot be extended but can be instantiated.
 * Concrete classes are declared with parentheses `(` and `)`.
 * It is recommended that concrete classes do not have a body, because this cannot be extended.
 * A class does not need to define all its constants and functions. */

class RegisteredPerson

  /* The block starting with `abstract` denotes a constant or function that needs to be defined
   * in extending classes. Only one `abstract` block should be defined per class, without
   * leaving lines between the declared attributes. */

  abstract
    first_name : String
    last_name : String

  /* If a constant or function is not meant to be exported, its name should start with an
   * underscore. */

  _separator = " "

  /* Strings can be concatenated by using the plus sign (`+`). */

  full_name = first_name + _separator + last_name

end

class Agent

  abstract
    identifier : String

end

/* A concrete class needs as parameters all the constants and functions that have not been
 * defined in its super classes. Please, note that `extends` has to be in the same block as
 * `class`, which need to be in a different block from `abstract`. */

class RegisteredPersonAgent
  extends
    Agent
    RegisteredPerson

  abstract
    identifier : String
    first_name : String
    last_name : String

end

class Element

  /* In this class, `accept` is a function that takes an object of type `Visitor` and returns
   * an object of type `Boolean`. This is indicated with the type arrow `->`. */

  abstract
    accept : Visitor -> Boolean

end

class Visitor

  /* In this class, `visit` is a function define from `Element` to `Boolean`. */

  abstract
    visit : Element -> Boolean

end

class Item
  extends Element

  abstract
    identifier : Int

  /* It is possible to refer to an object instance by using `this`.
   * The dot (`.`) notation is the standard way of accessing attributes and methods of an
   * object. The space before the dot is to improve readability, but it is not necessary.
   * Lambda functions are declared with `lambda` and a long right arrow (`-->`).
   * Please, notice the difference between the type arrow (`->`) and the lambda arrow (`-->`).
   */

  accept : Visitor -> Boolean =
    lambda visitor -->
      visitor .visit (this)

end

class PersonName

  abstract
    name : String

  /* It is possible to override a function by using the `@override` annotation.
   * This is intended only for exceptional cases, like the `toString` function, or a
   * diamond-shaped class hierarchy. */

  @override
  toString = name

end

/* A class can be parameterized using square brackets ('[' and ']').
 * The parameter needs to be of type Type. */

class MyList [A : Type]

  abstract

end

/* It is possible to have multiple type parameters. */

class MyPair [A : Type] [B : Type]

  abstract
    fst : A
    snd : A

end

/* The parameter type can be constrained using `subtype` and `supertype`.
 * In that case, it is not necessary to declare the parameter to be of type Type.
 * For example, `A subtype B` means that `A` is a subtype of `B`. */

class ShapePainter [A subtype Shape]

  abstract

end

/*
 * This contains the examples shown in the manual.
 */

class Manual

  abstract

  /* The first line in this file is the package declaration. It contains the reserved word
   * `package` followed by the package name. The recommended package naming convention is to
   * start with `soda.`, to avoid name conflicts when it is translated to Scala.
   * The package declaration usually goes in a separate file called `Package.soda`. */

  /* It is possible to import classes by listing them under the `import` reserved word.
   * Imported classes can also be declared in the `Package.soda` file, when they are global
   * for the whole package. The list of imported classes can be used to control which classes
   * may be used to produce side effects. */

  import
    java.util.Date

  a = 1

  b : Int = 2

  /* An instance of a JVM class can be created with the `@new` annotation. If the code is
   * translated to Scala 3, this annotation is not required. */

  now : Date = @new Date ()

  plus_one (x : Int) : Int = x + 1

  /* A piecewise function can be defined using an `if`-`then`-`else` structure. The condition in
   * the `if` is evaluated, and then only the corresponding branch is evaluated. */

  max (x : Int) (y : Int) : Int =
    if x > y
    then x
    else y

  /* Scala sequences (`Seq`) can be used, as well as other basic Scala classes. */

  plus_one (sequence : Seq [Int] ) : Seq [Int] =
    sequence .map (lambda element --> element + 1)

  /* A synonym for `lambda` is `any`, which sometimes brings more readability. */

  plus_two (sequence : Seq [Int] ) : Seq [Int] =
    sequence .map (any element --> element + 2)

  /* Boolean values `false` and `true` are available. */

  my_not (x : Boolean) : Boolean =
    if x
    then false
    else true

  my_and (x : Boolean) (y : Boolean) : Boolean =
    if x
    then y
    else false

  my_or (x : Boolean) (y : Boolean) : Boolean =
    if x
    then true
    else y

  /* Boolean values have the standard `not`-`and`-`or` functions. */

  my_xor (x : Boolean) (y : Boolean) : Boolean =
    (x or y) and not (x and y)

  /* It is possible to use pattern matching with `match` and `case`.
   * The result of the matching case is put after a long double arrow `==>`.
   * The order matters, so the remaining cases are capture by the last variable.
   * Please notice the difference between the case arrow (`==>`), the lambda arrow (`-->`), and
   * the type arrow (`->`). */

  if_then_else [A : Type] (condition : Boolean) (if_true : A) (if_false : A) : A =
    match condition
      case true ==> if_true
      case false ==> if_false

  /* A constant or function name starting with underscore indicates that the constant or
   * function is private, and therefore is not visible outside the class. */

   _my_private_function (x : Float) : Float =
     x * x + x + 1

  /* A tail recursive function cannot be declared inside another function, and its name should
   * start with underscore. The annotation `@tailrec` helps ensuring that the tail recursion is
   * detected and optimized when it is translated to Scala. */

  @tailrec
  _tailrec_sum (n : Int) (accum : Int) : Int =
    if n < 0
    then accum
    else _tailrec_sum (n - 1) (n + accum)

  sum (n : Int) =
    _tailrec_sum (n) (0)

end

/* The class `Fold` shows a 'left fold', which is a functional approach to iterations. Starting
 * with an initial value (`initial`), it traverses a sequence (`sequence`) applying a function
 * (`next`) using the current element in the sequence and the result of the previous
 * computation. */

class Fold

  abstract

  /* Note that the type parameters need to specified in the function call:
   * `_tailrec_foldl [A] [B]`... The sequence constructor `+:` is defined by `Seq`.
   * This is equivalent to the more common constructor `::`, when it is used for instances of
   * `List`. `Nil` is the constructor for an empty `Seq`. */

  _tailrec_foldl [A : Type] [B : Type] (sequence : Seq [A] ) (current : B)
      (next : B -> A -> B) : B =
    match sequence
      case Nil ==> current
      case (head) +: (tail) ==>
        _tailrec_foldl [A] [B] (tail) (next (current) (head) ) (next)

  /* Ideally, each object should have one responsibility or purpose. The function `apply`
   * defines the main responsibility of an object. */

  apply [A : Type] [B : Type] (sequence : Seq [A] ) (initial : B) (next : B -> A -> B) : B =
    _tailrec_foldl [A] [B] (sequence) (initial) (next)

end

/* A piece of code of the destination language can be included with the reserved word
 * `directive`. In this example, we can define the concept of successor for integers for the
 * translation to Scala. */

directive scala
object Succ_ {
  def unapply (n : Int) : Option [Int] =
    if (n <= 0) None else Some (n - 1)
}

/* The class `Range` generates a sequence of length `n` of consecutive natural numbers starting
 * from 0. */

class Range

  abstract

  /* Note that `Range` processes any negative number as 0. This is done by `Succ_`, which only
  * returns values for positive values of `n`. */

  _tailrec_range (non_negative_number : Int) (sequence : Seq [Int] ) : Seq [Int] =
    match non_negative_number
      case Succ_ (k) ==>
        _tailrec_range (k) ( (k) +: (sequence) )
      case _otherwise ==> sequence

  apply (length : Int) : Seq [Int] =
    _tailrec_range (length) (Nil)

end

/* `Factorial` shows an example of how to compute the function factorial using a left fold. */

class Factorial

  abstract

  fold = Fold .mk

  range = Range .mk

  apply (n : Int) : Int =
    fold .apply [Int] [Int] (range .apply (n) ) (1) (
      lambda accum -->
        lambda k --> (accum * (k + 1) ) )

end

/* The main class has to be named `Main` and requires a `main` function that receives an
 * `Array [String]` and returns a `Unit`. Only one main class per package is allowed. */

class Main

  /* An output to the standard output can be sent with a `println` command.
   * This is a shorter form of JVM's `System.out.println`. */

  main (arguments : Array [String] ) : Unit =
    println ("Hello world!")

end

/* The main class has an extending concrete class. The class that needs to be invoked in a
 * translation to Scala is `EntryPoint`. */

