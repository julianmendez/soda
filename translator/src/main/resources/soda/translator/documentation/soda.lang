<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Authors: Julian Mendez
   Copyright (C) 2020 Julian Mendez <julian.mendez@gmail.com>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, see <http://www.gnu.org/licenses/>.

-->
<language id="soda" name="Soda" version="2.0" _section="Source">

    <metadata>
        <property name="mimetypes">text/x-soda</property>
        <property name="globs">*.soda</property>
        <property name="block-comment-start">/*</property>
        <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="error" name="Error" map-to="def:error"/>
        <style id="external" name="External" map-to="def:preprocessor"/>
        <style id="comment" name="Comment" map-to="def:comment"/>
        <style id="string" name="String" map-to="def:string"/>
        <style id="escaped-character" name="Escaped Character" map-to="def:special-char"/>
        <style id="keyword" name="Keyword" map-to="def:keyword"/>
        <style id="special" name="Special Constant" map-to="def:special-constant"/>
        <style id="number" name="Number" map-to="def:decimal"/>
        <style id="operator" name="Operator" map-to="def:operator"/>
        <style id="type" name="Data Type" map-to="def:identifier"/>
        <style id="builtin" name="Built In" map-to="def:type"/>
        <style id="other" name="Other" map-to="def:special-char"/>
        <style id="xmltag" name="XML Tag" map-to="def:identifier"/>
    </styles>

    <definitions>
        <define-regex id="escaped-character" extended="true">
            \\( # leading backslash
            [\\\"\'nrbtf] | # escaped character
            [0-9]{1,3} | # latin encoded char
            u[0-9]{1,4} # unicode char
            )
        </define-regex>

        <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
            <start>"</start>
            <end>"</end>
            <include>
                <context id="escaped-character" style-ref="escaped-character">
                    <match>\%{escaped-character}</match>
                </context>
            </include>
        </context>

        <context id="multiline-string" style-ref="string" end-at-line-end="false" class="string"
                 class-disabled="no-spell-check">
            <start>"""</start>
            <end>"""</end>
        </context>

        <context id="operators" style-ref="operator" extend-parent="false">
            <match>[-.~^@,;:/%|\=\+\*\!\?&amp;&lt;&gt;()_\[\]]</match>
        </context>

        <context id="character" style-ref="special">
            <match>'(\%{escaped-character}|.)'</match>
        </context>

        <context id="character-error" style-ref="error">
            <match>'(\%{escaped-character}|.)[^\s]+'</match>
        </context>

        <context id="symbol" style-ref="special">
            <match>'[a-zA-Z_][a-zA-Z0-9_]*</match>
        </context>

        <context id="block-comment" style-ref="comment">
            <start>/\*</start>
            <end>\*/</end>
            <include>
                <context ref="def:in-comment"/>
                <context ref="block-comment"/>
            </include>
        </context>

        <context id="numeric" style-ref="number">
            <match extended="true">
                (\b([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?\b|\b(([0-9]+[Ee][-]?[0-9]+|([0-9]*\.[0-9]+|[0-9]+\.)([Ee][-]?[0-9]+)?)[fFdD]?|[0-9]+[FfDd]))
            </match>
        </context>

        <context id="annotation">
            <match>(^\s*|[^a-zA-Z0-9_\s]\s*)(@[a-zA-Z][a-zA-Z0-9_]*)</match>
            <include>
                <context sub-pattern="2" style-ref="special"/>
            </include>
        </context>

        <context id="xmltag">
            <match>(&lt;/?\w+)(\s(\w+\=)\{.*\})*(/?&gt;)</match>
            <include>
                <context sub-pattern="1" style-ref="xmltag"/>
                <context sub-pattern="3" style-ref="xmltag"/>
                <context sub-pattern="4" style-ref="xmltag"/>
            </include>
        </context>

        <context id="literal-identifier">
            <start>`</start>
            <end>`</end>
        </context>

        <context id="external" style-ref="external">
            <keyword>package</keyword>
            <keyword>import</keyword>
        </context>

        <context id="declaration" style-ref="keyword">
            <keyword>let</keyword>
            <keyword>in</keyword>
            <keyword>match</keyword>
            <keyword>case</keyword>
            <keyword>end</keyword>
            <keyword>class</keyword>
            <keyword>has</keyword>
            <keyword>extends</keyword>
            <keyword>with</keyword>
            <keyword>this</keyword>
            <keyword>subtype</keyword>
            <keyword>supertype</keyword>
            <keyword>theorem</keyword>
            <keyword>proof</keyword>
        </context>

        <context id="condition" style-ref="keyword">
            <keyword>if</keyword>
            <keyword>then</keyword>
            <keyword>else</keyword>
        </context>

        <context id="synonym" style-ref="keyword">
            <keyword>is</keyword>
            <keyword>lambda</keyword>
        </context>

        <context id="special" style-ref="special">
            <keyword>false</keyword>
            <keyword>true</keyword>
            <keyword>not</keyword>
            <keyword>and</keyword>
            <keyword>or</keyword>
            <keyword>result</keyword>
        </context>

        <context id="primitive-type" style-ref="type">
            <keyword>Boolean</keyword>
            <keyword>Byte</keyword>
            <keyword>Char</keyword>
            <keyword>Double</keyword>
            <keyword>Float</keyword>
            <keyword>Int</keyword>
            <keyword>Long</keyword>
            <keyword>Short</keyword>
            <keyword>Unit</keyword>
        </context>

        <context id="library-type" style-ref="type">
            <!-- collection types //-->
            <keyword>Array</keyword>
            <keyword>String</keyword>

            <!-- general //-->
            <keyword>Option</keyword>
            <keyword>Some</keyword>
            <keyword>None</keyword>
            <keyword>Either</keyword>
            <keyword>Left</keyword>
            <keyword>Right</keyword>
            <keyword>Nil</keyword>
            <keyword>Null</keyword>
            <keyword>Nothing</keyword>
            <keyword>Class</keyword>
            <keyword>Any</keyword>
            <keyword>AnyVal</keyword>
            <keyword>AnyRef</keyword>
            <keyword>BigInt</keyword>
            <keyword>BigDecimal</keyword>

            <!-- immutable collections //-->
            <keyword>BitSet</keyword>
            <keyword>DefaultMap</keyword>
            <keyword>HashMap</keyword>
            <keyword>HashSet</keyword>
            <keyword>IndexedSeq</keyword>
            <keyword>IntMap</keyword>
            <keyword>Iterable</keyword>
            <keyword>LinearSeq</keyword>
            <keyword>List</keyword>
            <keyword>ListMap</keyword>
            <keyword>ListSet</keyword>
            <keyword>Map</keyword>
            <keyword>Nil</keyword>
            <keyword>Queue</keyword>
            <keyword>Seq</keyword>
            <keyword>Set</keyword>
            <keyword>SortedMap</keyword>
            <keyword>SortedSet</keyword>
            <keyword>Stack</keyword>
            <keyword>TreeMap</keyword>
            <keyword>TreeSet</keyword>
            <keyword>Vector</keyword>
        </context>

        <context id="soda" class="no-spell-check">
            <include>
                <context ref="literal-identifier"/>
                <context ref="multiline-string"/>
                <context ref="string"/>
                <context ref="character"/>
                <context ref="character-error"/>
                <context ref="symbol"/>
                <context ref="block-comment"/>
                <context ref="annotation"/>
                <context ref="external"/>
                <context ref="declaration"/>
                <context ref="synonym"/>
                <context ref="primitive-type"/>
                <context ref="library-type"/>
                <context ref="condition"/>
                <context ref="special"/>
                <context ref="numeric"/>
                <context ref="xmltag"/>
                <context ref="operators"/>
            </include>
        </context>

    </definitions>
</language>
