package se.umu.cs.rai.scopus.translator.documentation

import java.util.Date

import scala.annotation.tailrec


class Agent {
  has identifier: String
}

class Person (name: String)

class Agent_Person (name: String) extends Agent {
  identifier = name
}

class Ranked_Individual {
  has rank: Int
}

class Ranked_Agent_Person (name: String, person_rank: Int) extends Agent with Ranked_Individual {
  identifier = name

  rank = person_rank
}


class Element {
  has accept (v: Visitor): Boolean
}

class Visitor {
  has visit (x: Element): Boolean
}

class Element (identifier: Int) {
  accept (v: Visitor) = v.visit (this)
}

class Person_Name (name: String) {
  @override
  toString = name
}

class Manual() {

  a = 1

  b: Int = 2

  plus_one (x: Int): Int = x + 1

  max (x: Int, y: Int) =
    if x > y
    then x
    else y

  plus_one (sequence: Seq[Int]) =
    sequence.map(element -> element + 1)

  my_not (x: Boolean) =
    if x
    then false
    else true

  my_and (x: Boolean, y: Boolean) =
    if x
    then
      if y
      then true
      else false
    else false

  my_or (x: Boolean, y: Boolean) =
    if x
    then true
    else
      if y
      then true
      else false

  my_xor (x: Boolean, y: Boolean) = (x or y) and not (x and y)

  now = new Date()

  sum (n: Int) = sum_rec (n, 0)

  @tailrec
  sum_rec (n: Int, accum: Int): Int =
    if x < 0
    then accum
    else sum_rec (x - 1, x + accum)

}
