
class RecursionForLeanSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  toNat (n : Int) : Nat =
    IntNat_ () .from_non_negative (n)

  example_seq : List [Int] = List (0 , 1 , 1 , 2 , 3 , 5 , 8)

  _fold_left_while_initial_value = List [String] ()

  _fold_left_while_next_value_function : List [String] -> Int -> List [String] =
    lambda (s : List [String] ) --> lambda (e : Int) --> s  .+: ("" +  (e + 100))

  _fold_left_while_condition : List [String] -> Int -> Boolean =
    lambda (s : List [String] ) --> lambda (e : Int) --> e < 5

  test ("fold left while with Seq") (
    check (
      obtained :=
        RecursionForLean_ ()
          .fold4 (example_seq) (_fold_left_while_initial_value) (
            _fold_left_while_next_value_function) (_fold_left_while_condition)
    ) (
      expected := List ("103" , "102" , "101" , "101" , "100")
    )
  )

  _fold_left_initial_value = List [String] ()

  _fold_left_next_value_function : List [String] -> Int -> List [String] =
    lambda (s : List [String]) --> lambda (e : Int) --> s .+: ("" + (e + 100))

  test ("fold left with Seq") (
    check (
      obtained :=
        RecursionForLean_ ()
          .fold3 (example_seq) (_fold_left_initial_value) (
            _fold_left_next_value_function)
    ) (
      expected := List ("108" , "105" , "103" , "102" , "101" , "101" , "100")
    )
  )

  test ("range with positive number") (
    check (
      obtained := RecursionForLean_ () .range (toNat (8) )
    ) (
      expected := List [Nat] (toNat (0) , toNat (1) , toNat (2) , toNat (3) ,
       toNat (4) , toNat (5) , toNat (6) , toNat(7) )
    )
  )

  test ("range with zero size") (
    check (
      obtained := RecursionForLean_ () .range (toNat (0) )
    ) (
      expected := List [Nat] ()
    )
  )

end

