
class MyListSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  toNat (n : Int) : Nat =
    IntNat .mk .from_non_negative (n)

  example_list : List [Int] = List (0 , 1 , 1 , 2 , 3 , 5 , 8)

  empty_int_list : List [Int] = List ()

  initial_string_list : List [String] = List ("0", "1", "1", "2", "3", "5", "8", "13")

  empty_string_list : List [String] = List ()

  _fold_left_initial_value = List [String] ()

  _fold_left_next_value_function : List [String] -> Int -> List [String] =
    lambda (s : List [String] ) --> lambda (e : Int) --> s .+: ("" + (e + 100))

  test ("fold left with a list") (
    check (
      obtained :=
        MyList .mk
          .foldl [Int] [List [String] ] (example_list) (_fold_left_initial_value) (
            _fold_left_next_value_function)
    ) (
      expected := List ("108" , "105" , "103" , "102" , "101" , "101" , "100")
    )
  )

  test ("length of a list") (
    check (
      obtained := MyList .mk .length (example_list)
    ) (
      expected := toNat (7)
    )
  )

  test ("length of an empty list") (
    check (
      obtained := MyList .mk .length (empty_int_list)
    ) (
      expected := toNat (0)
    )
  )

  test ("reverse of a list") (
    check (
      obtained :=
        MyList .mk
          .reverse [String] (initial_string_list)
    ) (
      expected := List [String] ("13" , "8" , "5" , "3" , "2" , "1" , "1", "0")
    )
  )

  test ("reverse of an empty list") (
    check (
      obtained :=
        MyList .mk
          .reverse [String] (empty_string_list)
    ) (
      expected := List [String] ()
    )
  )

end

