package soda.example.forcoq


* RecursionForCoqSpec()
  extends org.scalatest.funsuite.AnyFunSuite = {

  exampleSeq: Seq[Int] = Seq(0, 1, 1, 2, 3, 5, 8)

  test("fold left while with Seq") {
    initial_value = Seq()
    next_value_function: (Seq[String], Int) -> Seq[String] = (s: Seq[String], e: Int) -> s.+:("" + (e + 100))
    condition: (Seq[String], Int) -> Boolean = (s: Seq[String], e: Int) -> e < 5
    expected = Seq("103", "102", "101", "101", "100")
    obtained = RecursionForCoq_().fold(exampleSeq, initial_value, next_value_function, condition)

    assert(obtained == expected)
  }

  test("fold left with Seq") {
    initial_value = Seq()
    next_value_function: (Seq[String], Int) -> Seq[String] = (s: Seq[String], e: Int) -> s.+:("" + (e + 100))
    expected = Seq("108", "105", "103", "102", "101", "101", "100")
    obtained = RecursionForCoq_().fold(exampleSeq, initial_value, next_value_function)

    assert(obtained == expected)
  }

  test("range with positive number") {
    expected = Seq(0, 1, 2, 3, 4, 5, 6, 7)
    obtained = RecursionForCoq_().range(8)

    assert(obtained == expected)
  }

  test("range with zero size") {
    expected = Seq()
    obtained = RecursionForCoq_().range(-1)

    assert(obtained == expected)
  }

  test("range with negative number") {
    expected = Seq()
    obtained = RecursionForCoq_().range(-1)

    assert(obtained == expected)
  }
}

