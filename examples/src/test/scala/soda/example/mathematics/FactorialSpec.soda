
class FactorialSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  factorial_values = Seq (
    (-1 , 1) , (0 , 1) , (1 , 1) , (2 , 2) , (3 , 6) , (4 , 24) , (5 , 120) , (6 , 720) ,
    (7 , 5040) , (8 , 40320) , (9 , 362880) , (10 , 3628800)
  )

  _factorial_concise = FactorialConcise .mk

  _factorial_simple = FactorialSimple .mk

  _factorial_patten_matching = FactorialPatternMatching .mk

  _factorial_with_fold = FactorialWithFold .mk

  test ("should test the factorial - concise version") (
    check (
      obtained := factorial_values
        .map (lambda pair --> pair ._1)
        .map (lambda n --> Tuple2 (n , _factorial_concise .apply (n) ) )
    ) (
      expected := factorial_values
    )
  )

  test ("should test the factorial - simple version") (
    check (
      obtained := factorial_values
        .map (lambda pair --> pair ._1)
        .map (lambda n --> Tuple2 (n , _factorial_simple .apply (n) ) )
    ) (
      expected := factorial_values
    )
  )

  test ("should test the factorial - with pattern matching") (
    check (
      obtained := factorial_values
        .map (lambda pair --> pair ._1)
        .map (lambda n --> Tuple2 (n , _factorial_patten_matching .apply (n) ) )
    ) (
      expected := factorial_values
    )
  )

  test ("should test the factorial - with fold") (
    check (
      obtained := factorial_values
        .map (lambda pair --> pair ._1)
        .map (lambda n --> Tuple2 (n , _factorial_with_fold .apply (n) ) )
    ) (
      expected := factorial_values
    )
  )

end

