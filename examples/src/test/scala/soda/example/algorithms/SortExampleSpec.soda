
class SortExampleSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    soda.lib.SomeSD_

  check [A] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  sorted_sequence = Seq (1, 3, 5, 5, 8, 9)

  unsorted_sequence = Seq (1, 3, 5, 4, 8, 9)

  test ("test sorted sequence with at") (
    check (
      obtained := SortExampleWithAt_ ().is_sorted (sorted_sequence)
    ) (
      expected := true
    )
  )

  test ("test unsorted sequence with at") (
    check (
      obtained := SortExampleWithAt_ ().is_sorted (unsorted_sequence)
    ) (
      expected := false
    )
  )

  test ("test sorted sequence with zip") (
    check (
      obtained := SortExampleWithZip_ ().is_sorted (sorted_sequence)
    ) (
      expected := true
    )
  )

  test ("test unsorted sequence with zip") (
    check (
      obtained := SortExampleWithZip_ ().is_sorted (unsorted_sequence)
    ) (
      expected := false
    )
  )

  test ("insert sorted simple") (
    check (
      obtained := SortAlgorithmExampleWithFold_ ().insert_sorted (Seq (1, 2, 3, 6, 8, 9) ) (5)
    ) (
      expected := Seq (1, 2, 3, 5, 6, 8, 9)
    )
  )

  test ("insert sorted with repetition") (
    check (
      obtained := SortAlgorithmExampleWithFold_ ().insert_sorted (Seq (1, 2, 3, 5, 6, 8, 9) ) (5)
    ) (
      expected := Seq (1, 2, 3, 5, 5, 6, 8, 9)
    )
  )

  test ("sort unsorted sequence") (
    check (
      obtained := SortAlgorithmExampleWithFold_ ().sort (Seq (3, 5, 1, 9, 8, 4) )
    ) (
      expected := Seq (1, 3, 4, 5, 8 ,9)
    )
  )

  test ("sort unsorted sequence applying constraints to verify correctness") (
    check (
      obtained := ConstrainedSortAlgorithm_ ().sort (Seq (3, 5, 1, 9, 8, 4) )
    ) (
      expected := SomeSD_ (Seq (1, 3, 4, 5, 8 ,9) )
    )
  )

  test ("sort unsorted sequence with SortedSequenceBuilder") (
    check (
      obtained :=
        SortedSequenceBuilder_ [Integer] ()
          .build ( Seq (3, 5, 1, 9, 8, 4).map ( lambda x -> Integer.valueOf (x) ) )
          .sequence
          .map ( lambda x --> x.intValue)
    ) (
      expected := Seq (1, 3, 4, 5, 8 ,9)
    )
  )

end

