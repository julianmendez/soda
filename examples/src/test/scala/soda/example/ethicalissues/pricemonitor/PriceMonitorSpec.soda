package soda.example.ethicalissues.pricemonitor

class UnfairPricingAgent
  extends
    PricingAgent

  abs_get_price: Customer -> Flight -> Int -> Int =
    lambda customer ->
      lambda flight ->
        lambda date ->
          get_price_for (customer) (flight) (date)

  get_price_for (customer: Customer) (flight: Flight) (date: Int): Int =
    customer.name.length * (date % 100 + 100 * flight.intermediate_airports.length + 1)

end

class FairPricingAgent
  extends
    PricingAgent

  abs_get_price: Customer -> Flight -> Int -> Int =
    lambda customer ->
      lambda flight ->
        lambda date ->
          get_price_for (customer) (flight) (date)

  get_price_for (customer: Customer) (flight: Flight) (date: Int): Int =
    100 * (flight.intermediate_airports.length + 1)

end

class PriceMonitorSpec ()
  extends
    org.scalatest.funsuite.AnyFunSuite

  import
    java.util.Calendar
    java.util.TimeZone

  fair_pricing_agent = FairPricingAgent_ ()

  unfair_pricing_agent = UnfairPricingAgent_ ()

  customer_1 = Customer_ (name := "Jon", ip_address := "127.0.0.1")

  customer_2 = Customer_ (name := "Maria", ip_address := "192.168.1.1")

  flight_1 = Flight_ ("BER", Seq ("FRA", "ARN"), "UMU")

  date_1 = 18898

  test ("unfair pricing agent - requirement_monitor 1")
    let
      requirement_monitor = Requirement1Monitor_ (unfair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (customer_2) (flight_1) (date_1)
      expected = Report1_ (false, 897, 1495, 0.6)
    in assert (obtained == expected)

  test ("unfair pricing agent - requirement_monitor 2")
    let
      requirement_monitor = Requirement2Monitor_ (unfair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (flight_1) (date_1)
      expected = Report2_ (false, 702, 897)
    in assert (obtained == expected)

  test ("unfair pricing agent - requirement_monitor 3")
    let
      requirement_monitor = Requirement3Monitor_ (unfair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (flight_1) (date_1)
      expected = Report3_ (false, 897, 891)
    in assert (obtained == expected)

  test ("fair pricing agent - requirement_monitor 1")
    let
      requirement_monitor = Requirement1Monitor_ (fair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (customer_2) (flight_1) (date_1)
      expected = Report1_ (true, 300, 300, 1.0)
    in assert (obtained == expected)

  test ("fair pricing agent - requirement_monitor 2")
    let
      requirement_monitor = Requirement2Monitor_ (fair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (flight_1) (date_1)
      expected = Report2_ (true, 300, 300)
    in assert (obtained == expected)

  test ("fair pricing agent - requirement_monitor 3")
    let
      requirement_monitor = Requirement3Monitor_ (fair_pricing_agent)
      obtained = requirement_monitor.get_report (customer_1) (flight_1) (date_1)
      expected = Report3_ (true, 300, 300)
    in assert (obtained == expected)

  test ("get number of days for 1970-01-01")
    let
      calendar = @new Calendar.Builder ()
        .setTimeZone (TimeZone.getTimeZone ("UTC"))
        .setDate (1970, 0, 1)
        .build
      date = calendar.getTime
      obtained = fair_pricing_agent.get_days_for (date)
      expected = 0
    in assert (obtained == expected)

  test ("get number of days for 2021-09-28")
    let
      calendar = @new Calendar.Builder ()
        .setTimeZone (TimeZone.getTimeZone ("UTC"))
        .setDate (2021, 8, 28)
        .build
      date = calendar.getTime
      obtained = fair_pricing_agent.get_days_for (date)
      expected = 18898
    in assert (obtained == expected)

end

