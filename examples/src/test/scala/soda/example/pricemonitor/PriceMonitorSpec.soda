package soda.example.pricemonitor


* UnfairPricingAgent
  extends PricingAgent = {

  get_price (customer: Customer, flight: Flight, date: Int): Int =
    customer.name.length * (date % 100 + 100 * flight.intermediate_airports.length + 1)
}

* UnfairPricingAgent_()
  extends UnfairPricingAgent

* FairPricingAgent
  extends PricingAgent = {

  get_price (customer: Customer, flight: Flight, date: Int): Int =
    100 * (flight.intermediate_airports.length + 1)
}

* FairPricingAgent_()
  extends FairPricingAgent

* PriceMonitorSpec()
  extends org.scalatest.funsuite.AnyFunSuite = {

  fair_pricing_agent = FairPricingAgent_()

  unfair_pricing_agent = UnfairPricingAgent_()

  customer_1 = Customer_ (name := "Jon", ip_address := "127.0.0.1")
  customer_2 = Customer_ (name := "Maria", ip_address := "192.168.1.1")

  flight_1 = Flight_ ("BER", Seq("FRA", "ARN"), "UMU")
  date_1 = 18898

  test("Test unfair pricing agent - principle 1") {
    principle = Principle1_(unfair_pricing_agent)
    obtained = principle.complies (customer_1, customer_2, flight_1, date_1)
    expected = Report1_(false, 897, 1495, 0.6)

    assert (obtained == expected)
  }

  test("Test unfair pricing agent - principle 2") {
    principle = Principle2_(unfair_pricing_agent)
    obtained = principle.complies (customer_1, flight_1, date_1)
    expected = Report2_(false, 702, 897)

    assert (obtained == expected)
  }

  test("Test unfair pricing agent - principle 3") {
    principle = Principle3_(unfair_pricing_agent)
    obtained = principle.complies (customer_1, flight_1, date_1)
    expected = Report3_(false, 897, 891)

    assert (obtained == expected)
  }

  test("Test fair pricing agent - principle 1") {
    principle = Principle1_ (fair_pricing_agent)
    obtained = principle.complies (customer_1, customer_2, flight_1, date_1)
    expected = Report1_ (true, 300, 300, 1.0)

    assert (obtained == expected)
  }

  test("Test fair pricing agent - principle 2") {
    principle = Principle2_ (fair_pricing_agent)
    obtained = principle.complies (customer_1, flight_1, date_1)
    expected = Report2_ (true, 300, 300)

    assert (obtained == expected)
  }

  test("Test fair pricing agent - principle 3") {
    principle = Principle3_ (fair_pricing_agent)
    obtained = principle.complies (customer_1, flight_1, date_1)
    expected = Report3_ (true, 300, 300)

    assert (obtained == expected)
  }
}

