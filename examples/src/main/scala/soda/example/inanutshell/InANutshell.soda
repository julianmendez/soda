package soda.example.inanutshell

class InANutshell

  f (x : Int) : Int = x + 16

  value = f (numbers)

  numbers = 1 + 2 + 4 + 8

  h0 (x : Int) (y : Int) : Int =
    x + y

  h1 (x : Int) (y : Int) : Int =
    x - y

  h2 (x : Int) (y : Int) : Int =
    (h0 (x) (y) ) * (h1 (x) (y) )

  is_greater_than (a : Int) (b : Int) : Boolean =
    a > b

  max (a : Int) (b : Int) : Int =
    if a > b
    then a
    else b

end

class MaxAndMin

  max (a : Int) (b : Int) : Int =
    if a > b
    then a
    else b

  min (a : Int) (b : Int) : Int =
    if a < b
    then a
    else b

end

class MinMaxPair

  abstract
    min : Int
    max : Int

end

class Indexable

  abstract
    index : Int

end

class Example
  extends Indexable

  abstract
    index : Int

  min_max (a : Int) (b : Int) : MinMaxPair =
    MinMaxPair_ (
      min := MaxAndMin_ ().min (a) (b),
      max := MaxAndMin_ ().max (a) (b)
    )

end

class Comparable

  abstract
    is_greater_than : Comparable -> Boolean

end

class ComparableMax [A subtype Comparable]

  max (a : A) (b : A) : A =
    if a.is_greater_than (b)
    then a
    else b

end

class WithInstance

  abstract
    instance_parameter : Int

end

class MyClass
  extends
    WithInstance

  abstract
    instance_parameter : Int

  class_constant : Int = 1

  another_function (x : Int) : Int = 2 * x

end

class TimeOfToday

  import
    java.util.Date

  get_time : Date = @new Date ()

end

class Main

  main (arguments : Array [String] ) : Unit =
    println ("Hello world!")

end

class PersonName

  abstract
    name : String

  @override
  toString = name

end

