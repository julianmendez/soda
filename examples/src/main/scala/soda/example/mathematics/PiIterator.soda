
class Status

  abstract
    r : BigInt
    n : Int
    q : BigInt
    t : BigInt
    l : Int
    k : Int

  @override
  toString = " r=" + r + " n=" + n + " q=" + q + " t=" + t + " l=" + l + " k=" + k

end

class IntAndStatus

  abstract
    digit : Int
    new_status : Status

end

class PiIterator

  abstract

  _initial_status =
    Status .mk (r := 0) (n := 3) (q := 1) (t := 1) (l := 3) (k := 1)

  @tailrec
  _tailrec_compute_new_status (s : Status) : Status =
    if (4 * s .q + s .r - s .t) < (s .n * s .t)
    then s
    else
      _tailrec_compute_new_status (
        Status .mk (
          r := (2 * s .q + s .r) * s .l) (
          n := ( (s .q * (7 * s .k) + 2 + (s .r * s .l) ) / (s .t * s .l) ) .toInt) (
          q := s .q * s .k) (
          t := s .t * s .l) (
          l := s .l + 2) (
          k := s .k + 1
        )
      )

  _compute_new_status (s : Status) : Status =
    _tailrec_compute_new_status (s)

  @tailrec
  _tailrec_take (n : Int) (rev_seq : Seq [Int] ) (s : Status) (t : IntAndStatus) : Seq [Int] =
    if n == 0
    then rev_seq .reverse
    else _tailrec_take (n - 1) (rev_seq .+: (t .digit) ) (t .new_status) (
      _get_next (t .new_status) )

  _get_next_with_new_status (s : Status) : IntAndStatus =
    IntAndStatus .mk (s .n) (
      Status .mk (
        r := 10 * (s .r - s .n * s .t)) (
        n := ( ( (10 * (3 * s .q + s .r) ) / s .t) - (10 * s .n) ) .toInt) (
        q := s .q * 10) (
        t := s .t) (
        l := s .l) (
        k := s .k
      )
    )

  _get_next (s : Status) : IntAndStatus =
    _get_next_with_new_status (_compute_new_status (s) )

  apply (n : Int) : Seq [Int] =
    _tailrec_take (n) (Seq () ) (_initial_status) (_get_next (_initial_status) )

end

