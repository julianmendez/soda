package soda.example.mathematics

class FactorialPatternMatching
  extends
    AbstractFactorialConcise

  @tailrec
  _tailrec_get_factorial (n: Int, product: Int): Int =
    match n
      | 0 => product
      | k => _tailrec_get_factorial (k - 1, k * product)
    end

  get_factorial: Int -> Int =
    lambda n -> get_factorial_for (n)

  get_factorial_for (n: Int): Int =
    _tailrec_get_factorial (n, 1)

end

class FactorialPatternMatching_ ()
  extends
    FactorialPatternMatching

end
