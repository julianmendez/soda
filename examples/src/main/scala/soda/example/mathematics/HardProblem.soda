
class InputPair [A : Type] [B : Type]

  abstract
    value : A
    memoized_values : Map [A] [B]

end

class OutputPair [A : Type] [B : Type]

  abstract
    value : B
    memoized_values : Map [A] [B]

end

class MemoizableFunction [A : Type] [B : Type]

  abstract
    /** compute (input : InputPair [A] [B] ) : OutputPair [A] [B] */
    abs_compute : InputPair [A] [B] -> OutputPair [A] [B]

  compute (input : InputPair [A] [B] ) : OutputPair [A] [B] =
    abs_compute (input)

end

class MainFunction [A : Type] [B : Type]

  abstract
    main_function : InputPair [A] [B] -> OutputPair [A] [B]

end

class Memoizer [A : Type] [B : Type]
  extends
    MemoizableFunction [A] [B]
    MainFunction [A] [B]

  abstract
    main_function : InputPair [A] [B] -> OutputPair [A] [B]

  _add_element (output : OutputPair [A] [B], new_pair : Tuple2 [A] [B] ) : OutputPair [A] [B] =
    OutputPair_ (output .value, output .memoized_values + new_pair)

  _compute_and_update_with (input_value : A) (output : OutputPair [A] [B] )
      : OutputPair [A] [B] =
    _add_element (output, Tuple2 (input_value, output .value) )

  compute_and_update (input : InputPair [A] [B] ) : OutputPair [A] [B] =
    _compute_and_update_with (input .value) (main_function (input) )

  _compute_with (maybe_res : Option [B] ) (input : InputPair [A] [B] ) : OutputPair [A] [B] =
    if maybe_res .isEmpty
    then compute_and_update (input)
    else OutputPair_ (maybe_res .get, input .memoized_values)

  compute_for (input : InputPair [A] [B] ) : OutputPair [A] [B] =
    _compute_with (input .memoized_values .get (input .value) ) (input)

  abs_compute : InputPair [A] [B] -> OutputPair [A] [B] =
    lambda input -->
      compute_for (input)

end

class HardProblem
  extends
    MemoizableFunction [Int] [Int]

  is_even (n : Int) : Boolean =
    n % 2 == 0

  one_step (n : Int) : Int =
    if is_even (n)
    then n / 2
    else 3 * n + 1

  _plus_one (pair : OutputPair [Int] [Int] ) : OutputPair [Int] [Int] =
    OutputPair_ (1 + pair .value, pair .memoized_values)

  main_function : InputPair [Int] [Int] -> OutputPair [Int] [Int] =
    lambda input -->
      if input .value == 1
      then OutputPair_ (0, input .memoized_values)
      else _plus_one (compute (InputPair_ (one_step (input .value), input .memoized_values) ) )

  memoizer = Memoizer_ [Int] [Int] (main_function)

  compute_for (input : InputPair [Int] [Int] ) : OutputPair [Int] [Int] =
    memoizer .compute (input)

  abs_compute : InputPair [Int] [Int] -> OutputPair [Int] [Int] =
    lambda input -->
      compute_for (input)

end

class MemoizedFibonacci
  extends
    MemoizableFunction [Int] [Int]

  _get_next_fibo (a : Int) (b : Int) : Int =
    a + b

  _compute_and_update_3 (res : Int) (second_map : Map [Int] [Int] ) (n : Int)
      : OutputPair [Int] [Int] =
    OutputPair_ (res, second_map + Tuple2 (n, res) )

  _compute_and_update_2 (first_value : Int) (second_tuple : OutputPair [Int] [Int] ) (n : Int )
      : OutputPair [Int] [Int] =
    _compute_and_update_3 (_get_next_fibo (first_value) (second_tuple .value) )
      (second_tuple .memoized_values) (n)

  _compute_and_update_1 (first_tuple : OutputPair [Int] [Int] ) (n : Int )
      : OutputPair [Int] [Int] =
    _compute_and_update_2 (first_tuple .value) (compute (
      InputPair_ (n - 1, first_tuple .memoized_values) ) ) (n)

  main_function_for (input : InputPair [Int] [Int] ): OutputPair [Int] [Int] =
    if (input .value == 0) or (input .value == 1)
    then OutputPair_ (input .value, input .memoized_values )
    else _compute_and_update_1 (compute (
      InputPair_ (input .value - 2, input .memoized_values ) ) ) (input .value)

  main_function : InputPair [Int] [Int] -> OutputPair [Int] [Int] =
    lambda input -->
      main_function_for (input)

  memoizer = Memoizer_ [Int] [Int] (main_function)

  compute_for (input : InputPair [Int] [Int] ) : OutputPair [Int] [Int] =
    memoizer .compute (input)

  abs_compute : InputPair [Int] [Int] -> OutputPair [Int] [Int] =
    lambda input -->
      compute_for (input)

end

