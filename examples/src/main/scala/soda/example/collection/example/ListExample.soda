
class Pair [A : Type]

  abstract
    name : String
    result : A

end

class ListExample

  abstract

  a : Seq [Char] = Seq ('A', 'B', 'C', 'D', 'E', 'F')

  b : Seq [Int] = Seq (10 , 20 , 30 , 40 , 50 , 60)

  a_example : Pair [Seq [Char] ] =
    Pair .mk ("a") (a)

  b_example : Pair [Seq [Int] ] =
    Pair .mk ("b") (b)

  take_example : Pair [Seq [Char] ] =
    Pair .mk ("a .take (3)") (a .take (3) )

  takeRight_example : Pair [Seq [Char] ] =
    Pair .mk ("a .takeRight (3)") (a .takeRight (3) )

  takeWhile_example : Pair [Seq [Char] ] =
    Pair .mk ("a .takeWhile (lambda x --> not (x == 'E') )") (
      a .takeWhile (lambda x --> not (x == 'E') ) )

  drop_example : Pair [Seq [Char] ] =
    Pair .mk ("a .drop (2)") (a .drop (2) )

  dropRight_example : Pair [Seq [Char] ] =
    Pair .mk ("a .dropRight (2)") (a .dropRight (2))

  dropWhile_example : Pair [Seq [Char] ] =
    Pair .mk ("a .dropWhile (lambda x --> not (x == 'E'))") (
      a .dropWhile (lambda x --> not (x == 'E') ) )

  splitAt_example : Pair [Tuple2 [Seq [Char] ] [Seq [Char] ] ] =
    Pair .mk ("a .splitAt (3)") (a .splitAt (3) )

  indices_example : Pair [Range] =
    Pair .mk ("a .indices") (a .indices)

  zipWithIndex_example : Pair [Seq [Tuple2 [Char] [Int] ] ] =
    Pair .mk ("a .zipWithIndex") (a .zipWithIndex)

  zip_example : Pair [Seq [Tuple2 [Char] [Int] ] ] =
    Pair .mk ("a .zip (b)") (a .zip (b) )

  reverse_example : Pair [Seq [Char] ] =
    Pair .mk ("a .reverse") (a .reverse)

  /**
   * A mnemonic for `+:` vs. `:+` is that the COLon goes on the COLlection side.
   */
  prepended_example : Pair [Seq [Char] ] =
    Pair .mk ("a .+: ('X')") ( (a .+: ('X') ) )

  /**
   * A mnemonic for `+:` vs. `:+` is that the COLon goes on the COLlection side.
   */
  appended_example : Pair [Seq [Char] ] =
    Pair .mk ("a .:+ ('X')") ( (a .:+ ('X') ) )

  concat_example : Pair [Seq [Int] ] =
    Pair .mk ("a .map (lambda x --> x .toInt) .++ (b)") (a .map (lambda x --> x .toInt) .++ (b)
    )

  span_example : Pair [Tuple2 [Seq [Char] ] [Seq [Char] ] ] =
    Pair .mk ("a .span (lambda x --> not (x == 'D') )") (a .span (lambda x --> not (x == 'D') )
    )

  map_example : Pair [Seq [Int] ] =
    Pair .mk ("a .map (lambda x --> x .toInt)") (a .map (lambda x --> x .toInt) )

  filter_example : Pair [Seq [Char] ] =
    Pair .mk ("a .filter (lambda x --> x .toInt % 2 == 0)") (
      a .filter (lambda x --> x .toInt % 2 == 0) )

  fold_example : Pair [Int] =
    Pair .mk ("b .fold(0) (lambda (a , b) --> a + b)") (b .fold (0) (lambda (a , b) --> a + b) )

  foldLeft_example : Pair [Seq [Char] ] =
    Pair .mk ("a .foldLeft (Seq ('*') )" +
      " (lambda (list , elem) --> \"(\" + list + \" :+ \" + elem + \")\")") (
      a .foldLeft (Seq ('*') ) (lambda (list , elem) --> "(" + list + " :+ " + elem + ")") )

  foldRight_example : Pair [Seq [Char] ] =
    Pair .mk ("a .foldRight (Seq ('*') )" +
      " (lambda (elem , list) --> \"(\" + elem + \" +: \" + list + \")\")") (
      a .foldRight (Seq ('*') ) (lambda (elem , list) --> "(" + elem + " +: " + list + ")") )

end

