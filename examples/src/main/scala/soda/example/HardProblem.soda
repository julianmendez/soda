package soda.translator.example


* Memoizer[A, B] = {
  + soda.lib.OptionSD
  + soda.lib.SomeSD
  + soda.lib.NoneSD

  has memoized_values: Map[A, B]

  has main_function: A -> B

  has computation_condition: A -> Boolean

  compute(x: A): Memoizer[A, B] =
    if computation_condition(x)
    then
      let
        new_pair = (x, _get(x))
      in _Memoizer_(memoized_values + new_pair, main_function, computation_condition)
    else this

  get(x: A): Option[B] =
    if computation_condition(x)
    then Some(_get(x))
    else None

  _get(x: A): B =
    let
      maybe_value = memoized_values.get(x)
      result =
        if maybe_value.isEmpty
        then main_function(x)
        else maybe_value.get
    in result
}

* _Memoizer_[A, B](
    memoized_values: Map[A, B],
    main_function: A -> B,
    computation_condition: A -> Boolean )
  extends Memoizer[A, B]

* HardProblem
  extends Memoizer[Int, Int] = {

  is_even(n: Int): Boolean =
    n % 2 == 0

  one_step(n: Int): Int =
    if is_even(n)
    then n / 2
    else 3 * n + 1

  main_function: Int -> Int = (n: Int) ->
    if n == 1
    then 2
    else get(one_step(n)).get + 1

  computation_condition: Int -> Boolean = (n: Int) ->
    n > 0
}

* _HardProblem_(memoized_values: Map[Int, Int])
  extends HardProblem

* HardProblemBuilder = {

  memoized_values = Map[Int, Int]()

  build =
    _HardProblem_(memoized_values)
}

* HardProblemBuilder_() extends HardProblemBuilder

