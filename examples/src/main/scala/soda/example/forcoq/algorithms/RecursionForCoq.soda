
/**
 * This class contains tail recursive auxiliary functions.
 */

class RecursionForCoq

  @tailrec
  _tailrec_fold4 [A : Type] [B : Type] (sequence : Seq [A] ) (current : B)
      (next_value : B -> A -> B) (condition : B -> A -> Boolean) : B =
    match sequence
      case (head) :: (tail) ==>
         if (not (condition (current) (head) ) )
         then current
         else _tailrec_fold4 (tail) (next_value (current) (head)) (next_value) (condition)
      case otherwise ==> current

  fold4 [A : Type] [B : Type] (sequence : Seq [A] ) (initial_value : B)
      (next_value : B -> A -> B) (condition : B -> A -> Boolean) : B =
    _tailrec_fold4 (sequence) (initial_value) (next_value) (condition)

  @tailrec
  _tailrec_fold3 [A : Type] [B : Type] (sequence : Seq [A] ) (current : B)
      (next_value : B -> A -> B) : B =
    match sequence
      case (head) :: (tail) ==> _tailrec_fold3 (tail) (next_value (current) (head) ) (next_value)
      case otherwise ==> current

  fold3 [A : Type] [B : Type] (sequence : Seq [A] ) (initial_value : B)
      (next_value : B -> A -> B) : B =
    _tailrec_fold3 (sequence) (initial_value) (next_value)

  @tailrec
  _tailrec_range (n : Int) (sequence : Seq [Int] ) : Seq [Int] =
    if n <= 0
    then sequence
    else _tailrec_range (n - 1) (sequence .+: (n - 1) )

  range (length : Int) : Seq [Int] =
    _tailrec_range (length) (Nil)

end

