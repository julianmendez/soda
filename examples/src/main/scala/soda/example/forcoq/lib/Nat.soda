package soda.example.forcoq.lib

class nat

  abstract
    add: nat -> nat
    mul: nat -> nat

end

class O
  extends
    nat

  add: nat -> nat =
    lambda a -> add_for (a)

  add_for (a: nat): nat =
    a

  mul: nat ->  nat =
    lambda a -> mul_for (a)

  mul_for (a: nat): nat =
    this

end

class O_ ()
  extends O

end

class S
  extends
    nat

  abstract
    k: nat

  t = IntNat_ ()

  add: nat -> nat =
    lambda a -> add_for (a)

  add_for (a: nat): nat =
    t.from_non_negative( (t.to_Int (k) + 1) + t.to_Int (a) )

  mul: nat ->  nat =
    lambda a -> mul_for (a)

  mul_for (a: nat): nat =
    t.from_non_negative( (t.to_Int (k) + 1) * t.to_Int (a) )

end

class S_ (k: nat)
  extends S

end

class IntNat

  import
    soda.lib.NoneSD_
    soda.lib.OptionSD
    soda.lib.SomeSD_

  from_Int (a: Int): OptionSD [nat] =
    if a < 0
    then NoneSD_ [nat] ()
    else SomeSD_ [nat] (from_non_negative (a))

  @tailrec
  _tailrec_from_non_negative (a: Int, b: nat): nat =
    if a <= 0
    then b
    else _tailrec_from_non_negative (a - 1, S_ (b))

  from_non_negative (a: Int): nat =
    _tailrec_from_non_negative (a, O_ ())

  to_Int (a: nat): Int =
    match a
      | O_ () => 0
      | S_ (k) => 1 + to_Int (k)
    end

end

class IntNat_ ()
  extends
    IntNat

end
