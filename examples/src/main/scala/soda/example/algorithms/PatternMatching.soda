package soda.example.algorithms

class Parameter

  abstract
    name : String

end

class PatternMatching

  get_value (p : Parameter) : Int =
    match p
      case Singleton_ (x) => x
      case Pair_ (x, y) => (x + y) / 2
      case Triplet_ (x, y, z) => (x + y + z) / 3
      case otherwise => 0
    end

  get_type_name (p : Parameter) : String =
    match p
      case x : Singleton => x.name + "(x)"
      case x : Pair => x.name + "(x, y)"
      case x : Triplet => x.name + "(x, y, z)"
      case otherwise => ""
    end

end

class Singleton
  extends
    Parameter

  abstract
    x : Int

  name = "singleton"

end

class Pair
  extends
    Parameter

  abstract
    x : Int
    y : Int

  name = "pair"

end

class Triplet
  extends
    Parameter

  abstract
    x : Int
    y : Int
    z : Int

  name = "triplet"

end

