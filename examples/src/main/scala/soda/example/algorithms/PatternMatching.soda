package soda.example.algorithms

class Parameter

  abstract
    name: String

end

class PatternMatching

  get_value (p: Parameter): Int =
    match p
      | Singleton (x) => x
      | Pair (x, y) => (x + y) / 2
      | Triplet (x, y, z) => (x + y + z) / 3
      | otherwise => 0
    end

  get_type_name (p: Parameter): String =
    match p
      | x: Singleton => x.name + "(x)"
      | x: Pair => x.name + "(x, y)"
      | x: Triplet => x.name + "(x, y, z)"
      | otherwise => ""
    end

end

class PatternMatching_ ()
  extends
    PatternMatching

end

class Singleton (x: Int)
  extends
    Parameter

  name = "singleton"

end

class Pair (x: Int, y: Int)
  extends
    Parameter

  name = "pair"

end

class Triplet (x: Int, y: Int, z: Int)
  extends
    Parameter

  name = "triplet"

end

