package soda.example.algorithms

class PairExample

  abstract
    left : Int
    right : Int

end

class SwapExample

  import
    PairExample

  left (pair : PairExample) : Int =
    match pair
      case (PairExample_ (x , y) ) ==> x
    end

  right (pair : PairExample) : Int =
    match pair
      case (PairExample_ (x , y) ) ==> y
    end

  swap (pair : PairExample) : PairExample =
    PairExample_ (right (pair) , left (pair) )

  theorem
    swap_of_swap : forall (pair : PairExample) , (swap (swap (pair) ) ) = pair

  proof
    intros p.
    destruct p.
    compute.
    destruct x.
    apply eq_refl.

end

