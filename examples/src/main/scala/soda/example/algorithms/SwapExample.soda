package soda.example.algorithms

* PairExample =

  abstract
    left: Int
    right: Int

end

* PairExample_ (left: Int, right: Int)
  extends PairExample

* SwapExample =

  left (pair: PairExample): Int =
    match pair
      | (PairExample_ (x, y) ) => x
    end

  right (pair: PairExample): Int =
    match pair
      | (PairExample_ (x, y) ) => y
    end

  swap (pair: PairExample): PairExample =
    PairExample_ (pair.right, pair.left)

  theorem
    swap_of_swap: forall (pair: PairExample), (swap (swap (pair) ) ) == pair

  proof
    intros p.
    destruct p.
    compute.
    apply eq_refl.

end

