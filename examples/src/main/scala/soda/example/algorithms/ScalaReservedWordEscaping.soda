
class MyPair [A : Type] [B : Type]

  abstract
    key : A
    value : B

end

class ScalaReservedWordEscaping

  abstract

  var = "var"

  val = 1

  def g [A : Type] [B : Type] (key : A) (value : B) : MyPair [A] [B] = MyPair_ (key , value)

  while [A : Type] [B : Type] (seq : Seq [A] ) (cond : A -> Boolean) (func : A -> B) : Seq [B] =
    seq .takeWhile (cond) .map (func)

  protected = "protected"

  private = "private"

  f (x : Int) (y : Int) : Int = x + y

  cons : Int -> Int -> Int =
    lambda x -->
      lambda y -->
        f (x) (y)

end

